/*
 * Generated by Robotoworks Mechanoid
 */
package info.mx.tracks.sqlite;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;

import com.robotoworks.mechanoid.db.SQLiteMigration;

import java.util.Locale;

import info.mx.tracks.common.SecHelper;
import info.mx.tracks.prefs.MxPreferences;
import info.mx.tracks.sqlite.MxInfoDBContract.Country;
import timber.log.Timber;

public class MxInfoDBOpenHelper extends AbstractMxInfoDBOpenHelper {
    private static final String DBNAME = "MxInfo.db";
    private static SQLiteDatabase database;

    public MxInfoDBOpenHelper(Context context) {
        super(context, getDir(context));
    }

    @Override
    public void onOpen(SQLiteDatabase db) {
        super.onOpen(db);
        this.setDatabase(db);
    }

    public static String getDir(Context context) {
        return context.getDatabasePath(DBNAME).getAbsolutePath();
    }

    @Override
    protected SQLiteMigration createMxInfoDBMigrationV1() {

        return new info.mx.tracks.sqlite.migrations.DefaultMxInfoDBMigrationV1() {

            @Override
            public void onAfterUp(SQLiteDatabase db) {
                final ContentValues cvToFilter = Country.newBuilder()
                        .setCountry("zz")
                        .setShow(0)
                        .getValues();
                db.insert(MxInfoDBOpenHelper.Sources.COUNTRY, null, cvToFilter);
                final String country = Locale.getDefault().getCountry();
                final String defCountry = country.substring(0, country.length() < 2 ? country.length() : 2);
                final ContentValues cvToShow = Country.newBuilder()
                        .setCountry(defCountry.equals("") ? "DE" : defCountry) // TODO
                        .setShow(1)
                        .getValues();
                db.insert(MxInfoDBOpenHelper.Sources.COUNTRY, null, cvToShow);
                if (!defCountry.equals("DE")) {
                    final ContentValues cvToDE = Country.newBuilder()
                            .setCountry(Locale.GERMANY.getCountry())
                            .setShow(1)
                            .getValues();
                    db.insert(MxInfoDBOpenHelper.Sources.COUNTRY, null, cvToDE);
                }
            }
        };
    }

    @Override
    protected SQLiteMigration createMxInfoDBMigrationV4() {

        return new info.mx.tracks.sqlite.migrations.DefaultMxInfoDBMigrationV4() {

            @Override
            public void onAfterUp(SQLiteDatabase db) {
                // hide closed tracks by default
                MxPreferences.getInstance().edit().putOnlyOpen(true).commit();
            }
        };
    }

    @Override
    protected SQLiteMigration createMxInfoDBMigrationV5() {

        return new info.mx.tracks.sqlite.migrations.DefaultMxInfoDBMigrationV5() {


            @Override
            public void onBeforeUp(SQLiteDatabase db) {
                // crypt facebook existing values
                String[] columns = new String[]{MxInfoDBContract.Tracks._ID, MxInfoDBContract.Tracks.FACEBOOK};
                Cursor cursor = db
                        .query(Sources.TRACKS, columns, MxInfoDBContract.Tracks.FACEBOOK + " is not null", null, null, null, null);
                while (cursor.moveToNext()) {
                    String facebookCrypt = SecHelper.encryptB64(cursor.getString(1));
                    ContentValues values = MxInfoDBContract.Tracks.newBuilder()
                            .setFacebook(facebookCrypt)
                            .getValues();
                    String[] whereArgs = new String[]{cursor.getString(0)};
                    Timber.d("facebook crypt:%s", cursor.getString(0));
                    db.update(Sources.TRACKS, values, MxInfoDBContract.Tracks._ID + " = ?", whereArgs);
                }
                cursor.close();
            }

        };
    }

    public static SQLiteDatabase getDatabase() {
        return database;
    }

    private void setDatabase(SQLiteDatabase database) {
        MxInfoDBOpenHelper.database = database;
    }

}
