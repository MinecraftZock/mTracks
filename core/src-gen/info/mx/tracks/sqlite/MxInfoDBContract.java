/*
 * Generated by Robotoworks Mechanoid
 */
package info.mx.tracks.sqlite;

import android.net.Uri;
import android.provider.BaseColumns;

import com.robotoworks.mechanoid.Mechanoid;
import com.robotoworks.mechanoid.db.AbstractValuesBuilder;

import java.lang.reflect.Field;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

public class MxInfoDBContract {
    public static final String CONTENT_AUTHORITY = initAuthority();

    private static String initAuthority() {
        String authority = "info.mx.tracks.sqlite.mxinfodb";

        try {

            ClassLoader loader = MxInfoDBContract.class.getClassLoader();

            Class<?> clz = loader.loadClass("info.mx.tracks.sqlite.MxInfoDBContentProviderAuthority");
            Field declaredField = clz.getDeclaredField("CONTENT_AUTHORITY");

            authority = declaredField.get(null).toString();
        } catch (ClassNotFoundException e) {
        } catch (NoSuchFieldException e) {
        } catch (IllegalArgumentException e) {
        } catch (IllegalAccessException e) {
        }

        return authority;
    }

    private static final Uri BASE_CONTENT_URI = Uri.parse("content://" + CONTENT_AUTHORITY);

    interface CountryColumns {
        String COUNTRY = "country";
        String SHOW = "show";
    }

    interface EventsColumns {
        String REST_ID = "restId";
        String CHANGED = "changed";
        String TRACK_REST_ID = "track_restId";
        String SERIES_REST_ID = "series_restId";
        String COMMENT = "comment";
        String APPROVED = "approved";
        String EVENT_DATE = "eventDate";
    }

    interface FavoritsColumns {
        String TRACK_REST_ID = "track_restId";
    }

    interface ImportstatusColumns {
        String MSG = "msg";
        String CREATED = "created";
    }

    interface MessageColumns {
        String REST_ID = "restId";
        String CHANGED = "changed";
        String ANDROIDID = "androidid";
        String READ = "read";
        String MSG = "msg";
    }

    interface NetworkColumns {
        String REASON = "reason";
        String TRACKS = "tracks";
        String CREATED = "created";
    }

    interface NotesColumns {
        String REST_ID = "restId";
        String CHANGED = "changed";
        String TRACK_REST_ID = "track_restId";
        String COUNTRY = "country";
        String NOTE = "note";
    }

    interface PicturesColumns {
        String REST_ID = "restId";
        String CHANGED = "changed";
        String USERNAME = "username";
        String COMMENT = "comment";
        String TRACK_REST_ID = "track_restId";
        String APPROVED = "approved";
        String DELETED = "deleted";
        String LOCALFILE = "localfile";
        String LOCALTHUMB = "localthumb";
    }

    interface RatingsColumns {
        String REST_ID = "restId";
        String CHANGED = "changed";
        String TRACK_REST_ID = "track_restId";
        String RATING = "rating";
        String USERNAME = "username";
        String NOTE = "note";
        String COUNTRY = "country";
        String DELETED = "deleted";
        String APPROVED = "approved";
        String ANDROIDID = "androidid";
    }

    interface RouteColumns {
        String TRACK_CLIENT_ID = "trackClientId";
        String LONGITUDE = "Longitude";
        String LATITUDE = "Latitude";
        String CONTENT = "content";
        String CREATED = "created";
    }

    interface SeriesColumns {
        String REST_ID = "restId";
        String CHANGED = "changed";
        String NAME = "name";
        String SERIES_URL = "seriesUrl";
    }

    interface TracksColumns {
        String REST_ID = "restId";
        String CHANGED = "changed";
        String TRACKNAME = "Trackname";
        String LONGITUDE = "Longitude";
        String LATITUDE = "Latitude";
        String APPROVED = "Approved";
        String COUNTRY = "Country";
        String URL = "Url";
        String FEES = "Fees";
        String PHONE = "Phone";
        String NOTES = "Notes";
        String CONTACT = "Contact";
        String NOTES_EN = "NotesEn";
        String METATEXT = "Metatext";
        String LICENCE = "Licence";
        String KIDSTRACK = "Kidstrack";
        String OPENMONDAYS = "Openmondays";
        String OPENTUESDAYS = "Opentuesdays";
        String OPENWEDNESDAY = "Openwednesday";
        String OPENTHURSDAY = "Openthursday";
        String OPENFRIDAY = "Openfriday";
        String OPENSATURDAY = "Opensaturday";
        String OPENSUNDAY = "Opensunday";
        String HOURSMONDAY = "Hoursmonday";
        String HOURSTUESDAY = "Hourstuesday";
        String HOURSWEDNESDAY = "Hourswednesday";
        String HOURSTHURSDAY = "Hoursthursday";
        String HOURSFRIDAY = "Hoursfriday";
        String HOURSSATURDAY = "Hourssaturday";
        String HOURSSUNDAY = "Hourssunday";
        String TRACKLENGTH = "Tracklength";
        String SOILTYPE = "Soiltype";
        String CAMPING = "Camping";
        String SHOWER = "Shower";
        String CLEANING = "Cleaning";
        String ELECTRICITY = "Electricity";
        String DISTANCE2LOCATION = "Distance2location";
        String SUPERCROSS = "Supercross";
        String TRACKACCESS = "trackaccess";
        String LOGO_U_R_L = "logoURL";
        String SHOWROOM = "showroom";
        String WORKSHOP = "workshop";
        String VALIDUNTIL = "validuntil";
        String BRANDS = "brands";
        String NU_EVENTS = "Nu_events";
        String FACEBOOK = "facebook";
        String ADRESS = "adress";
        String FEESCAMPING = "feescamping";
        String DAYSOPEN = "daysopen";
        String NOISELIMIT = "noiselimit";
        String CAMPINGRVRVHOOKUP = "campingrvrvhookup";
        String SINGLETRACKS = "singletracks";
        String MXTRACK = "mxtrack";
        String A4X4 = "a4x4";
        String UTV = "utv";
        String QUAD = "quad";
        String TRACKSTATUS = "trackstatus";
        String AREATYPE = "areatype";
        String SCHWIERIGKEIT = "schwierigkeit";
        String LAST_ASKED = "lastAsked";
        String INDOOR = "indoor";
        String ENDURO = "enduro";
    }

    interface TrackstageColumns {
        String REST_ID = "restId";
        String CREATED = "created";
        String COUNTRY = "Country";
        String TRACKNAME = "Trackname";
        String LONGITUDE = "Longitude";
        String LATITUDE = "Latitude";
        String INS_LONGITUDE = "InsLongitude";
        String INS_LATITUDE = "InsLatitude";
        String INS_DISTANCE = "InsDistance";
        String URL = "Url";
        String PHONE = "Phone";
        String NOTES = "Notes";
        String CONTACT = "Contact";
        String LICENCE = "Licence";
        String KIDSTRACK = "Kidstrack";
        String MEMBERSONLY = "Membersonly";
        String OPENMONDAYS = "Openmondays";
        String OPENTUESDAYS = "Opentuesdays";
        String OPENWEDNESDAY = "Openwednesday";
        String OPENTHURSDAY = "Openthursday";
        String OPENFRIDAY = "Openfriday";
        String OPENSATURDAY = "Opensaturday";
        String OPENSUNDAY = "Opensunday";
        String HOURSMONDAY = "Hoursmonday";
        String HOURSTUESDAY = "Hourstuesday";
        String HOURSWEDNESDAY = "Hourswednesday";
        String HOURSTHURSDAY = "Hoursthursday";
        String HOURSFRIDAY = "Hoursfriday";
        String HOURSSATURDAY = "Hourssaturday";
        String HOURSSUNDAY = "Hourssunday";
        String RACEONLY = "Raceonly";
        String TRACKLENGTH = "Tracklength";
        String SOILTYPE = "Soiltype";
        String CAMPING = "Camping";
        String SHOWER = "Shower";
        String CLEANING = "Cleaning";
        String ELECTRICITY = "Electricity";
        String SUPERCROSS = "Supercross";
        String TRACKACCESS = "trackaccess";
        String FACEBOOK = "facebook";
        String FEES = "Fees";
        String ADRESS = "adress";
        String FEESCAMPING = "feescamping";
        String DAYSOPEN = "daysopen";
        String NOISELIMIT = "noiselimit";
        String CAMPING_R_VHOOKUPS = "campingRVhookups";
        String SINGLE_TRACK = "singleTrack";
        String M_X_TRACK = "MXTrack";
        String A4_X4 = "a4X4";
        String UTV = "UTV";
        String QUAD = "Quad";
        String RATING = "rating";
        String TRACKSTATUS = "trackstatus";
        String AREATYPE = "areatype";
        String SCHWIERIGKEIT = "schwierigkeit";
        String ANDROIDID = "androidid";
        String APPROVED = "approved";
        String TRACK_REST_ID = "track_restId";
        String UPDATED = "updated";
        String INDOOR = "indoor";
        String ENDURO = "enduro";
    }

    interface WeatherColumns {
        String REST_ID = "restId";
        String TRACK_CLIENT_ID = "trackClientId";
        String TYPE = "type";
        String CONTENT = "content";
        String DT = "dt";
        String CREATED = "created";
    }

    interface CountrycountColumns {
        String COUNTRY = "Country";
        String SHOW = "show";
        String COUNT = "count";
    }

    interface CountrysumColumns {
        String COUNTRY = "Country";
        String COUNT = "count";
    }

    interface Events2seriesColumns {
        String TRACK_REST_ID = "track_restId";
        String SERIES_REST_ID = "series_restId";
        String COMMENT = "comment";
        String APPROVED = "approved";
        String EVENT_DATE = "eventDate";
        String SERIESNAME = "seriesname";
    }

    interface EventsumColumns {
        String TRACK_REST_ID = "track_restId";
        String EVENTCOUNT = "eventcount";
    }

    interface PicturesumColumns {
        String TRACK_REST_ID = "track_restId";
        String PICTURECOUNT = "picturecount";
    }

    interface RatingsumColumns {
        String TRACK_REST_ID = "track_restId";
        String RATINGCOUNT = "ratingcount";
        String RATINGAVG = "ratingavg";
    }

    interface TracksGesSumColumns {
        String TRACKNAME = "trackname";
        String APPROVED = "Approved";
        String DISTANCE2LOCATION = "distance2location";
        String OPENMONDAYS = "openmondays";
        String OPENTUESDAYS = "opentuesdays";
        String N_U_EVENTS = "n_u_events";
        String OPENWEDNESDAY = "openwednesday";
        String OPENTHURSDAY = "openthursday";
        String OPENFRIDAY = "openfriday";
        String OPENSATURDAY = "opensaturday";
        String OPENSUNDAY = "opensunday";
        String COUNTRY = "country";
        String TRACKACCESS = "trackaccess";
        String REST_ID = "restId";
        String BRANDS = "brands";
        String METATEXT = "metatext";
        String KIDSTRACK = "Kidstrack";
        String SUPERCROSS = "Supercross";
        String SHOWER = "Shower";
        String CLEANING = "Cleaning";
        String ELECTRICITY = "Electricity";
        String CAMPING = "Camping";
        String LATITUDE = "Latitude";
        String LONGITUDE = "Longitude";
        String HOURSMONDAY = "Hoursmonday";
        String HOURSTUESDAY = "Hourstuesday";
        String HOURSWEDNESDAY = "Hourswednesday";
        String HOURSTHURSDAY = "Hoursthursday";
        String HOURSFRIDAY = "Hoursfriday";
        String HOURSSATURDAY = "Hourssaturday";
        String HOURSSUNDAY = "Hourssunday";
        String VALIDUNTIL = "validuntil";
        String URL = "Url";
        String PHONE = "Phone";
        String CONTACT = "Contact";
        String NOTES = "Notes";
        String TRACKLENGTH = "Tracklength";
        String SOILTYPE = "Soiltype";
        String FACEBOOK = "facebook";
        String ADRESS = "adress";
        String LICENCE = "Licence";
        String FEES = "Fees";
        String FEESCAMPING = "feescamping";
        String DAYSOPEN = "daysopen";
        String NOISELIMIT = "noiselimit";
        String CAMPINGRVRVHOOKUP = "campingrvrvhookup";
        String SINGLETRACKS = "singletracks";
        String MXTRACK = "mxtrack";
        String A4X4 = "a4x4";
        String ENDRUO = "endruo";
        String UTV = "utv";
        String QUAD = "quad";
        String TRACKSTATUS = "trackstatus";
        String AREATYPE = "areatype";
        String SCHWIERIGKEIT = "schwierigkeit";
        String INDOOR = "indoor";
        String RATING = "rating";
        String PICTURECOUNT = "picturecount";
        String EVENTCOUNT = "eventcount";
    }

    interface TracksgesColumns {
        String TRACKNAME = "trackname";
        String APPROVED = "Approved";
        String DISTANCE2LOCATION = "distance2location";
        String OPENMONDAYS = "openmondays";
        String OPENTUESDAYS = "opentuesdays";
        String N_U_EVENTS = "n_u_events";
        String OPENWEDNESDAY = "openwednesday";
        String OPENTHURSDAY = "openthursday";
        String OPENFRIDAY = "openfriday";
        String OPENSATURDAY = "opensaturday";
        String OPENSUNDAY = "opensunday";
        String COUNTRY = "country";
        String TRACKACCESS = "trackaccess";
        String REST_ID = "restId";
        String BRANDS = "brands";
        String METATEXT = "metatext";
        String KIDSTRACK = "Kidstrack";
        String SUPERCROSS = "Supercross";
        String SHOWER = "Shower";
        String CLEANING = "Cleaning";
        String ELECTRICITY = "Electricity";
        String CAMPING = "Camping";
        String LATITUDE = "Latitude";
        String LONGITUDE = "Longitude";
        String HOURSMONDAY = "Hoursmonday";
        String HOURSTUESDAY = "Hourstuesday";
        String HOURSWEDNESDAY = "Hourswednesday";
        String HOURSTHURSDAY = "Hoursthursday";
        String HOURSFRIDAY = "Hoursfriday";
        String HOURSSATURDAY = "Hourssaturday";
        String HOURSSUNDAY = "Hourssunday";
        String VALIDUNTIL = "validuntil";
        String URL = "Url";
        String PHONE = "Phone";
        String CONTACT = "Contact";
        String NOTES = "Notes";
        String TRACKLENGTH = "Tracklength";
        String SOILTYPE = "Soiltype";
        String FACEBOOK = "facebook";
        String ADRESS = "adress";
        String LICENCE = "Licence";
        String FEES = "Fees";
        String FEESCAMPING = "feescamping";
        String DAYSOPEN = "daysopen";
        String NOISELIMIT = "noiselimit";
        String CAMPINGRVRVHOOKUP = "campingrvrvhookup";
        String SINGLETRACKS = "singletracks";
        String MXTRACK = "mxtrack";
        String A4X4 = "a4x4";
        String ENDRUO = "endruo";
        String UTV = "utv";
        String QUAD = "quad";
        String TRACKSTATUS = "trackstatus";
        String AREATYPE = "areatype";
        String SCHWIERIGKEIT = "schwierigkeit";
        String INDOOR = "indoor";
        String RATING = "rating";
    }

    interface UserActivityColumns {
        String ANDROIDID = "androidid";
        String APPROVED = "approved";
        String CNT = "cnt";
    }

    /**
     * <p>Column definitions and helper methods to work with the Country.</p>
     */
    public static class Country implements CountryColumns, BaseColumns {
        public static final Uri CONTENT_URI =
                BASE_CONTENT_URI.buildUpon().appendPath("country").build();

        /**
         * <p>The content type for a cursor that contains many Country rows.</p>
         */
        public static final String CONTENT_TYPE =
                "vnd.android.cursor.dir/vnd.mxinfodb.country";

        /**
         * <p>The content type for a cursor that contains a single Country row.</p>
         */
        public static final String ITEM_CONTENT_TYPE =
                "vnd.android.cursor.item/vnd.mxinfodb.country";

        /**
         * <p>Builds a Uri with appended id for a row in Country,
         * eg:- content://info.mx.tracks.sqlite.mxinfodb/country/123.</p>
         */
        public static Uri buildUriWithId(long id) {
            return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
        }

        public static int delete() {
            return Mechanoid.getContentResolver().delete(Country.CONTENT_URI, null, null);
        }

        public static int delete(String where, String[] selectionArgs) {
            return Mechanoid.getContentResolver().delete(Country.CONTENT_URI, where, selectionArgs);
        }

        /**
         * <p>Create a new Builder for Country</p>
         */
        public static Builder newBuilder() {
            return new Builder();
        }

        /**
         * <p>Build and execute insert or update statements for Country.</p>
         *
         * <p>Use {@link Country#newBuilder()} to create new builder</p>
         */
        public static class Builder extends AbstractValuesBuilder {
            private Builder() {
                super(Mechanoid.getApplicationContext(), Country.CONTENT_URI);
            }

            public Builder setCountry(String value) {
                mValues.put(Country.COUNTRY, value);
                return this;
            }

            public Builder setShow(long value) {
                mValues.put(Country.SHOW, value);
                return this;
            }
        }

        static final Set<Uri> VIEW_URIS;

        static {
            HashSet<Uri> viewUris = new HashSet<>();

            viewUris.add(Countrycount.CONTENT_URI);

            VIEW_URIS = Collections.unmodifiableSet(viewUris);
        }
    }

    /**
     * <p>Column definitions and helper methods to work with the Events.</p>
     */
    public static class Events implements EventsColumns, BaseColumns {
        public static final Uri CONTENT_URI =
                BASE_CONTENT_URI.buildUpon().appendPath("events").build();

        /**
         * <p>The content type for a cursor that contains many Events rows.</p>
         */
        public static final String CONTENT_TYPE =
                "vnd.android.cursor.dir/vnd.mxinfodb.events";

        /**
         * <p>The content type for a cursor that contains a single Events row.</p>
         */
        public static final String ITEM_CONTENT_TYPE =
                "vnd.android.cursor.item/vnd.mxinfodb.events";

        /**
         * <p>Builds a Uri with appended id for a row in Events,
         * eg:- content://info.mx.tracks.sqlite.mxinfodb/events/123.</p>
         */
        public static Uri buildUriWithId(long id) {
            return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
        }

        public static int delete() {
            return Mechanoid.getContentResolver().delete(Events.CONTENT_URI, null, null);
        }

        public static int delete(String where, String[] selectionArgs) {
            return Mechanoid.getContentResolver().delete(Events.CONTENT_URI, where, selectionArgs);
        }

        /**
         * <p>Create a new Builder for Events</p>
         */
        public static Builder newBuilder() {
            return new Builder();
        }

        /**
         * <p>Build and execute insert or update statements for Events.</p>
         *
         * <p>Use {@link Events#newBuilder()} to create new builder</p>
         */
        public static class Builder extends AbstractValuesBuilder {
            private Builder() {
                super(Mechanoid.getApplicationContext(), Events.CONTENT_URI);
            }

            public Builder setRestId(long value) {
                mValues.put(Events.REST_ID, value);
                return this;
            }

            public Builder setChanged(long value) {
                mValues.put(Events.CHANGED, value);
                return this;
            }

            public Builder setTrackRestId(long value) {
                mValues.put(Events.TRACK_REST_ID, value);
                return this;
            }

            public Builder setSeriesRestId(long value) {
                mValues.put(Events.SERIES_REST_ID, value);
                return this;
            }

            public Builder setComment(String value) {
                mValues.put(Events.COMMENT, value);
                return this;
            }

            public Builder setApproved(long value) {
                mValues.put(Events.APPROVED, value);
                return this;
            }

            public Builder setEventDate(long value) {
                mValues.put(Events.EVENT_DATE, value);
                return this;
            }
        }

        static final Set<Uri> VIEW_URIS;

        static {
            HashSet<Uri> viewUris = new HashSet<>();

            viewUris.add(Events2series.CONTENT_URI);
            viewUris.add(Eventsum.CONTENT_URI);
            viewUris.add(TracksGesSum.CONTENT_URI);

            VIEW_URIS = Collections.unmodifiableSet(viewUris);
        }
    }

    /**
     * <p>Column definitions and helper methods to work with the Favorits.</p>
     */
    public static class Favorits implements FavoritsColumns, BaseColumns {
        public static final Uri CONTENT_URI =
                BASE_CONTENT_URI.buildUpon().appendPath("favorits").build();

        /**
         * <p>The content type for a cursor that contains many Favorits rows.</p>
         */
        public static final String CONTENT_TYPE =
                "vnd.android.cursor.dir/vnd.mxinfodb.favorits";

        /**
         * <p>The content type for a cursor that contains a single Favorits row.</p>
         */
        public static final String ITEM_CONTENT_TYPE =
                "vnd.android.cursor.item/vnd.mxinfodb.favorits";

        /**
         * <p>Builds a Uri with appended id for a row in Favorits,
         * eg:- content://info.mx.tracks.sqlite.mxinfodb/favorits/123.</p>
         */
        public static Uri buildUriWithId(long id) {
            return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
        }

        public static int delete() {
            return Mechanoid.getContentResolver().delete(Favorits.CONTENT_URI, null, null);
        }

        public static int delete(String where, String[] selectionArgs) {
            return Mechanoid.getContentResolver().delete(Favorits.CONTENT_URI, where, selectionArgs);
        }

        /**
         * <p>Create a new Builder for Favorits</p>
         */
        public static Builder newBuilder() {
            return new Builder();
        }

        /**
         * <p>Build and execute insert or update statements for Favorits.</p>
         *
         * <p>Use {@link Favorits#newBuilder()} to create new builder</p>
         */
        public static class Builder extends AbstractValuesBuilder {
            private Builder() {
                super(Mechanoid.getApplicationContext(), Favorits.CONTENT_URI);
            }

            public Builder setTrackRestId(long value) {
                mValues.put(Favorits.TRACK_REST_ID, value);
                return this;
            }
        }

        static final Set<Uri> VIEW_URIS;

        static {
            HashSet<Uri> viewUris = new HashSet<>();


            VIEW_URIS = Collections.unmodifiableSet(viewUris);
        }
    }

    /**
     * <p>Column definitions and helper methods to work with the Importstatus.</p>
     */
    public static class Importstatus implements ImportstatusColumns, BaseColumns {
        public static final Uri CONTENT_URI =
                BASE_CONTENT_URI.buildUpon().appendPath("importstatus").build();

        /**
         * <p>The content type for a cursor that contains many Importstatus rows.</p>
         */
        public static final String CONTENT_TYPE =
                "vnd.android.cursor.dir/vnd.mxinfodb.importstatus";

        /**
         * <p>The content type for a cursor that contains a single Importstatus row.</p>
         */
        public static final String ITEM_CONTENT_TYPE =
                "vnd.android.cursor.item/vnd.mxinfodb.importstatus";

        /**
         * <p>Builds a Uri with appended id for a row in Importstatus,
         * eg:- content://info.mx.tracks.sqlite.mxinfodb/importstatus/123.</p>
         */
        public static Uri buildUriWithId(long id) {
            return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
        }

        public static int delete() {
            return Mechanoid.getContentResolver().delete(Importstatus.CONTENT_URI, null, null);
        }

        public static int delete(String where, String[] selectionArgs) {
            return Mechanoid.getContentResolver().delete(Importstatus.CONTENT_URI, where, selectionArgs);
        }

        /**
         * <p>Create a new Builder for Importstatus</p>
         */
        public static Builder newBuilder() {
            return new Builder();
        }

        /**
         * <p>Build and execute insert or update statements for Importstatus.</p>
         *
         * <p>Use {@link Importstatus#newBuilder()} to create new builder</p>
         */
        public static class Builder extends AbstractValuesBuilder {
            private Builder() {
                super(Mechanoid.getApplicationContext(), Importstatus.CONTENT_URI);
            }

            public Builder setMsg(String value) {
                mValues.put(Importstatus.MSG, value);
                return this;
            }

            public Builder setCreated(long value) {
                mValues.put(Importstatus.CREATED, value);
                return this;
            }
        }

        static final Set<Uri> VIEW_URIS;

        static {
            HashSet<Uri> viewUris = new HashSet<>();


            VIEW_URIS = Collections.unmodifiableSet(viewUris);
        }
    }

    /**
     * <p>Column definitions and helper methods to work with the Message.</p>
     */
    public static class Message implements MessageColumns, BaseColumns {
        public static final Uri CONTENT_URI =
                BASE_CONTENT_URI.buildUpon().appendPath("message").build();

        /**
         * <p>The content type for a cursor that contains many Message rows.</p>
         */
        public static final String CONTENT_TYPE =
                "vnd.android.cursor.dir/vnd.mxinfodb.message";

        /**
         * <p>The content type for a cursor that contains a single Message row.</p>
         */
        public static final String ITEM_CONTENT_TYPE =
                "vnd.android.cursor.item/vnd.mxinfodb.message";

        /**
         * <p>Builds a Uri with appended id for a row in Message,
         * eg:- content://info.mx.tracks.sqlite.mxinfodb/message/123.</p>
         */
        public static Uri buildUriWithId(long id) {
            return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
        }

        public static int delete() {
            return Mechanoid.getContentResolver().delete(Message.CONTENT_URI, null, null);
        }

        public static int delete(String where, String[] selectionArgs) {
            return Mechanoid.getContentResolver().delete(Message.CONTENT_URI, where, selectionArgs);
        }

        /**
         * <p>Create a new Builder for Message</p>
         */
        public static Builder newBuilder() {
            return new Builder();
        }

        /**
         * <p>Build and execute insert or update statements for Message.</p>
         *
         * <p>Use {@link Message#newBuilder()} to create new builder</p>
         */
        public static class Builder extends AbstractValuesBuilder {
            private Builder() {
                super(Mechanoid.getApplicationContext(), Message.CONTENT_URI);
            }

            public Builder setRestId(long value) {
                mValues.put(Message.REST_ID, value);
                return this;
            }

            public Builder setChanged(long value) {
                mValues.put(Message.CHANGED, value);
                return this;
            }

            public Builder setAndroidid(String value) {
                mValues.put(Message.ANDROIDID, value);
                return this;
            }

            public Builder setRead(long value) {
                mValues.put(Message.READ, value);
                return this;
            }

            public Builder setMsg(String value) {
                mValues.put(Message.MSG, value);
                return this;
            }
        }

        static final Set<Uri> VIEW_URIS;

        static {
            HashSet<Uri> viewUris = new HashSet<>();


            VIEW_URIS = Collections.unmodifiableSet(viewUris);
        }
    }

    /**
     * <p>Column definitions and helper methods to work with the Network.</p>
     */
    public static class Network implements NetworkColumns, BaseColumns {
        public static final Uri CONTENT_URI =
                BASE_CONTENT_URI.buildUpon().appendPath("network").build();

        /**
         * <p>The content type for a cursor that contains many Network rows.</p>
         */
        public static final String CONTENT_TYPE =
                "vnd.android.cursor.dir/vnd.mxinfodb.network";

        /**
         * <p>The content type for a cursor that contains a single Network row.</p>
         */
        public static final String ITEM_CONTENT_TYPE =
                "vnd.android.cursor.item/vnd.mxinfodb.network";

        /**
         * <p>Builds a Uri with appended id for a row in Network,
         * eg:- content://info.mx.tracks.sqlite.mxinfodb/network/123.</p>
         */
        public static Uri buildUriWithId(long id) {
            return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
        }

        public static int delete() {
            return Mechanoid.getContentResolver().delete(Network.CONTENT_URI, null, null);
        }

        public static int delete(String where, String[] selectionArgs) {
            return Mechanoid.getContentResolver().delete(Network.CONTENT_URI, where, selectionArgs);
        }

        /**
         * <p>Create a new Builder for Network</p>
         */
        public static Builder newBuilder() {
            return new Builder();
        }

        /**
         * <p>Build and execute insert or update statements for Network.</p>
         *
         * <p>Use {@link Network#newBuilder()} to create new builder</p>
         */
        public static class Builder extends AbstractValuesBuilder {
            private Builder() {
                super(Mechanoid.getApplicationContext(), Network.CONTENT_URI);
            }

            public Builder setReason(String value) {
                mValues.put(Network.REASON, value);
                return this;
            }

            public Builder setTracks(long value) {
                mValues.put(Network.TRACKS, value);
                return this;
            }

            public Builder setCreated(long value) {
                mValues.put(Network.CREATED, value);
                return this;
            }
        }

        static final Set<Uri> VIEW_URIS;

        static {
            HashSet<Uri> viewUris = new HashSet<>();


            VIEW_URIS = Collections.unmodifiableSet(viewUris);
        }
    }

    /**
     * <p>Column definitions and helper methods to work with the Pictures.</p>
     */
    public static class Pictures implements PicturesColumns, BaseColumns {
        public static final Uri CONTENT_URI =
                BASE_CONTENT_URI.buildUpon().appendPath("pictures").build();

        /**
         * <p>The content type for a cursor that contains many Pictures rows.</p>
         */
        public static final String CONTENT_TYPE =
                "vnd.android.cursor.dir/vnd.mxinfodb.pictures";

        /**
         * <p>The content type for a cursor that contains a single Pictures row.</p>
         */
        public static final String ITEM_CONTENT_TYPE =
                "vnd.android.cursor.item/vnd.mxinfodb.pictures";

        /**
         * <p>Builds a Uri with appended id for a row in Pictures,
         * eg:- content://info.mx.tracks.sqlite.mxinfodb/pictures/123.</p>
         */
        public static Uri buildUriWithId(long id) {
            return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
        }

        public static int delete() {
            return Mechanoid.getContentResolver().delete(Pictures.CONTENT_URI, null, null);
        }

        public static int delete(String where, String[] selectionArgs) {
            return Mechanoid.getContentResolver().delete(Pictures.CONTENT_URI, where, selectionArgs);
        }

        /**
         * <p>Create a new Builder for Pictures</p>
         */
        public static Builder newBuilder() {
            return new Builder();
        }

        /**
         * <p>Build and execute insert or update statements for Pictures.</p>
         *
         * <p>Use {@link Pictures#newBuilder()} to create new builder</p>
         */
        public static class Builder extends AbstractValuesBuilder {
            private Builder() {
                super(Mechanoid.getApplicationContext(), Pictures.CONTENT_URI);
            }

            public Builder setRestId(long value) {
                mValues.put(Pictures.REST_ID, value);
                return this;
            }

            public Builder setChanged(long value) {
                mValues.put(Pictures.CHANGED, value);
                return this;
            }

            public Builder setUsername(String value) {
                mValues.put(Pictures.USERNAME, value);
                return this;
            }

            public Builder setComment(String value) {
                mValues.put(Pictures.COMMENT, value);
                return this;
            }

            public Builder setTrackRestId(long value) {
                mValues.put(Pictures.TRACK_REST_ID, value);
                return this;
            }

            public Builder setApproved(long value) {
                mValues.put(Pictures.APPROVED, value);
                return this;
            }

            public Builder setDeleted(long value) {
                mValues.put(Pictures.DELETED, value);
                return this;
            }

            public Builder setLocalfile(String value) {
                mValues.put(Pictures.LOCALFILE, value);
                return this;
            }

            public Builder setLocalthumb(String value) {
                mValues.put(Pictures.LOCALTHUMB, value);
                return this;
            }
        }

        static final Set<Uri> VIEW_URIS;

        static {
            HashSet<Uri> viewUris = new HashSet<>();

            viewUris.add(Picturesum.CONTENT_URI);
            viewUris.add(TracksGesSum.CONTENT_URI);

            VIEW_URIS = Collections.unmodifiableSet(viewUris);
        }
    }

    /**
     * <p>Column definitions and helper methods to work with the Ratings.</p>
     */
    public static class Ratings implements RatingsColumns, BaseColumns {
        public static final Uri CONTENT_URI =
                BASE_CONTENT_URI.buildUpon().appendPath("ratings").build();

        /**
         * <p>The content type for a cursor that contains many Ratings rows.</p>
         */
        public static final String CONTENT_TYPE =
                "vnd.android.cursor.dir/vnd.mxinfodb.ratings";

        /**
         * <p>The content type for a cursor that contains a single Ratings row.</p>
         */
        public static final String ITEM_CONTENT_TYPE =
                "vnd.android.cursor.item/vnd.mxinfodb.ratings";

        /**
         * <p>Builds a Uri with appended id for a row in Ratings,
         * eg:- content://info.mx.tracks.sqlite.mxinfodb/ratings/123.</p>
         */
        public static Uri buildUriWithId(long id) {
            return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
        }

        public static int delete() {
            return Mechanoid.getContentResolver().delete(Ratings.CONTENT_URI, null, null);
        }

        public static int delete(String where, String[] selectionArgs) {
            return Mechanoid.getContentResolver().delete(Ratings.CONTENT_URI, where, selectionArgs);
        }

        /**
         * <p>Create a new Builder for Ratings</p>
         */
        public static Builder newBuilder() {
            return new Builder();
        }

        /**
         * <p>Build and execute insert or update statements for Ratings.</p>
         *
         * <p>Use {@link Ratings#newBuilder()} to create new builder</p>
         */
        public static class Builder extends AbstractValuesBuilder {
            private Builder() {
                super(Mechanoid.getApplicationContext(), Ratings.CONTENT_URI);
            }

            public Builder setRestId(long value) {
                mValues.put(Ratings.REST_ID, value);
                return this;
            }

            public Builder setChanged(long value) {
                mValues.put(Ratings.CHANGED, value);
                return this;
            }

            public Builder setTrackRestId(long value) {
                mValues.put(Ratings.TRACK_REST_ID, value);
                return this;
            }

            public Builder setRating(long value) {
                mValues.put(Ratings.RATING, value);
                return this;
            }

            public Builder setUsername(String value) {
                mValues.put(Ratings.USERNAME, value);
                return this;
            }

            public Builder setNote(String value) {
                mValues.put(Ratings.NOTE, value);
                return this;
            }

            public Builder setCountry(String value) {
                mValues.put(Ratings.COUNTRY, value);
                return this;
            }

            public Builder setDeleted(long value) {
                mValues.put(Ratings.DELETED, value);
                return this;
            }

            public Builder setApproved(long value) {
                mValues.put(Ratings.APPROVED, value);
                return this;
            }

            public Builder setAndroidid(String value) {
                mValues.put(Ratings.ANDROIDID, value);
                return this;
            }
        }

        static final Set<Uri> VIEW_URIS;

        static {
            HashSet<Uri> viewUris = new HashSet<>();

            viewUris.add(Ratingsum.CONTENT_URI);
            viewUris.add(TracksGesSum.CONTENT_URI);
            viewUris.add(Tracksges.CONTENT_URI);

            VIEW_URIS = Collections.unmodifiableSet(viewUris);
        }
    }

    /**
     * <p>Column definitions and helper methods to work with the Route.</p>
     */
    public static class Route implements RouteColumns, BaseColumns {
        public static final Uri CONTENT_URI =
                BASE_CONTENT_URI.buildUpon().appendPath("route").build();

        /**
         * <p>The content type for a cursor that contains many Route rows.</p>
         */
        public static final String CONTENT_TYPE =
                "vnd.android.cursor.dir/vnd.mxinfodb.route";

        /**
         * <p>The content type for a cursor that contains a single Route row.</p>
         */
        public static final String ITEM_CONTENT_TYPE =
                "vnd.android.cursor.item/vnd.mxinfodb.route";

        /**
         * <p>Builds a Uri with appended id for a row in Route,
         * eg:- content://info.mx.tracks.sqlite.mxinfodb/route/123.</p>
         */
        public static Uri buildUriWithId(long id) {
            return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
        }

        public static int delete() {
            return Mechanoid.getContentResolver().delete(Route.CONTENT_URI, null, null);
        }

        public static int delete(String where, String[] selectionArgs) {
            return Mechanoid.getContentResolver().delete(Route.CONTENT_URI, where, selectionArgs);
        }

        /**
         * <p>Create a new Builder for Route</p>
         */
        public static Builder newBuilder() {
            return new Builder();
        }

        /**
         * <p>Build and execute insert or update statements for Route.</p>
         *
         * <p>Use {@link Route#newBuilder()} to create new builder</p>
         */
        public static class Builder extends AbstractValuesBuilder {
            private Builder() {
                super(Mechanoid.getApplicationContext(), Route.CONTENT_URI);
            }

            public Builder setTrackClientId(long value) {
                mValues.put(Route.TRACK_CLIENT_ID, value);
                return this;
            }

            public Builder setLongitude(double value) {
                mValues.put(Route.LONGITUDE, value);
                return this;
            }

            public Builder setLatitude(double value) {
                mValues.put(Route.LATITUDE, value);
                return this;
            }

            public Builder setContent(String value) {
                mValues.put(Route.CONTENT, value);
                return this;
            }

            public Builder setCreated(long value) {
                mValues.put(Route.CREATED, value);
                return this;
            }
        }

        static final Set<Uri> VIEW_URIS;

        static {
            HashSet<Uri> viewUris = new HashSet<>();


            VIEW_URIS = Collections.unmodifiableSet(viewUris);
        }
    }

    /**
     * <p>Column definitions and helper methods to work with the Series.</p>
     */
    public static class Series implements SeriesColumns, BaseColumns {
        public static final Uri CONTENT_URI =
                BASE_CONTENT_URI.buildUpon().appendPath("series").build();

        /**
         * <p>The content type for a cursor that contains many Series rows.</p>
         */
        public static final String CONTENT_TYPE =
                "vnd.android.cursor.dir/vnd.mxinfodb.series";

        /**
         * <p>The content type for a cursor that contains a single Series row.</p>
         */
        public static final String ITEM_CONTENT_TYPE =
                "vnd.android.cursor.item/vnd.mxinfodb.series";

        /**
         * <p>Builds a Uri with appended id for a row in Series,
         * eg:- content://info.mx.tracks.sqlite.mxinfodb/series/123.</p>
         */
        public static Uri buildUriWithId(long id) {
            return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
        }

        public static int delete() {
            return Mechanoid.getContentResolver().delete(Series.CONTENT_URI, null, null);
        }

        public static int delete(String where, String[] selectionArgs) {
            return Mechanoid.getContentResolver().delete(Series.CONTENT_URI, where, selectionArgs);
        }

        /**
         * <p>Create a new Builder for Series</p>
         */
        public static Builder newBuilder() {
            return new Builder();
        }

        /**
         * <p>Build and execute insert or update statements for Series.</p>
         *
         * <p>Use {@link Series#newBuilder()} to create new builder</p>
         */
        public static class Builder extends AbstractValuesBuilder {
            private Builder() {
                super(Mechanoid.getApplicationContext(), Series.CONTENT_URI);
            }

            public Builder setRestId(long value) {
                mValues.put(Series.REST_ID, value);
                return this;
            }

            public Builder setChanged(long value) {
                mValues.put(Series.CHANGED, value);
                return this;
            }

            public Builder setName(String value) {
                mValues.put(Series.NAME, value);
                return this;
            }

            public Builder setSeriesUrl(String value) {
                mValues.put(Series.SERIES_URL, value);
                return this;
            }
        }

        static final Set<Uri> VIEW_URIS;

        static {
            HashSet<Uri> viewUris = new HashSet<>();

            viewUris.add(Events2series.CONTENT_URI);

            VIEW_URIS = Collections.unmodifiableSet(viewUris);
        }
    }

    /**
     * <p>Column definitions and helper methods to work with the Tracks.</p>
     */
    public static class Tracks implements TracksColumns, BaseColumns {
        public static final Uri CONTENT_URI =
                BASE_CONTENT_URI.buildUpon().appendPath("tracks").build();

        /**
         * <p>The content type for a cursor that contains many Tracks rows.</p>
         */
        public static final String CONTENT_TYPE =
                "vnd.android.cursor.dir/vnd.mxinfodb.tracks";

        /**
         * <p>The content type for a cursor that contains a single Tracks row.</p>
         */
        public static final String ITEM_CONTENT_TYPE =
                "vnd.android.cursor.item/vnd.mxinfodb.tracks";

        /**
         * <p>Builds a Uri with appended id for a row in Tracks,
         * eg:- content://info.mx.tracks.sqlite.mxinfodb/tracks/123.</p>
         */
        public static Uri buildUriWithId(long id) {
            return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
        }

        public static int delete() {
            return Mechanoid.getContentResolver().delete(Tracks.CONTENT_URI, null, null);
        }

        public static int delete(String where, String[] selectionArgs) {
            return Mechanoid.getContentResolver().delete(Tracks.CONTENT_URI, where, selectionArgs);
        }

        /**
         * <p>Create a new Builder for Tracks</p>
         */
        public static Builder newBuilder() {
            return new Builder();
        }

        /**
         * <p>Build and execute insert or update statements for Tracks.</p>
         *
         * <p>Use {@link Tracks#newBuilder()} to create new builder</p>
         */
        public static class Builder extends AbstractValuesBuilder {
            private Builder() {
                super(Mechanoid.getApplicationContext(), Tracks.CONTENT_URI);
            }

            public Builder setRestId(long value) {
                mValues.put(Tracks.REST_ID, value);
                return this;
            }

            public Builder setChanged(long value) {
                mValues.put(Tracks.CHANGED, value);
                return this;
            }

            public Builder setTrackname(String value) {
                mValues.put(Tracks.TRACKNAME, value);
                return this;
            }

            public Builder setLongitude(double value) {
                mValues.put(Tracks.LONGITUDE, value);
                return this;
            }

            public Builder setLatitude(double value) {
                mValues.put(Tracks.LATITUDE, value);
                return this;
            }

            public Builder setApproved(long value) {
                mValues.put(Tracks.APPROVED, value);
                return this;
            }

            public Builder setCountry(String value) {
                mValues.put(Tracks.COUNTRY, value);
                return this;
            }

            public Builder setUrl(String value) {
                mValues.put(Tracks.URL, value);
                return this;
            }

            public Builder setFees(String value) {
                mValues.put(Tracks.FEES, value);
                return this;
            }

            public Builder setPhone(String value) {
                mValues.put(Tracks.PHONE, value);
                return this;
            }

            public Builder setNotes(String value) {
                mValues.put(Tracks.NOTES, value);
                return this;
            }

            public Builder setContact(String value) {
                mValues.put(Tracks.CONTACT, value);
                return this;
            }

            public Builder setNotesEn(String value) {
                mValues.put(Tracks.NOTES_EN, value);
                return this;
            }

            public Builder setMetatext(String value) {
                mValues.put(Tracks.METATEXT, value);
                return this;
            }

            public Builder setLicence(String value) {
                mValues.put(Tracks.LICENCE, value);
                return this;
            }

            public Builder setKidstrack(long value) {
                mValues.put(Tracks.KIDSTRACK, value);
                return this;
            }

            public Builder setOpenmondays(long value) {
                mValues.put(Tracks.OPENMONDAYS, value);
                return this;
            }

            public Builder setOpentuesdays(long value) {
                mValues.put(Tracks.OPENTUESDAYS, value);
                return this;
            }

            public Builder setOpenwednesday(long value) {
                mValues.put(Tracks.OPENWEDNESDAY, value);
                return this;
            }

            public Builder setOpenthursday(long value) {
                mValues.put(Tracks.OPENTHURSDAY, value);
                return this;
            }

            public Builder setOpenfriday(long value) {
                mValues.put(Tracks.OPENFRIDAY, value);
                return this;
            }

            public Builder setOpensaturday(long value) {
                mValues.put(Tracks.OPENSATURDAY, value);
                return this;
            }

            public Builder setOpensunday(long value) {
                mValues.put(Tracks.OPENSUNDAY, value);
                return this;
            }

            public Builder setHoursmonday(String value) {
                mValues.put(Tracks.HOURSMONDAY, value);
                return this;
            }

            public Builder setHourstuesday(String value) {
                mValues.put(Tracks.HOURSTUESDAY, value);
                return this;
            }

            public Builder setHourswednesday(String value) {
                mValues.put(Tracks.HOURSWEDNESDAY, value);
                return this;
            }

            public Builder setHoursthursday(String value) {
                mValues.put(Tracks.HOURSTHURSDAY, value);
                return this;
            }

            public Builder setHoursfriday(String value) {
                mValues.put(Tracks.HOURSFRIDAY, value);
                return this;
            }

            public Builder setHourssaturday(String value) {
                mValues.put(Tracks.HOURSSATURDAY, value);
                return this;
            }

            public Builder setHourssunday(String value) {
                mValues.put(Tracks.HOURSSUNDAY, value);
                return this;
            }

            public Builder setTracklength(long value) {
                mValues.put(Tracks.TRACKLENGTH, value);
                return this;
            }

            public Builder setSoiltype(long value) {
                mValues.put(Tracks.SOILTYPE, value);
                return this;
            }

            public Builder setCamping(long value) {
                mValues.put(Tracks.CAMPING, value);
                return this;
            }

            public Builder setShower(long value) {
                mValues.put(Tracks.SHOWER, value);
                return this;
            }

            public Builder setCleaning(long value) {
                mValues.put(Tracks.CLEANING, value);
                return this;
            }

            public Builder setElectricity(long value) {
                mValues.put(Tracks.ELECTRICITY, value);
                return this;
            }

            public Builder setDistance2location(long value) {
                mValues.put(Tracks.DISTANCE2LOCATION, value);
                return this;
            }

            public Builder setSupercross(long value) {
                mValues.put(Tracks.SUPERCROSS, value);
                return this;
            }

            public Builder setTrackaccess(String value) {
                mValues.put(Tracks.TRACKACCESS, value);
                return this;
            }

            public Builder setLogoURL(String value) {
                mValues.put(Tracks.LOGO_U_R_L, value);
                return this;
            }

            public Builder setShowroom(long value) {
                mValues.put(Tracks.SHOWROOM, value);
                return this;
            }

            public Builder setWorkshop(long value) {
                mValues.put(Tracks.WORKSHOP, value);
                return this;
            }

            public Builder setValiduntil(long value) {
                mValues.put(Tracks.VALIDUNTIL, value);
                return this;
            }

            public Builder setBrands(String value) {
                mValues.put(Tracks.BRANDS, value);
                return this;
            }

            public Builder setNuEvents(String value) {
                mValues.put(Tracks.NU_EVENTS, value);
                return this;
            }

            public Builder setFacebook(String value) {
                mValues.put(Tracks.FACEBOOK, value);
                return this;
            }

            public Builder setAdress(String value) {
                mValues.put(Tracks.ADRESS, value);
                return this;
            }

            public Builder setFeescamping(String value) {
                mValues.put(Tracks.FEESCAMPING, value);
                return this;
            }

            public Builder setDaysopen(String value) {
                mValues.put(Tracks.DAYSOPEN, value);
                return this;
            }

            public Builder setNoiselimit(String value) {
                mValues.put(Tracks.NOISELIMIT, value);
                return this;
            }

            public Builder setCampingrvrvhookup(long value) {
                mValues.put(Tracks.CAMPINGRVRVHOOKUP, value);
                return this;
            }

            public Builder setSingletracks(long value) {
                mValues.put(Tracks.SINGLETRACKS, value);
                return this;
            }

            public Builder setMxtrack(long value) {
                mValues.put(Tracks.MXTRACK, value);
                return this;
            }

            public Builder setA4x4(long value) {
                mValues.put(Tracks.A4X4, value);
                return this;
            }

            public Builder setUtv(long value) {
                mValues.put(Tracks.UTV, value);
                return this;
            }

            public Builder setQuad(long value) {
                mValues.put(Tracks.QUAD, value);
                return this;
            }

            public Builder setTrackstatus(String value) {
                mValues.put(Tracks.TRACKSTATUS, value);
                return this;
            }

            public Builder setAreatype(String value) {
                mValues.put(Tracks.AREATYPE, value);
                return this;
            }

            public Builder setSchwierigkeit(long value) {
                mValues.put(Tracks.SCHWIERIGKEIT, value);
                return this;
            }

            public Builder setLastAsked(long value) {
                mValues.put(Tracks.LAST_ASKED, value);
                return this;
            }

            public Builder setIndoor(long value) {
                mValues.put(Tracks.INDOOR, value);
                return this;
            }

            public Builder setEnduro(long value) {
                mValues.put(Tracks.ENDURO, value);
                return this;
            }
        }

        static final Set<Uri> VIEW_URIS;

        static {
            HashSet<Uri> viewUris = new HashSet<>();

            viewUris.add(Countrycount.CONTENT_URI);
            viewUris.add(Countrysum.CONTENT_URI);
            viewUris.add(TracksGesSum.CONTENT_URI);
            viewUris.add(Tracksges.CONTENT_URI);

            VIEW_URIS = Collections.unmodifiableSet(viewUris);
        }
    }

    /**
     * <p>Column definitions and helper methods to work with the Trackstage.</p>
     */
    public static class Trackstage implements TrackstageColumns, BaseColumns {
        public static final Uri CONTENT_URI =
                BASE_CONTENT_URI.buildUpon().appendPath("trackstage").build();

        /**
         * <p>The content type for a cursor that contains many Trackstage rows.</p>
         */
        public static final String CONTENT_TYPE =
                "vnd.android.cursor.dir/vnd.mxinfodb.trackstage";

        /**
         * <p>The content type for a cursor that contains a single Trackstage row.</p>
         */
        public static final String ITEM_CONTENT_TYPE =
                "vnd.android.cursor.item/vnd.mxinfodb.trackstage";

        /**
         * <p>Builds a Uri with appended id for a row in Trackstage,
         * eg:- content://info.mx.tracks.sqlite.mxinfodb/trackstage/123.</p>
         */
        public static Uri buildUriWithId(long id) {
            return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
        }

        public static int delete() {
            return Mechanoid.getContentResolver().delete(Trackstage.CONTENT_URI, null, null);
        }

        public static int delete(String where, String[] selectionArgs) {
            return Mechanoid.getContentResolver().delete(Trackstage.CONTENT_URI, where, selectionArgs);
        }

        /**
         * <p>Create a new Builder for Trackstage</p>
         */
        public static Builder newBuilder() {
            return new Builder();
        }

        /**
         * <p>Build and execute insert or update statements for Trackstage.</p>
         *
         * <p>Use {@link Trackstage#newBuilder()} to create new builder</p>
         */
        public static class Builder extends AbstractValuesBuilder {
            private Builder() {
                super(Mechanoid.getApplicationContext(), Trackstage.CONTENT_URI);
            }

            public Builder setRestId(long value) {
                mValues.put(Trackstage.REST_ID, value);
                return this;
            }

            public Builder setCreated(long value) {
                mValues.put(Trackstage.CREATED, value);
                return this;
            }

            public Builder setCountry(String value) {
                mValues.put(Trackstage.COUNTRY, value);
                return this;
            }

            public Builder setTrackname(String value) {
                mValues.put(Trackstage.TRACKNAME, value);
                return this;
            }

            public Builder setLongitude(double value) {
                mValues.put(Trackstage.LONGITUDE, value);
                return this;
            }

            public Builder setLatitude(double value) {
                mValues.put(Trackstage.LATITUDE, value);
                return this;
            }

            public Builder setInsLongitude(double value) {
                mValues.put(Trackstage.INS_LONGITUDE, value);
                return this;
            }

            public Builder setInsLatitude(double value) {
                mValues.put(Trackstage.INS_LATITUDE, value);
                return this;
            }

            public Builder setInsDistance(long value) {
                mValues.put(Trackstage.INS_DISTANCE, value);
                return this;
            }

            public Builder setUrl(String value) {
                mValues.put(Trackstage.URL, value);
                return this;
            }

            public Builder setPhone(String value) {
                mValues.put(Trackstage.PHONE, value);
                return this;
            }

            public Builder setNotes(String value) {
                mValues.put(Trackstage.NOTES, value);
                return this;
            }

            public Builder setContact(String value) {
                mValues.put(Trackstage.CONTACT, value);
                return this;
            }

            public Builder setLicence(String value) {
                mValues.put(Trackstage.LICENCE, value);
                return this;
            }

            public Builder setKidstrack(long value) {
                mValues.put(Trackstage.KIDSTRACK, value);
                return this;
            }

            public Builder setMembersonly(long value) {
                mValues.put(Trackstage.MEMBERSONLY, value);
                return this;
            }

            public Builder setOpenmondays(long value) {
                mValues.put(Trackstage.OPENMONDAYS, value);
                return this;
            }

            public Builder setOpentuesdays(long value) {
                mValues.put(Trackstage.OPENTUESDAYS, value);
                return this;
            }

            public Builder setOpenwednesday(long value) {
                mValues.put(Trackstage.OPENWEDNESDAY, value);
                return this;
            }

            public Builder setOpenthursday(long value) {
                mValues.put(Trackstage.OPENTHURSDAY, value);
                return this;
            }

            public Builder setOpenfriday(long value) {
                mValues.put(Trackstage.OPENFRIDAY, value);
                return this;
            }

            public Builder setOpensaturday(long value) {
                mValues.put(Trackstage.OPENSATURDAY, value);
                return this;
            }

            public Builder setOpensunday(long value) {
                mValues.put(Trackstage.OPENSUNDAY, value);
                return this;
            }

            public Builder setHoursmonday(String value) {
                mValues.put(Trackstage.HOURSMONDAY, value);
                return this;
            }

            public Builder setHourstuesday(String value) {
                mValues.put(Trackstage.HOURSTUESDAY, value);
                return this;
            }

            public Builder setHourswednesday(String value) {
                mValues.put(Trackstage.HOURSWEDNESDAY, value);
                return this;
            }

            public Builder setHoursthursday(String value) {
                mValues.put(Trackstage.HOURSTHURSDAY, value);
                return this;
            }

            public Builder setHoursfriday(String value) {
                mValues.put(Trackstage.HOURSFRIDAY, value);
                return this;
            }

            public Builder setHourssaturday(String value) {
                mValues.put(Trackstage.HOURSSATURDAY, value);
                return this;
            }

            public Builder setHourssunday(String value) {
                mValues.put(Trackstage.HOURSSUNDAY, value);
                return this;
            }

            public Builder setRaceonly(long value) {
                mValues.put(Trackstage.RACEONLY, value);
                return this;
            }

            public Builder setTracklength(long value) {
                mValues.put(Trackstage.TRACKLENGTH, value);
                return this;
            }

            public Builder setSoiltype(long value) {
                mValues.put(Trackstage.SOILTYPE, value);
                return this;
            }

            public Builder setCamping(long value) {
                mValues.put(Trackstage.CAMPING, value);
                return this;
            }

            public Builder setShower(long value) {
                mValues.put(Trackstage.SHOWER, value);
                return this;
            }

            public Builder setCleaning(long value) {
                mValues.put(Trackstage.CLEANING, value);
                return this;
            }

            public Builder setElectricity(long value) {
                mValues.put(Trackstage.ELECTRICITY, value);
                return this;
            }

            public Builder setSupercross(long value) {
                mValues.put(Trackstage.SUPERCROSS, value);
                return this;
            }

            public Builder setTrackaccess(String value) {
                mValues.put(Trackstage.TRACKACCESS, value);
                return this;
            }

            public Builder setFacebook(String value) {
                mValues.put(Trackstage.FACEBOOK, value);
                return this;
            }

            public Builder setFees(String value) {
                mValues.put(Trackstage.FEES, value);
                return this;
            }

            public Builder setAdress(String value) {
                mValues.put(Trackstage.ADRESS, value);
                return this;
            }

            public Builder setFeescamping(String value) {
                mValues.put(Trackstage.FEESCAMPING, value);
                return this;
            }

            public Builder setDaysopen(String value) {
                mValues.put(Trackstage.DAYSOPEN, value);
                return this;
            }

            public Builder setNoiselimit(String value) {
                mValues.put(Trackstage.NOISELIMIT, value);
                return this;
            }

            public Builder setCampingRVhookups(long value) {
                mValues.put(Trackstage.CAMPING_R_VHOOKUPS, value);
                return this;
            }

            public Builder setSingleTrack(long value) {
                mValues.put(Trackstage.SINGLE_TRACK, value);
                return this;
            }

            public Builder setMXTrack(long value) {
                mValues.put(Trackstage.M_X_TRACK, value);
                return this;
            }

            public Builder setA4X4(long value) {
                mValues.put(Trackstage.A4_X4, value);
                return this;
            }

            public Builder setUTV(long value) {
                mValues.put(Trackstage.UTV, value);
                return this;
            }

            public Builder setQuad(long value) {
                mValues.put(Trackstage.QUAD, value);
                return this;
            }

            public Builder setRating(long value) {
                mValues.put(Trackstage.RATING, value);
                return this;
            }

            public Builder setTrackstatus(String value) {
                mValues.put(Trackstage.TRACKSTATUS, value);
                return this;
            }

            public Builder setAreatype(String value) {
                mValues.put(Trackstage.AREATYPE, value);
                return this;
            }

            public Builder setSchwierigkeit(long value) {
                mValues.put(Trackstage.SCHWIERIGKEIT, value);
                return this;
            }

            public Builder setAndroidid(String value) {
                mValues.put(Trackstage.ANDROIDID, value);
                return this;
            }

            public Builder setApproved(long value) {
                mValues.put(Trackstage.APPROVED, value);
                return this;
            }

            public Builder setTrackRestId(long value) {
                mValues.put(Trackstage.TRACK_REST_ID, value);
                return this;
            }

            public Builder setUpdated(long value) {
                mValues.put(Trackstage.UPDATED, value);
                return this;
            }

            public Builder setIndoor(long value) {
                mValues.put(Trackstage.INDOOR, value);
                return this;
            }

            public Builder setEnduro(long value) {
                mValues.put(Trackstage.ENDURO, value);
                return this;
            }
        }

        static final Set<Uri> VIEW_URIS;

        static {
            HashSet<Uri> viewUris = new HashSet<>();

            viewUris.add(UserActivity.CONTENT_URI);

            VIEW_URIS = Collections.unmodifiableSet(viewUris);
        }
    }

    /**
     * <p>Column definitions and helper methods to work with the Weather.</p>
     */
    public static class Weather implements WeatherColumns, BaseColumns {
        public static final Uri CONTENT_URI =
                BASE_CONTENT_URI.buildUpon().appendPath("weather").build();

        /**
         * <p>The content type for a cursor that contains many Weather rows.</p>
         */
        public static final String CONTENT_TYPE =
                "vnd.android.cursor.dir/vnd.mxinfodb.weather";

        /**
         * <p>The content type for a cursor that contains a single Weather row.</p>
         */
        public static final String ITEM_CONTENT_TYPE =
                "vnd.android.cursor.item/vnd.mxinfodb.weather";

        /**
         * <p>Builds a Uri with appended id for a row in Weather,
         * eg:- content://info.mx.tracks.sqlite.mxinfodb/weather/123.</p>
         */
        public static Uri buildUriWithId(long id) {
            return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
        }

        public static int delete() {
            return Mechanoid.getContentResolver().delete(Weather.CONTENT_URI, null, null);
        }

        public static int delete(String where, String[] selectionArgs) {
            return Mechanoid.getContentResolver().delete(Weather.CONTENT_URI, where, selectionArgs);
        }

        /**
         * <p>Create a new Builder for Weather</p>
         */
        public static Builder newBuilder() {
            return new Builder();
        }

        /**
         * <p>Build and execute insert or update statements for Weather.</p>
         *
         * <p>Use {@link Weather#newBuilder()} to create new builder</p>
         */
        public static class Builder extends AbstractValuesBuilder {
            private Builder() {
                super(Mechanoid.getApplicationContext(), Weather.CONTENT_URI);
            }

            public Builder setRestId(long value) {
                mValues.put(Weather.REST_ID, value);
                return this;
            }

            public Builder setTrackClientId(long value) {
                mValues.put(Weather.TRACK_CLIENT_ID, value);
                return this;
            }

            public Builder setType(String value) {
                mValues.put(Weather.TYPE, value);
                return this;
            }

            public Builder setContent(String value) {
                mValues.put(Weather.CONTENT, value);
                return this;
            }

            public Builder setDt(long value) {
                mValues.put(Weather.DT, value);
                return this;
            }

            public Builder setCreated(long value) {
                mValues.put(Weather.CREATED, value);
                return this;
            }
        }

        static final Set<Uri> VIEW_URIS;

        static {
            HashSet<Uri> viewUris = new HashSet<>();


            VIEW_URIS = Collections.unmodifiableSet(viewUris);
        }
    }

    /**
     * <p>Column definitions and helper methods to work with the Countrycount.</p>
     */
    public static class Countrycount implements CountrycountColumns, BaseColumns {
        public static final Uri CONTENT_URI =
                BASE_CONTENT_URI.buildUpon().appendPath("countrycount").build();

        /**
         * <p>The content type for a cursor that contains many Countrycount rows.</p>
         */
        public static final String CONTENT_TYPE =
                "vnd.android.cursor.dir/vnd.mxinfodb.countrycount";

        /**
         * <p>The content type for a cursor that contains a single Countrycount row.</p>
         */
        public static final String ITEM_CONTENT_TYPE =
                "vnd.android.cursor.item/vnd.mxinfodb.countrycount";

        /**
         * <p>Builds a Uri with appended id for a row in Countrycount,
         * eg:- content://info.mx.tracks.sqlite.mxinfodb/countrycount/123.</p>
         */
        public static Uri buildUriWithId(long id) {
            return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
        }

        public static int delete() {
            return Mechanoid.getContentResolver().delete(Countrycount.CONTENT_URI, null, null);
        }

        public static int delete(String where, String[] selectionArgs) {
            return Mechanoid.getContentResolver().delete(Countrycount.CONTENT_URI, where, selectionArgs);
        }

        /**
         * <p>Create a new Builder for Countrycount</p>
         */
        public static Builder newBuilder() {
            return new Builder();
        }

        /**
         * <p>Build and execute insert or update statements for Countrycount.</p>
         *
         * <p>Use {@link Countrycount#newBuilder()} to create new builder</p>
         */
        public static class Builder extends AbstractValuesBuilder {
            private Builder() {
                super(Mechanoid.getApplicationContext(), Countrycount.CONTENT_URI);
            }

            public Builder setCountry(String value) {
                mValues.put(Countrycount.COUNTRY, value);
                return this;
            }

            public Builder setShow(long value) {
                mValues.put(Countrycount.SHOW, value);
                return this;
            }

            public Builder setCount(String value) {
                mValues.put(Countrycount.COUNT, value);
                return this;
            }
        }

        static final Set<Uri> VIEW_URIS;

        static {
            HashSet<Uri> viewUris = new HashSet<>();


            VIEW_URIS = Collections.unmodifiableSet(viewUris);
        }
    }

    /**
     * <p>Column definitions and helper methods to work with the Countrysum.</p>
     */
    public static class Countrysum implements CountrysumColumns, BaseColumns {
        public static final Uri CONTENT_URI =
                BASE_CONTENT_URI.buildUpon().appendPath("countrysum").build();

        /**
         * <p>The content type for a cursor that contains many Countrysum rows.</p>
         */
        public static final String CONTENT_TYPE =
                "vnd.android.cursor.dir/vnd.mxinfodb.countrysum";

        /**
         * <p>The content type for a cursor that contains a single Countrysum row.</p>
         */
        public static final String ITEM_CONTENT_TYPE =
                "vnd.android.cursor.item/vnd.mxinfodb.countrysum";

        /**
         * <p>Builds a Uri with appended id for a row in Countrysum,
         * eg:- content://info.mx.tracks.sqlite.mxinfodb/countrysum/123.</p>
         */
        public static Uri buildUriWithId(long id) {
            return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
        }

        public static int delete() {
            return Mechanoid.getContentResolver().delete(Countrysum.CONTENT_URI, null, null);
        }

        public static int delete(String where, String[] selectionArgs) {
            return Mechanoid.getContentResolver().delete(Countrysum.CONTENT_URI, where, selectionArgs);
        }

        /**
         * <p>Create a new Builder for Countrysum</p>
         */
        public static Builder newBuilder() {
            return new Builder();
        }

        /**
         * <p>Build and execute insert or update statements for Countrysum.</p>
         *
         * <p>Use {@link Countrysum#newBuilder()} to create new builder</p>
         */
        public static class Builder extends AbstractValuesBuilder {
            private Builder() {
                super(Mechanoid.getApplicationContext(), Countrysum.CONTENT_URI);
            }

            public Builder setCountry(String value) {
                mValues.put(Countrysum.COUNTRY, value);
                return this;
            }

            public Builder setCount(long value) {
                mValues.put(Countrysum.COUNT, value);
                return this;
            }
        }

        static final Set<Uri> VIEW_URIS;

        static {
            HashSet<Uri> viewUris = new HashSet<>();


            VIEW_URIS = Collections.unmodifiableSet(viewUris);
        }
    }

    /**
     * <p>Column definitions and helper methods to work with the Events2series.</p>
     */
    public static class Events2series implements Events2seriesColumns, BaseColumns {
        public static final Uri CONTENT_URI =
                BASE_CONTENT_URI.buildUpon().appendPath("events2series").build();

        /**
         * <p>The content type for a cursor that contains many Events2series rows.</p>
         */
        public static final String CONTENT_TYPE =
                "vnd.android.cursor.dir/vnd.mxinfodb.events2series";

        /**
         * <p>The content type for a cursor that contains a single Events2series row.</p>
         */
        public static final String ITEM_CONTENT_TYPE =
                "vnd.android.cursor.item/vnd.mxinfodb.events2series";

        /**
         * <p>Builds a Uri with appended id for a row in Events2series,
         * eg:- content://info.mx.tracks.sqlite.mxinfodb/events2series/123.</p>
         */
        public static Uri buildUriWithId(long id) {
            return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
        }

        public static int delete() {
            return Mechanoid.getContentResolver().delete(Events2series.CONTENT_URI, null, null);
        }

        public static int delete(String where, String[] selectionArgs) {
            return Mechanoid.getContentResolver().delete(Events2series.CONTENT_URI, where, selectionArgs);
        }

        /**
         * <p>Create a new Builder for Events2series</p>
         */
        public static Builder newBuilder() {
            return new Builder();
        }

        /**
         * <p>Build and execute insert or update statements for Events2series.</p>
         *
         * <p>Use {@link Events2series#newBuilder()} to create new builder</p>
         */
        public static class Builder extends AbstractValuesBuilder {
            private Builder() {
                super(Mechanoid.getApplicationContext(), Events2series.CONTENT_URI);
            }

            public Builder setTrackRestId(long value) {
                mValues.put(Events2series.TRACK_REST_ID, value);
                return this;
            }

            public Builder setSeriesRestId(long value) {
                mValues.put(Events2series.SERIES_REST_ID, value);
                return this;
            }

            public Builder setComment(String value) {
                mValues.put(Events2series.COMMENT, value);
                return this;
            }

            public Builder setApproved(long value) {
                mValues.put(Events2series.APPROVED, value);
                return this;
            }

            public Builder setEventDate(long value) {
                mValues.put(Events2series.EVENT_DATE, value);
                return this;
            }

            public Builder setSeriesname(String value) {
                mValues.put(Events2series.SERIESNAME, value);
                return this;
            }
        }

        static final Set<Uri> VIEW_URIS;

        static {
            HashSet<Uri> viewUris = new HashSet<>();


            VIEW_URIS = Collections.unmodifiableSet(viewUris);
        }
    }

    /**
     * <p>Column definitions and helper methods to work with the Eventsum.</p>
     */
    public static class Eventsum implements EventsumColumns, BaseColumns {
        public static final Uri CONTENT_URI =
                BASE_CONTENT_URI.buildUpon().appendPath("eventsum").build();

        /**
         * <p>The content type for a cursor that contains many Eventsum rows.</p>
         */
        public static final String CONTENT_TYPE =
                "vnd.android.cursor.dir/vnd.mxinfodb.eventsum";

        /**
         * <p>The content type for a cursor that contains a single Eventsum row.</p>
         */
        public static final String ITEM_CONTENT_TYPE =
                "vnd.android.cursor.item/vnd.mxinfodb.eventsum";

        /**
         * <p>Builds a Uri with appended id for a row in Eventsum,
         * eg:- content://info.mx.tracks.sqlite.mxinfodb/eventsum/123.</p>
         */
        public static Uri buildUriWithId(long id) {
            return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
        }

        public static int delete() {
            return Mechanoid.getContentResolver().delete(Eventsum.CONTENT_URI, null, null);
        }

        public static int delete(String where, String[] selectionArgs) {
            return Mechanoid.getContentResolver().delete(Eventsum.CONTENT_URI, where, selectionArgs);
        }

        /**
         * <p>Create a new Builder for Eventsum</p>
         */
        public static Builder newBuilder() {
            return new Builder();
        }

        /**
         * <p>Build and execute insert or update statements for Eventsum.</p>
         *
         * <p>Use {@link Eventsum#newBuilder()} to create new builder</p>
         */
        public static class Builder extends AbstractValuesBuilder {
            private Builder() {
                super(Mechanoid.getApplicationContext(), Eventsum.CONTENT_URI);
            }

            public Builder setTrackRestId(long value) {
                mValues.put(Eventsum.TRACK_REST_ID, value);
                return this;
            }

            public Builder setEventcount(long value) {
                mValues.put(Eventsum.EVENTCOUNT, value);
                return this;
            }
        }

        static final Set<Uri> VIEW_URIS;

        static {
            HashSet<Uri> viewUris = new HashSet<>();


            VIEW_URIS = Collections.unmodifiableSet(viewUris);
        }
    }

    /**
     * <p>Column definitions and helper methods to work with the Picturesum.</p>
     */
    public static class Picturesum implements PicturesumColumns, BaseColumns {
        public static final Uri CONTENT_URI =
                BASE_CONTENT_URI.buildUpon().appendPath("picturesum").build();

        /**
         * <p>The content type for a cursor that contains many Picturesum rows.</p>
         */
        public static final String CONTENT_TYPE =
                "vnd.android.cursor.dir/vnd.mxinfodb.picturesum";

        /**
         * <p>The content type for a cursor that contains a single Picturesum row.</p>
         */
        public static final String ITEM_CONTENT_TYPE =
                "vnd.android.cursor.item/vnd.mxinfodb.picturesum";

        /**
         * <p>Builds a Uri with appended id for a row in Picturesum,
         * eg:- content://info.mx.tracks.sqlite.mxinfodb/picturesum/123.</p>
         */
        public static Uri buildUriWithId(long id) {
            return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
        }

        public static int delete() {
            return Mechanoid.getContentResolver().delete(Picturesum.CONTENT_URI, null, null);
        }

        public static int delete(String where, String[] selectionArgs) {
            return Mechanoid.getContentResolver().delete(Picturesum.CONTENT_URI, where, selectionArgs);
        }

        /**
         * <p>Create a new Builder for Picturesum</p>
         */
        public static Builder newBuilder() {
            return new Builder();
        }

        /**
         * <p>Build and execute insert or update statements for Picturesum.</p>
         *
         * <p>Use {@link Picturesum#newBuilder()} to create new builder</p>
         */
        public static class Builder extends AbstractValuesBuilder {
            private Builder() {
                super(Mechanoid.getApplicationContext(), Picturesum.CONTENT_URI);
            }

            public Builder setTrackRestId(long value) {
                mValues.put(Picturesum.TRACK_REST_ID, value);
                return this;
            }

            public Builder setPicturecount(long value) {
                mValues.put(Picturesum.PICTURECOUNT, value);
                return this;
            }
        }

        static final Set<Uri> VIEW_URIS;

        static {
            HashSet<Uri> viewUris = new HashSet<>();


            VIEW_URIS = Collections.unmodifiableSet(viewUris);
        }
    }

    /**
     * <p>Column definitions and helper methods to work with the Ratingsum.</p>
     */
    public static class Ratingsum implements RatingsumColumns, BaseColumns {
        public static final Uri CONTENT_URI =
                BASE_CONTENT_URI.buildUpon().appendPath("ratingsum").build();

        /**
         * <p>The content type for a cursor that contains many Ratingsum rows.</p>
         */
        public static final String CONTENT_TYPE =
                "vnd.android.cursor.dir/vnd.mxinfodb.ratingsum";

        /**
         * <p>The content type for a cursor that contains a single Ratingsum row.</p>
         */
        public static final String ITEM_CONTENT_TYPE =
                "vnd.android.cursor.item/vnd.mxinfodb.ratingsum";

        /**
         * <p>Builds a Uri with appended id for a row in Ratingsum,
         * eg:- content://info.mx.tracks.sqlite.mxinfodb/ratingsum/123.</p>
         */
        public static Uri buildUriWithId(long id) {
            return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
        }

        public static int delete() {
            return Mechanoid.getContentResolver().delete(Ratingsum.CONTENT_URI, null, null);
        }

        public static int delete(String where, String[] selectionArgs) {
            return Mechanoid.getContentResolver().delete(Ratingsum.CONTENT_URI, where, selectionArgs);
        }

        /**
         * <p>Create a new Builder for Ratingsum</p>
         */
        public static Builder newBuilder() {
            return new Builder();
        }

        /**
         * <p>Build and execute insert or update statements for Ratingsum.</p>
         *
         * <p>Use {@link Ratingsum#newBuilder()} to create new builder</p>
         */
        public static class Builder extends AbstractValuesBuilder {
            private Builder() {
                super(Mechanoid.getApplicationContext(), Ratingsum.CONTENT_URI);
            }

            public Builder setTrackRestId(long value) {
                mValues.put(Ratingsum.TRACK_REST_ID, value);
                return this;
            }

            public Builder setRatingcount(long value) {
                mValues.put(Ratingsum.RATINGCOUNT, value);
                return this;
            }

            public Builder setRatingavg(double value) {
                mValues.put(Ratingsum.RATINGAVG, value);
                return this;
            }
        }

        static final Set<Uri> VIEW_URIS;

        static {
            HashSet<Uri> viewUris = new HashSet<>();


            VIEW_URIS = Collections.unmodifiableSet(viewUris);
        }
    }

    /**
     * <p>Column definitions and helper methods to work with the TracksGesSum.</p>
     */
    public static class TracksGesSum implements TracksGesSumColumns, BaseColumns {
        public static final Uri CONTENT_URI =
                BASE_CONTENT_URI.buildUpon().appendPath("tracksGesSum").build();

        /**
         * <p>The content type for a cursor that contains many TracksGesSum rows.</p>
         */
        public static final String CONTENT_TYPE =
                "vnd.android.cursor.dir/vnd.mxinfodb.tracksGesSum";

        /**
         * <p>The content type for a cursor that contains a single TracksGesSum row.</p>
         */
        public static final String ITEM_CONTENT_TYPE =
                "vnd.android.cursor.item/vnd.mxinfodb.tracksGesSum";

        /**
         * <p>Builds a Uri with appended id for a row in TracksGesSum,
         * eg:- content://info.mx.tracks.sqlite.mxinfodb/tracksgessum/123.</p>
         */
        public static Uri buildUriWithId(long id) {
            return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
        }

        public static int delete() {
            return Mechanoid.getContentResolver().delete(TracksGesSum.CONTENT_URI, null, null);
        }

        public static int delete(String where, String[] selectionArgs) {
            return Mechanoid.getContentResolver().delete(TracksGesSum.CONTENT_URI, where, selectionArgs);
        }

        /**
         * <p>Create a new Builder for TracksGesSum</p>
         */
        public static Builder newBuilder() {
            return new Builder();
        }

        /**
         * <p>Build and execute insert or update statements for TracksGesSum.</p>
         *
         * <p>Use {@link TracksGesSum#newBuilder()} to create new builder</p>
         */
        public static class Builder extends AbstractValuesBuilder {
            private Builder() {
                super(Mechanoid.getApplicationContext(), TracksGesSum.CONTENT_URI);
            }

            public Builder setTrackname(String value) {
                mValues.put(TracksGesSum.TRACKNAME, value);
                return this;
            }

            public Builder setApproved(long value) {
                mValues.put(TracksGesSum.APPROVED, value);
                return this;
            }

            public Builder setDistance2location(long value) {
                mValues.put(TracksGesSum.DISTANCE2LOCATION, value);
                return this;
            }

            public Builder setOpenmondays(long value) {
                mValues.put(TracksGesSum.OPENMONDAYS, value);
                return this;
            }

            public Builder setOpentuesdays(long value) {
                mValues.put(TracksGesSum.OPENTUESDAYS, value);
                return this;
            }

            public Builder setNUEvents(String value) {
                mValues.put(TracksGesSum.N_U_EVENTS, value);
                return this;
            }

            public Builder setOpenwednesday(long value) {
                mValues.put(TracksGesSum.OPENWEDNESDAY, value);
                return this;
            }

            public Builder setOpenthursday(long value) {
                mValues.put(TracksGesSum.OPENTHURSDAY, value);
                return this;
            }

            public Builder setOpenfriday(long value) {
                mValues.put(TracksGesSum.OPENFRIDAY, value);
                return this;
            }

            public Builder setOpensaturday(long value) {
                mValues.put(TracksGesSum.OPENSATURDAY, value);
                return this;
            }

            public Builder setOpensunday(long value) {
                mValues.put(TracksGesSum.OPENSUNDAY, value);
                return this;
            }

            public Builder setCountry(String value) {
                mValues.put(TracksGesSum.COUNTRY, value);
                return this;
            }

            public Builder setTrackaccess(String value) {
                mValues.put(TracksGesSum.TRACKACCESS, value);
                return this;
            }

            public Builder setRestId(long value) {
                mValues.put(TracksGesSum.REST_ID, value);
                return this;
            }

            public Builder setBrands(String value) {
                mValues.put(TracksGesSum.BRANDS, value);
                return this;
            }

            public Builder setMetatext(String value) {
                mValues.put(TracksGesSum.METATEXT, value);
                return this;
            }

            public Builder setKidstrack(long value) {
                mValues.put(TracksGesSum.KIDSTRACK, value);
                return this;
            }

            public Builder setSupercross(long value) {
                mValues.put(TracksGesSum.SUPERCROSS, value);
                return this;
            }

            public Builder setShower(long value) {
                mValues.put(TracksGesSum.SHOWER, value);
                return this;
            }

            public Builder setCleaning(long value) {
                mValues.put(TracksGesSum.CLEANING, value);
                return this;
            }

            public Builder setElectricity(long value) {
                mValues.put(TracksGesSum.ELECTRICITY, value);
                return this;
            }

            public Builder setCamping(long value) {
                mValues.put(TracksGesSum.CAMPING, value);
                return this;
            }

            public Builder setLatitude(double value) {
                mValues.put(TracksGesSum.LATITUDE, value);
                return this;
            }

            public Builder setLongitude(double value) {
                mValues.put(TracksGesSum.LONGITUDE, value);
                return this;
            }

            public Builder setHoursmonday(String value) {
                mValues.put(TracksGesSum.HOURSMONDAY, value);
                return this;
            }

            public Builder setHourstuesday(String value) {
                mValues.put(TracksGesSum.HOURSTUESDAY, value);
                return this;
            }

            public Builder setHourswednesday(String value) {
                mValues.put(TracksGesSum.HOURSWEDNESDAY, value);
                return this;
            }

            public Builder setHoursthursday(String value) {
                mValues.put(TracksGesSum.HOURSTHURSDAY, value);
                return this;
            }

            public Builder setHoursfriday(String value) {
                mValues.put(TracksGesSum.HOURSFRIDAY, value);
                return this;
            }

            public Builder setHourssaturday(String value) {
                mValues.put(TracksGesSum.HOURSSATURDAY, value);
                return this;
            }

            public Builder setHourssunday(String value) {
                mValues.put(TracksGesSum.HOURSSUNDAY, value);
                return this;
            }

            public Builder setValiduntil(long value) {
                mValues.put(TracksGesSum.VALIDUNTIL, value);
                return this;
            }

            public Builder setUrl(String value) {
                mValues.put(TracksGesSum.URL, value);
                return this;
            }

            public Builder setPhone(String value) {
                mValues.put(TracksGesSum.PHONE, value);
                return this;
            }

            public Builder setContact(String value) {
                mValues.put(TracksGesSum.CONTACT, value);
                return this;
            }

            public Builder setNotes(String value) {
                mValues.put(TracksGesSum.NOTES, value);
                return this;
            }

            public Builder setTracklength(long value) {
                mValues.put(TracksGesSum.TRACKLENGTH, value);
                return this;
            }

            public Builder setSoiltype(long value) {
                mValues.put(TracksGesSum.SOILTYPE, value);
                return this;
            }

            public Builder setFacebook(String value) {
                mValues.put(TracksGesSum.FACEBOOK, value);
                return this;
            }

            public Builder setAdress(String value) {
                mValues.put(TracksGesSum.ADRESS, value);
                return this;
            }

            public Builder setLicence(String value) {
                mValues.put(TracksGesSum.LICENCE, value);
                return this;
            }

            public Builder setFees(String value) {
                mValues.put(TracksGesSum.FEES, value);
                return this;
            }

            public Builder setFeescamping(String value) {
                mValues.put(TracksGesSum.FEESCAMPING, value);
                return this;
            }

            public Builder setDaysopen(String value) {
                mValues.put(TracksGesSum.DAYSOPEN, value);
                return this;
            }

            public Builder setNoiselimit(String value) {
                mValues.put(TracksGesSum.NOISELIMIT, value);
                return this;
            }

            public Builder setCampingrvrvhookup(long value) {
                mValues.put(TracksGesSum.CAMPINGRVRVHOOKUP, value);
                return this;
            }

            public Builder setSingletracks(long value) {
                mValues.put(TracksGesSum.SINGLETRACKS, value);
                return this;
            }

            public Builder setMxtrack(long value) {
                mValues.put(TracksGesSum.MXTRACK, value);
                return this;
            }

            public Builder setA4x4(long value) {
                mValues.put(TracksGesSum.A4X4, value);
                return this;
            }

            public Builder setEndruo(long value) {
                mValues.put(TracksGesSum.ENDRUO, value);
                return this;
            }

            public Builder setUtv(long value) {
                mValues.put(TracksGesSum.UTV, value);
                return this;
            }

            public Builder setQuad(long value) {
                mValues.put(TracksGesSum.QUAD, value);
                return this;
            }

            public Builder setTrackstatus(String value) {
                mValues.put(TracksGesSum.TRACKSTATUS, value);
                return this;
            }

            public Builder setAreatype(String value) {
                mValues.put(TracksGesSum.AREATYPE, value);
                return this;
            }

            public Builder setSchwierigkeit(long value) {
                mValues.put(TracksGesSum.SCHWIERIGKEIT, value);
                return this;
            }

            public Builder setIndoor(long value) {
                mValues.put(TracksGesSum.INDOOR, value);
                return this;
            }

            public Builder setRating(String value) {
                mValues.put(TracksGesSum.RATING, value);
                return this;
            }

            public Builder setPicturecount(String value) {
                mValues.put(TracksGesSum.PICTURECOUNT, value);
                return this;
            }

            public Builder setEventcount(String value) {
                mValues.put(TracksGesSum.EVENTCOUNT, value);
                return this;
            }
        }

        static final Set<Uri> VIEW_URIS;

        static {
            HashSet<Uri> viewUris = new HashSet<>();


            VIEW_URIS = Collections.unmodifiableSet(viewUris);
        }
    }

    /**
     * <p>Column definitions and helper methods to work with the Tracksges.</p>
     */
    public static class Tracksges implements TracksgesColumns, BaseColumns {
        public static final Uri CONTENT_URI =
                BASE_CONTENT_URI.buildUpon().appendPath("tracksges").build();

        /**
         * <p>The content type for a cursor that contains many Tracksges rows.</p>
         */
        public static final String CONTENT_TYPE =
                "vnd.android.cursor.dir/vnd.mxinfodb.tracksges";

        /**
         * <p>The content type for a cursor that contains a single Tracksges row.</p>
         */
        public static final String ITEM_CONTENT_TYPE =
                "vnd.android.cursor.item/vnd.mxinfodb.tracksges";

        /**
         * <p>Builds a Uri with appended id for a row in Tracksges,
         * eg:- content://info.mx.tracks.sqlite.mxinfodb/tracksges/123.</p>
         */
        public static Uri buildUriWithId(long id) {
            return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
        }

        public static int delete() {
            return Mechanoid.getContentResolver().delete(Tracksges.CONTENT_URI, null, null);
        }

        public static int delete(String where, String[] selectionArgs) {
            return Mechanoid.getContentResolver().delete(Tracksges.CONTENT_URI, where, selectionArgs);
        }

        /**
         * <p>Create a new Builder for Tracksges</p>
         */
        public static Builder newBuilder() {
            return new Builder();
        }

        /**
         * <p>Build and execute insert or update statements for Tracksges.</p>
         *
         * <p>Use {@link Tracksges#newBuilder()} to create new builder</p>
         */
        public static class Builder extends AbstractValuesBuilder {
            private Builder() {
                super(Mechanoid.getApplicationContext(), Tracksges.CONTENT_URI);
            }

            public Builder setTrackname(String value) {
                mValues.put(Tracksges.TRACKNAME, value);
                return this;
            }

            public Builder setApproved(long value) {
                mValues.put(Tracksges.APPROVED, value);
                return this;
            }

            public Builder setDistance2location(long value) {
                mValues.put(Tracksges.DISTANCE2LOCATION, value);
                return this;
            }

            public Builder setOpenmondays(long value) {
                mValues.put(Tracksges.OPENMONDAYS, value);
                return this;
            }

            public Builder setOpentuesdays(long value) {
                mValues.put(Tracksges.OPENTUESDAYS, value);
                return this;
            }

            public Builder setNUEvents(String value) {
                mValues.put(Tracksges.N_U_EVENTS, value);
                return this;
            }

            public Builder setOpenwednesday(long value) {
                mValues.put(Tracksges.OPENWEDNESDAY, value);
                return this;
            }

            public Builder setOpenthursday(long value) {
                mValues.put(Tracksges.OPENTHURSDAY, value);
                return this;
            }

            public Builder setOpenfriday(long value) {
                mValues.put(Tracksges.OPENFRIDAY, value);
                return this;
            }

            public Builder setOpensaturday(long value) {
                mValues.put(Tracksges.OPENSATURDAY, value);
                return this;
            }

            public Builder setOpensunday(long value) {
                mValues.put(Tracksges.OPENSUNDAY, value);
                return this;
            }

            public Builder setCountry(String value) {
                mValues.put(Tracksges.COUNTRY, value);
                return this;
            }

            public Builder setTrackaccess(String value) {
                mValues.put(Tracksges.TRACKACCESS, value);
                return this;
            }

            public Builder setRestId(long value) {
                mValues.put(Tracksges.REST_ID, value);
                return this;
            }

            public Builder setBrands(String value) {
                mValues.put(Tracksges.BRANDS, value);
                return this;
            }

            public Builder setMetatext(String value) {
                mValues.put(Tracksges.METATEXT, value);
                return this;
            }

            public Builder setKidstrack(long value) {
                mValues.put(Tracksges.KIDSTRACK, value);
                return this;
            }

            public Builder setSupercross(long value) {
                mValues.put(Tracksges.SUPERCROSS, value);
                return this;
            }

            public Builder setShower(long value) {
                mValues.put(Tracksges.SHOWER, value);
                return this;
            }

            public Builder setCleaning(long value) {
                mValues.put(Tracksges.CLEANING, value);
                return this;
            }

            public Builder setElectricity(long value) {
                mValues.put(Tracksges.ELECTRICITY, value);
                return this;
            }

            public Builder setCamping(long value) {
                mValues.put(Tracksges.CAMPING, value);
                return this;
            }

            public Builder setLatitude(double value) {
                mValues.put(Tracksges.LATITUDE, value);
                return this;
            }

            public Builder setLongitude(double value) {
                mValues.put(Tracksges.LONGITUDE, value);
                return this;
            }

            public Builder setHoursmonday(String value) {
                mValues.put(Tracksges.HOURSMONDAY, value);
                return this;
            }

            public Builder setHourstuesday(String value) {
                mValues.put(Tracksges.HOURSTUESDAY, value);
                return this;
            }

            public Builder setHourswednesday(String value) {
                mValues.put(Tracksges.HOURSWEDNESDAY, value);
                return this;
            }

            public Builder setHoursthursday(String value) {
                mValues.put(Tracksges.HOURSTHURSDAY, value);
                return this;
            }

            public Builder setHoursfriday(String value) {
                mValues.put(Tracksges.HOURSFRIDAY, value);
                return this;
            }

            public Builder setHourssaturday(String value) {
                mValues.put(Tracksges.HOURSSATURDAY, value);
                return this;
            }

            public Builder setHourssunday(String value) {
                mValues.put(Tracksges.HOURSSUNDAY, value);
                return this;
            }

            public Builder setValiduntil(long value) {
                mValues.put(Tracksges.VALIDUNTIL, value);
                return this;
            }

            public Builder setUrl(String value) {
                mValues.put(Tracksges.URL, value);
                return this;
            }

            public Builder setPhone(String value) {
                mValues.put(Tracksges.PHONE, value);
                return this;
            }

            public Builder setContact(String value) {
                mValues.put(Tracksges.CONTACT, value);
                return this;
            }

            public Builder setNotes(String value) {
                mValues.put(Tracksges.NOTES, value);
                return this;
            }

            public Builder setTracklength(long value) {
                mValues.put(Tracksges.TRACKLENGTH, value);
                return this;
            }

            public Builder setSoiltype(long value) {
                mValues.put(Tracksges.SOILTYPE, value);
                return this;
            }

            public Builder setFacebook(String value) {
                mValues.put(Tracksges.FACEBOOK, value);
                return this;
            }

            public Builder setAdress(String value) {
                mValues.put(Tracksges.ADRESS, value);
                return this;
            }

            public Builder setLicence(String value) {
                mValues.put(Tracksges.LICENCE, value);
                return this;
            }

            public Builder setFees(String value) {
                mValues.put(Tracksges.FEES, value);
                return this;
            }

            public Builder setFeescamping(String value) {
                mValues.put(Tracksges.FEESCAMPING, value);
                return this;
            }

            public Builder setDaysopen(String value) {
                mValues.put(Tracksges.DAYSOPEN, value);
                return this;
            }

            public Builder setNoiselimit(String value) {
                mValues.put(Tracksges.NOISELIMIT, value);
                return this;
            }

            public Builder setCampingrvrvhookup(long value) {
                mValues.put(Tracksges.CAMPINGRVRVHOOKUP, value);
                return this;
            }

            public Builder setSingletracks(long value) {
                mValues.put(Tracksges.SINGLETRACKS, value);
                return this;
            }

            public Builder setMxtrack(long value) {
                mValues.put(Tracksges.MXTRACK, value);
                return this;
            }

            public Builder setA4x4(long value) {
                mValues.put(Tracksges.A4X4, value);
                return this;
            }

            public Builder setEndruo(long value) {
                mValues.put(Tracksges.ENDRUO, value);
                return this;
            }

            public Builder setUtv(long value) {
                mValues.put(Tracksges.UTV, value);
                return this;
            }

            public Builder setQuad(long value) {
                mValues.put(Tracksges.QUAD, value);
                return this;
            }

            public Builder setTrackstatus(String value) {
                mValues.put(Tracksges.TRACKSTATUS, value);
                return this;
            }

            public Builder setAreatype(String value) {
                mValues.put(Tracksges.AREATYPE, value);
                return this;
            }

            public Builder setSchwierigkeit(long value) {
                mValues.put(Tracksges.SCHWIERIGKEIT, value);
                return this;
            }

            public Builder setIndoor(long value) {
                mValues.put(Tracksges.INDOOR, value);
                return this;
            }

            public Builder setRating(String value) {
                mValues.put(Tracksges.RATING, value);
                return this;
            }
        }

        static final Set<Uri> VIEW_URIS;

        static {
            HashSet<Uri> viewUris = new HashSet<>();


            VIEW_URIS = Collections.unmodifiableSet(viewUris);
        }
    }

    /**
     * <p>Column definitions and helper methods to work with the UserActivity.</p>
     */
    public static class UserActivity implements UserActivityColumns, BaseColumns {
        public static final Uri CONTENT_URI =
                BASE_CONTENT_URI.buildUpon().appendPath("userActivity").build();

        /**
         * <p>The content type for a cursor that contains many UserActivity rows.</p>
         */
        public static final String CONTENT_TYPE =
                "vnd.android.cursor.dir/vnd.mxinfodb.userActivity";

        /**
         * <p>The content type for a cursor that contains a single UserActivity row.</p>
         */
        public static final String ITEM_CONTENT_TYPE =
                "vnd.android.cursor.item/vnd.mxinfodb.userActivity";

        /**
         * <p>Builds a Uri with appended id for a row in UserActivity,
         * eg:- content://info.mx.tracks.sqlite.mxinfodb/useractivity/123.</p>
         */
        public static Uri buildUriWithId(long id) {
            return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
        }

        public static int delete() {
            return Mechanoid.getContentResolver().delete(UserActivity.CONTENT_URI, null, null);
        }

        public static int delete(String where, String[] selectionArgs) {
            return Mechanoid.getContentResolver().delete(UserActivity.CONTENT_URI, where, selectionArgs);
        }

        /**
         * <p>Create a new Builder for UserActivity</p>
         */
        public static Builder newBuilder() {
            return new Builder();
        }

        /**
         * <p>Build and execute insert or update statements for UserActivity.</p>
         *
         * <p>Use {@link UserActivity#newBuilder()} to create new builder</p>
         */
        public static class Builder extends AbstractValuesBuilder {
            private Builder() {
                super(Mechanoid.getApplicationContext(), UserActivity.CONTENT_URI);
            }

            public Builder setAndroidid(String value) {
                mValues.put(UserActivity.ANDROIDID, value);
                return this;
            }

            public Builder setApproved(long value) {
                mValues.put(UserActivity.APPROVED, value);
                return this;
            }

            public Builder setCnt(long value) {
                mValues.put(UserActivity.CNT, value);
                return this;
            }
        }

        static final Set<Uri> VIEW_URIS;

        static {
            HashSet<Uri> viewUris = new HashSet<>();


            VIEW_URIS = Collections.unmodifiableSet(viewUris);
        }
    }


    static Map<Uri, Set<Uri>> REFERENCING_VIEWS;

    static {
        Map<Uri, Set<Uri>> map = new HashMap<>();

        map.put(Country.CONTENT_URI, Country.VIEW_URIS);
        map.put(Events.CONTENT_URI, Events.VIEW_URIS);
        map.put(Favorits.CONTENT_URI, Favorits.VIEW_URIS);
        map.put(Importstatus.CONTENT_URI, Importstatus.VIEW_URIS);
        map.put(Message.CONTENT_URI, Message.VIEW_URIS);
        map.put(Network.CONTENT_URI, Network.VIEW_URIS);
        map.put(Pictures.CONTENT_URI, Pictures.VIEW_URIS);
        map.put(Ratings.CONTENT_URI, Ratings.VIEW_URIS);
        map.put(Route.CONTENT_URI, Route.VIEW_URIS);
        map.put(Series.CONTENT_URI, Series.VIEW_URIS);
        map.put(Tracks.CONTENT_URI, Tracks.VIEW_URIS);
        map.put(Trackstage.CONTENT_URI, Trackstage.VIEW_URIS);
        map.put(Weather.CONTENT_URI, Weather.VIEW_URIS);
        map.put(Countrycount.CONTENT_URI, Countrycount.VIEW_URIS);
        map.put(Countrysum.CONTENT_URI, Countrysum.VIEW_URIS);
        map.put(Events2series.CONTENT_URI, Events2series.VIEW_URIS);
        map.put(Eventsum.CONTENT_URI, Eventsum.VIEW_URIS);
        map.put(Picturesum.CONTENT_URI, Picturesum.VIEW_URIS);
        map.put(Ratingsum.CONTENT_URI, Ratingsum.VIEW_URIS);
        map.put(TracksGesSum.CONTENT_URI, TracksGesSum.VIEW_URIS);
        map.put(Tracksges.CONTENT_URI, Tracksges.VIEW_URIS);
        map.put(UserActivity.CONTENT_URI, UserActivity.VIEW_URIS);

        REFERENCING_VIEWS = Collections.unmodifiableMap(map);

    }

    private MxInfoDBContract() {
    }

    /**
     * <p>Delete all rows from all tables</p>
     */
    public static void deleteAll() {
        Country.delete();
        Events.delete();
        Favorits.delete();
        Importstatus.delete();
        Message.delete();
        Network.delete();
        Pictures.delete();
        Ratings.delete();
        Route.delete();
        Series.delete();
        Tracks.delete();
        Trackstage.delete();
        Weather.delete();
    }
}
