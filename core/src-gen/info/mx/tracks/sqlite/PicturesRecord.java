/*
 * Generated by Robotoworks Mechanoid
 */
package info.mx.tracks.sqlite;

import android.content.ContentResolver;
import android.database.Cursor;
import android.os.Bundle;
import android.os.Parcel;
import android.os.Parcelable;
import android.net.Uri;
import info.mx.tracks.sqlite.MxInfoDBContract.Pictures;
import info.mx.tracks.sqlite.MxInfoDBContract.Pictures.Builder;
import com.robotoworks.mechanoid.util.Closeables;
import com.robotoworks.mechanoid.db.ActiveRecord;
import com.robotoworks.mechanoid.db.ActiveRecordFactory;
import com.robotoworks.mechanoid.Mechanoid;
import com.robotoworks.mechanoid.db.AbstractValuesBuilder;

public class PicturesRecord extends ActiveRecord implements Parcelable {

	private static ActiveRecordFactory<PicturesRecord> sFactory = new ActiveRecordFactory<PicturesRecord>() {
		@Override
		public PicturesRecord create(Cursor c) {
			return fromCursor(c);
		}
		
		@Override
		public String[] getProjection() {
			return PROJECTION;
		}

        @Override
                    public Uri getContentUri() {
                        return Pictures.CONTENT_URI;
                    }
                };

    			public static ActiveRecordFactory<PicturesRecord> getFactory() {
		return sFactory;
	}

    public static final Parcelable.Creator<PicturesRecord> CREATOR 
    	= new Parcelable.Creator<PicturesRecord>() {
        public PicturesRecord createFromParcel(Parcel in) {
            return new PicturesRecord(in);
        }

        public PicturesRecord[] newArray(int size) {
            return new PicturesRecord[size];
        }
    };
    
    public static String[] PROJECTION = {
    	Pictures._ID,
    	Pictures.REST_ID,
    	Pictures.CHANGED,
    	Pictures.USERNAME,
    	Pictures.COMMENT,
    	Pictures.TRACK_REST_ID,
    	Pictures.APPROVED,
    	Pictures.DELETED,
    	Pictures.LOCALFILE,
    	Pictures.LOCALTHUMB
    };
    
    public interface Indices {
    	int _ID = 0;
    	int REST_ID = 1;
    	int CHANGED = 2;
    	int USERNAME = 3;
    	int COMMENT = 4;
    	int TRACK_REST_ID = 5;
    	int APPROVED = 6;
    	int DELETED = 7;
    	int LOCALFILE = 8;
    	int LOCALTHUMB = 9;
    }
    
    private long mRestId;
    private boolean mRestIdDirty;
    private long mChanged;
    private boolean mChangedDirty;
    private String mUsername;
    private boolean mUsernameDirty;
    private String mComment;
    private boolean mCommentDirty;
    private long mTrackRestId;
    private boolean mTrackRestIdDirty;
    private long mApproved;
    private boolean mApprovedDirty;
    private long mDeleted;
    private boolean mDeletedDirty;
    private String mLocalfile;
    private boolean mLocalfileDirty;
    private String mLocalthumb;
    private boolean mLocalthumbDirty;
    
    @Override
    protected String[] _getProjection() {
    	return PROJECTION;
    }
    
    public void setRestId(long restId) {
    	mRestId = restId;
    	mRestIdDirty = true;
    }
    
    public long getRestId() {
    	return mRestId;
    }
    
    public void setChanged(long changed) {
    	mChanged = changed;
    	mChangedDirty = true;
    }
    
    public long getChanged() {
    	return mChanged;
    }
    
    public void setUsername(String username) {
    	mUsername = username;
    	mUsernameDirty = true;
    }
    
    public String getUsername() {
    	return mUsername;
    }
    
    public void setComment(String comment) {
    	mComment = comment;
    	mCommentDirty = true;
    }
    
    public String getComment() {
    	return mComment;
    }
    
    public void setTrackRestId(long trackRestId) {
    	mTrackRestId = trackRestId;
    	mTrackRestIdDirty = true;
    }
    
    public long getTrackRestId() {
    	return mTrackRestId;
    }
    
    public void setApproved(long approved) {
    	mApproved = approved;
    	mApprovedDirty = true;
    }
    
    public long getApproved() {
    	return mApproved;
    }
    
    public void setDeleted(long deleted) {
    	mDeleted = deleted;
    	mDeletedDirty = true;
    }
    
    public long getDeleted() {
    	return mDeleted;
    }
    
    public void setLocalfile(String localfile) {
    	mLocalfile = localfile;
    	mLocalfileDirty = true;
    }
    
    public String getLocalfile() {
    	return mLocalfile;
    }
    
    public void setLocalthumb(String localthumb) {
    	mLocalthumb = localthumb;
    	mLocalthumbDirty = true;
    }
    
    public String getLocalthumb() {
    	return mLocalthumb;
    }
    
    
    public PicturesRecord() {
    	super(Pictures.CONTENT_URI);
	}
	
	private PicturesRecord(Parcel in) {
    	super(Pictures.CONTENT_URI);
    	
		setId(in.readLong());
		
		mRestId = in.readLong();
		mChanged = in.readLong();
		mUsername = in.readString();
		mComment = in.readString();
		mTrackRestId = in.readLong();
		mApproved = in.readLong();
		mDeleted = in.readLong();
		mLocalfile = in.readString();
		mLocalthumb = in.readString();
		
		boolean[] dirtyFlags = new boolean[9];
		in.readBooleanArray(dirtyFlags);
		mRestIdDirty = dirtyFlags[0];
		mChangedDirty = dirtyFlags[1];
		mUsernameDirty = dirtyFlags[2];
		mCommentDirty = dirtyFlags[3];
		mTrackRestIdDirty = dirtyFlags[4];
		mApprovedDirty = dirtyFlags[5];
		mDeletedDirty = dirtyFlags[6];
		mLocalfileDirty = dirtyFlags[7];
		mLocalthumbDirty = dirtyFlags[8];
	}
	
	@Override
	public int describeContents() {
	    return 0;
	}
	
	@Override
	public void writeToParcel(Parcel dest, int flags) {
		dest.writeLong(getId());
		dest.writeLong(mRestId);
		dest.writeLong(mChanged);
		dest.writeString(mUsername);
		dest.writeString(mComment);
		dest.writeLong(mTrackRestId);
		dest.writeLong(mApproved);
		dest.writeLong(mDeleted);
		dest.writeString(mLocalfile);
		dest.writeString(mLocalthumb);
		dest.writeBooleanArray(new boolean[] {
			mRestIdDirty,
			mChangedDirty,
			mUsernameDirty,
			mCommentDirty,
			mTrackRestIdDirty,
			mApprovedDirty,
			mDeletedDirty,
			mLocalfileDirty,
			mLocalthumbDirty
		});
	}
	
	@Override
	protected AbstractValuesBuilder createBuilder() {
		Builder builder = Pictures.newBuilder();

		if(mRestIdDirty) {
			builder.setRestId(mRestId);
		}
		if(mChangedDirty) {
			builder.setChanged(mChanged);
		}
		if(mUsernameDirty) {
			builder.setUsername(mUsername);
		}
		if(mCommentDirty) {
			builder.setComment(mComment);
		}
		if(mTrackRestIdDirty) {
			builder.setTrackRestId(mTrackRestId);
		}
		if(mApprovedDirty) {
			builder.setApproved(mApproved);
		}
		if(mDeletedDirty) {
			builder.setDeleted(mDeleted);
		}
		if(mLocalfileDirty) {
			builder.setLocalfile(mLocalfile);
		}
		if(mLocalthumbDirty) {
			builder.setLocalthumb(mLocalthumb);
		}
		
		return builder;
	}
	
    @Override
	public void makeDirty(boolean dirty){
		mRestIdDirty = dirty;
		mChangedDirty = dirty;
		mUsernameDirty = dirty;
		mCommentDirty = dirty;
		mTrackRestIdDirty = dirty;
		mApprovedDirty = dirty;
		mDeletedDirty = dirty;
		mLocalfileDirty = dirty;
		mLocalthumbDirty = dirty;
	}

	@Override
	protected void setPropertiesFromCursor(Cursor c) {
		setId(c.getLong(Indices._ID));
		setRestId(c.getLong(Indices.REST_ID));
		setChanged(c.getLong(Indices.CHANGED));
		setUsername(c.getString(Indices.USERNAME));
		setComment(c.getString(Indices.COMMENT));
		setTrackRestId(c.getLong(Indices.TRACK_REST_ID));
		setApproved(c.getLong(Indices.APPROVED));
		setDeleted(c.getLong(Indices.DELETED));
		setLocalfile(c.getString(Indices.LOCALFILE));
		setLocalthumb(c.getString(Indices.LOCALTHUMB));
	}
	
	public static PicturesRecord fromCursor(Cursor c) {
	    PicturesRecord item = new PicturesRecord();
	    
		item.setPropertiesFromCursor(c);
		
		item.makeDirty(false);
		
	    return item;
	}
	
	public static PicturesRecord fromBundle(Bundle bundle, String key) {
		bundle.setClassLoader(PicturesRecord.class.getClassLoader());
		return bundle.getParcelable(key);
	}
	
	public static PicturesRecord get(long id) {
	    Cursor c = null;
	    
	    ContentResolver resolver = Mechanoid.getContentResolver();
	    
	    try {
	        c = resolver.query(Pictures.CONTENT_URI.buildUpon()
			.appendPath(String.valueOf(id)).build(), PROJECTION, null, null, null);
	        
	        if(!c.moveToFirst()) {
	            return null;
	        }
	        
	        return fromCursor(c);
	    } finally {
	        Closeables.closeSilently(c);
	    }
	}
}
