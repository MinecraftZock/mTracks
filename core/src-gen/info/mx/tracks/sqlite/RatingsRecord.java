/*
 * Generated by Robotoworks Mechanoid
 */
package info.mx.tracks.sqlite;

import android.content.ContentResolver;
import android.database.Cursor;
import android.os.Bundle;
import android.os.Parcel;
import android.os.Parcelable;
import android.net.Uri;
import info.mx.tracks.sqlite.MxInfoDBContract.Ratings;
import info.mx.tracks.sqlite.MxInfoDBContract.Ratings.Builder;
import com.robotoworks.mechanoid.util.Closeables;
import com.robotoworks.mechanoid.db.ActiveRecord;
import com.robotoworks.mechanoid.db.ActiveRecordFactory;
import com.robotoworks.mechanoid.Mechanoid;
import com.robotoworks.mechanoid.db.AbstractValuesBuilder;

public class RatingsRecord extends ActiveRecord implements Parcelable {

	private static ActiveRecordFactory<RatingsRecord> sFactory = new ActiveRecordFactory<RatingsRecord>() {
		@Override
		public RatingsRecord create(Cursor c) {
			return fromCursor(c);
		}
		
		@Override
		public String[] getProjection() {
			return PROJECTION;
		}

        @Override
                    public Uri getContentUri() {
                        return Ratings.CONTENT_URI;
                    }
                };

    			public static ActiveRecordFactory<RatingsRecord> getFactory() {
		return sFactory;
	}

    public static final Parcelable.Creator<RatingsRecord> CREATOR 
    	= new Parcelable.Creator<RatingsRecord>() {
        public RatingsRecord createFromParcel(Parcel in) {
            return new RatingsRecord(in);
        }

        public RatingsRecord[] newArray(int size) {
            return new RatingsRecord[size];
        }
    };
    
    public static String[] PROJECTION = {
    	Ratings._ID,
    	Ratings.REST_ID,
    	Ratings.CHANGED,
    	Ratings.TRACK_REST_ID,
    	Ratings.RATING,
    	Ratings.USERNAME,
    	Ratings.NOTE,
    	Ratings.COUNTRY,
    	Ratings.DELETED,
    	Ratings.APPROVED,
    	Ratings.ANDROIDID
    };
    
    public interface Indices {
    	int _ID = 0;
    	int REST_ID = 1;
    	int CHANGED = 2;
    	int TRACK_REST_ID = 3;
    	int RATING = 4;
    	int USERNAME = 5;
    	int NOTE = 6;
    	int COUNTRY = 7;
    	int DELETED = 8;
    	int APPROVED = 9;
    	int ANDROIDID = 10;
    }
    
    private long mRestId;
    private boolean mRestIdDirty;
    private long mChanged;
    private boolean mChangedDirty;
    private long mTrackRestId;
    private boolean mTrackRestIdDirty;
    private long mRating;
    private boolean mRatingDirty;
    private String mUsername;
    private boolean mUsernameDirty;
    private String mNote;
    private boolean mNoteDirty;
    private String mCountry;
    private boolean mCountryDirty;
    private long mDeleted;
    private boolean mDeletedDirty;
    private long mApproved;
    private boolean mApprovedDirty;
    private String mAndroidid;
    private boolean mAndroididDirty;
    
    @Override
    protected String[] _getProjection() {
    	return PROJECTION;
    }
    
    public void setRestId(long restId) {
    	mRestId = restId;
    	mRestIdDirty = true;
    }
    
    public long getRestId() {
    	return mRestId;
    }
    
    public void setChanged(long changed) {
    	mChanged = changed;
    	mChangedDirty = true;
    }
    
    public long getChanged() {
    	return mChanged;
    }
    
    public void setTrackRestId(long trackRestId) {
    	mTrackRestId = trackRestId;
    	mTrackRestIdDirty = true;
    }
    
    public long getTrackRestId() {
    	return mTrackRestId;
    }
    
    public void setRating(long rating) {
    	mRating = rating;
    	mRatingDirty = true;
    }
    
    public long getRating() {
    	return mRating;
    }
    
    public void setUsername(String username) {
    	mUsername = username;
    	mUsernameDirty = true;
    }
    
    public String getUsername() {
    	return mUsername;
    }
    
    public void setNote(String note) {
    	mNote = note;
    	mNoteDirty = true;
    }
    
    public String getNote() {
    	return mNote;
    }
    
    public void setCountry(String country) {
    	mCountry = country;
    	mCountryDirty = true;
    }
    
    public String getCountry() {
    	return mCountry;
    }
    
    public void setDeleted(long deleted) {
    	mDeleted = deleted;
    	mDeletedDirty = true;
    }
    
    public long getDeleted() {
    	return mDeleted;
    }
    
    public void setApproved(long approved) {
    	mApproved = approved;
    	mApprovedDirty = true;
    }
    
    public long getApproved() {
    	return mApproved;
    }
    
    public void setAndroidid(String androidid) {
    	mAndroidid = androidid;
    	mAndroididDirty = true;
    }
    
    public String getAndroidid() {
    	return mAndroidid;
    }
    
    
    public RatingsRecord() {
    	super(Ratings.CONTENT_URI);
	}
	
	private RatingsRecord(Parcel in) {
    	super(Ratings.CONTENT_URI);
    	
		setId(in.readLong());
		
		mRestId = in.readLong();
		mChanged = in.readLong();
		mTrackRestId = in.readLong();
		mRating = in.readLong();
		mUsername = in.readString();
		mNote = in.readString();
		mCountry = in.readString();
		mDeleted = in.readLong();
		mApproved = in.readLong();
		mAndroidid = in.readString();
		
		boolean[] dirtyFlags = new boolean[10];
		in.readBooleanArray(dirtyFlags);
		mRestIdDirty = dirtyFlags[0];
		mChangedDirty = dirtyFlags[1];
		mTrackRestIdDirty = dirtyFlags[2];
		mRatingDirty = dirtyFlags[3];
		mUsernameDirty = dirtyFlags[4];
		mNoteDirty = dirtyFlags[5];
		mCountryDirty = dirtyFlags[6];
		mDeletedDirty = dirtyFlags[7];
		mApprovedDirty = dirtyFlags[8];
		mAndroididDirty = dirtyFlags[9];
	}
	
	@Override
	public int describeContents() {
	    return 0;
	}
	
	@Override
	public void writeToParcel(Parcel dest, int flags) {
		dest.writeLong(getId());
		dest.writeLong(mRestId);
		dest.writeLong(mChanged);
		dest.writeLong(mTrackRestId);
		dest.writeLong(mRating);
		dest.writeString(mUsername);
		dest.writeString(mNote);
		dest.writeString(mCountry);
		dest.writeLong(mDeleted);
		dest.writeLong(mApproved);
		dest.writeString(mAndroidid);
		dest.writeBooleanArray(new boolean[] {
			mRestIdDirty,
			mChangedDirty,
			mTrackRestIdDirty,
			mRatingDirty,
			mUsernameDirty,
			mNoteDirty,
			mCountryDirty,
			mDeletedDirty,
			mApprovedDirty,
			mAndroididDirty
		});
	}
	
	@Override
	protected AbstractValuesBuilder createBuilder() {
		Builder builder = Ratings.newBuilder();

		if(mRestIdDirty) {
			builder.setRestId(mRestId);
		}
		if(mChangedDirty) {
			builder.setChanged(mChanged);
		}
		if(mTrackRestIdDirty) {
			builder.setTrackRestId(mTrackRestId);
		}
		if(mRatingDirty) {
			builder.setRating(mRating);
		}
		if(mUsernameDirty) {
			builder.setUsername(mUsername);
		}
		if(mNoteDirty) {
			builder.setNote(mNote);
		}
		if(mCountryDirty) {
			builder.setCountry(mCountry);
		}
		if(mDeletedDirty) {
			builder.setDeleted(mDeleted);
		}
		if(mApprovedDirty) {
			builder.setApproved(mApproved);
		}
		if(mAndroididDirty) {
			builder.setAndroidid(mAndroidid);
		}
		
		return builder;
	}
	
    @Override
	public void makeDirty(boolean dirty){
		mRestIdDirty = dirty;
		mChangedDirty = dirty;
		mTrackRestIdDirty = dirty;
		mRatingDirty = dirty;
		mUsernameDirty = dirty;
		mNoteDirty = dirty;
		mCountryDirty = dirty;
		mDeletedDirty = dirty;
		mApprovedDirty = dirty;
		mAndroididDirty = dirty;
	}

	@Override
	protected void setPropertiesFromCursor(Cursor c) {
		setId(c.getLong(Indices._ID));
		setRestId(c.getLong(Indices.REST_ID));
		setChanged(c.getLong(Indices.CHANGED));
		setTrackRestId(c.getLong(Indices.TRACK_REST_ID));
		setRating(c.getLong(Indices.RATING));
		setUsername(c.getString(Indices.USERNAME));
		setNote(c.getString(Indices.NOTE));
		setCountry(c.getString(Indices.COUNTRY));
		setDeleted(c.getLong(Indices.DELETED));
		setApproved(c.getLong(Indices.APPROVED));
		setAndroidid(c.getString(Indices.ANDROIDID));
	}
	
	public static RatingsRecord fromCursor(Cursor c) {
	    RatingsRecord item = new RatingsRecord();
	    
		item.setPropertiesFromCursor(c);
		
		item.makeDirty(false);
		
	    return item;
	}
	
	public static RatingsRecord fromBundle(Bundle bundle, String key) {
		bundle.setClassLoader(RatingsRecord.class.getClassLoader());
		return bundle.getParcelable(key);
	}
	
	public static RatingsRecord get(long id) {
	    Cursor c = null;
	    
	    ContentResolver resolver = Mechanoid.getContentResolver();
	    
	    try {
	        c = resolver.query(Ratings.CONTENT_URI.buildUpon()
			.appendPath(String.valueOf(id)).build(), PROJECTION, null, null, null);
	        
	        if(!c.moveToFirst()) {
	            return null;
	        }
	        
	        return fromCursor(c);
	    } finally {
	        Closeables.closeSilently(c);
	    }
	}
}
