/*
 * Generated by Robotoworks Mechanoid
 */
package info.mx.tracks.sqlite;

import android.content.ContentResolver;
import android.database.Cursor;
import android.os.Bundle;
import android.os.Parcel;
import android.os.Parcelable;
import android.net.Uri;
import info.mx.tracks.sqlite.MxInfoDBContract.Countrysum;
import info.mx.tracks.sqlite.MxInfoDBContract.Countrysum.Builder;
import com.robotoworks.mechanoid.util.Closeables;
import com.robotoworks.mechanoid.db.ActiveRecord;
import com.robotoworks.mechanoid.db.ActiveRecordFactory;
import com.robotoworks.mechanoid.Mechanoid;
import com.robotoworks.mechanoid.db.AbstractValuesBuilder;

public class CountrysumRecord extends ActiveRecord implements Parcelable {

	private static ActiveRecordFactory<CountrysumRecord> sFactory = new ActiveRecordFactory<CountrysumRecord>() {
		@Override
		public CountrysumRecord create(Cursor c) {
			return fromCursor(c);
		}
		
		@Override
		public String[] getProjection() {
			return PROJECTION;
		}

        @Override
                    public Uri getContentUri() {
                        return Countrysum.CONTENT_URI;
                    }
                };

    			public static ActiveRecordFactory<CountrysumRecord> getFactory() {
		return sFactory;
	}

    public static final Parcelable.Creator<CountrysumRecord> CREATOR 
    	= new Parcelable.Creator<CountrysumRecord>() {
        public CountrysumRecord createFromParcel(Parcel in) {
            return new CountrysumRecord(in);
        }

        public CountrysumRecord[] newArray(int size) {
            return new CountrysumRecord[size];
        }
    };
    
    public static String[] PROJECTION = {
    	Countrysum._ID,
    	Countrysum.COUNTRY,
    	Countrysum.COUNT
    };
    
    public interface Indices {
    	int _ID = 0;
    	int COUNTRY = 1;
    	int COUNT = 2;
    }
    
    private String mCountry;
    private boolean mCountryDirty;
    private long mCount;
    private boolean mCountDirty;
    
    @Override
    protected String[] _getProjection() {
    	return PROJECTION;
    }
    
    public void setCountry(String country) {
    	mCountry = country;
    	mCountryDirty = true;
    }
    
    public String getCountry() {
    	return mCountry;
    }
    public void setCount(long count) {
    	mCount = count;
    	mCountDirty = true;
    }
    
    public long getCount() {
    	return mCount;
    }
    
    public CountrysumRecord() {
    	super(Countrysum.CONTENT_URI);
	}
	
	private CountrysumRecord(Parcel in) {
    	super(Countrysum.CONTENT_URI);
    	
		setId(in.readLong());
		
		mCountry = in.readString();
		mCount = in.readLong();
		
		boolean[] dirtyFlags = new boolean[2];
		in.readBooleanArray(dirtyFlags);
		mCountryDirty = dirtyFlags[0];
		mCountDirty = dirtyFlags[1];
	}
	
	@Override
	public int describeContents() {
	    return 0;
	}
	
	@Override
	public void writeToParcel(Parcel dest, int flags) {
		dest.writeLong(getId());
		dest.writeString(mCountry);
		dest.writeLong(mCount);
		dest.writeBooleanArray(new boolean[] {
			mCountryDirty,
			mCountDirty
		});
	}
	
	@Override
	protected AbstractValuesBuilder createBuilder() {
		Builder builder = Countrysum.newBuilder();

		if(mCountryDirty) {
			builder.setCountry(mCountry);
		}
		if(mCountDirty) {
			builder.setCount(mCount);
		}
		
		return builder;
	}
	
    @Override
	public void makeDirty(boolean dirty){
		mCountryDirty = dirty;
		mCountDirty = dirty;
	}

	@Override
	protected void setPropertiesFromCursor(Cursor c) {
		setId(c.getLong(Indices._ID));
		setCountry(c.getString(Indices.COUNTRY));
		setCount(c.getLong(Indices.COUNT));
	}
	
	public static CountrysumRecord fromCursor(Cursor c) {
	    CountrysumRecord item = new CountrysumRecord();
	    
		item.setPropertiesFromCursor(c);
		
		item.makeDirty(false);
		
	    return item;
	}
	
	public static CountrysumRecord fromBundle(Bundle bundle, String key) {
		bundle.setClassLoader(CountrysumRecord.class.getClassLoader());
		return bundle.getParcelable(key);
	}
	
	public static CountrysumRecord get(long id) {
	    Cursor c = null;
	    
	    ContentResolver resolver = Mechanoid.getContentResolver();
	    
	    try {
	        c = resolver.query(Countrysum.CONTENT_URI.buildUpon()
			.appendPath(String.valueOf(id)).build(), PROJECTION, null, null, null);
	        
	        if(!c.moveToFirst()) {
	            return null;
	        }
	        
	        return fromCursor(c);
	    } finally {
	        Closeables.closeSilently(c);
	    }
	}
}
