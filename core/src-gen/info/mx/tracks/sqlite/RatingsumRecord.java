/*
 * Generated by Robotoworks Mechanoid
 */
package info.mx.tracks.sqlite;

import android.content.ContentResolver;
import android.database.Cursor;
import android.os.Bundle;
import android.os.Parcel;
import android.os.Parcelable;
import android.net.Uri;
import info.mx.tracks.sqlite.MxInfoDBContract.Ratingsum;
import info.mx.tracks.sqlite.MxInfoDBContract.Ratingsum.Builder;
import com.robotoworks.mechanoid.util.Closeables;
import com.robotoworks.mechanoid.db.ActiveRecord;
import com.robotoworks.mechanoid.db.ActiveRecordFactory;
import com.robotoworks.mechanoid.Mechanoid;
import com.robotoworks.mechanoid.db.AbstractValuesBuilder;

public class RatingsumRecord extends ActiveRecord implements Parcelable {

	private static ActiveRecordFactory<RatingsumRecord> sFactory = new ActiveRecordFactory<RatingsumRecord>() {
		@Override
		public RatingsumRecord create(Cursor c) {
			return fromCursor(c);
		}
		
		@Override
		public String[] getProjection() {
			return PROJECTION;
		}

        @Override
                    public Uri getContentUri() {
                        return Ratingsum.CONTENT_URI;
                    }
                };

    			public static ActiveRecordFactory<RatingsumRecord> getFactory() {
		return sFactory;
	}

    public static final Parcelable.Creator<RatingsumRecord> CREATOR 
    	= new Parcelable.Creator<RatingsumRecord>() {
        public RatingsumRecord createFromParcel(Parcel in) {
            return new RatingsumRecord(in);
        }

        public RatingsumRecord[] newArray(int size) {
            return new RatingsumRecord[size];
        }
    };
    
    public static String[] PROJECTION = {
    	Ratingsum._ID,
    	Ratingsum.TRACK_REST_ID,
    	Ratingsum.RATINGCOUNT,
    	Ratingsum.RATINGAVG
    };
    
    public interface Indices {
    	int _ID = 0;
    	int TRACK_REST_ID = 1;
    	int RATINGCOUNT = 2;
    	int RATINGAVG = 3;
    }
    
    private long mTrackRestId;
    private boolean mTrackRestIdDirty;
    private long mRatingcount;
    private boolean mRatingcountDirty;
    private double mRatingavg;
    private boolean mRatingavgDirty;
    
    @Override
    protected String[] _getProjection() {
    	return PROJECTION;
    }
    
    public void setTrackRestId(long trackRestId) {
    	mTrackRestId = trackRestId;
    	mTrackRestIdDirty = true;
    }
    
    public long getTrackRestId() {
    	return mTrackRestId;
    }
    public void setRatingcount(long ratingcount) {
    	mRatingcount = ratingcount;
    	mRatingcountDirty = true;
    }
    
    public long getRatingcount() {
    	return mRatingcount;
    }
    public void setRatingavg(double ratingavg) {
    	mRatingavg = ratingavg;
    	mRatingavgDirty = true;
    }
    
    public double getRatingavg() {
    	return mRatingavg;
    }
    
    public RatingsumRecord() {
    	super(Ratingsum.CONTENT_URI);
	}
	
	private RatingsumRecord(Parcel in) {
    	super(Ratingsum.CONTENT_URI);
    	
		setId(in.readLong());
		
		mTrackRestId = in.readLong();
		mRatingcount = in.readLong();
		mRatingavg = in.readDouble();
		
		boolean[] dirtyFlags = new boolean[3];
		in.readBooleanArray(dirtyFlags);
		mTrackRestIdDirty = dirtyFlags[0];
		mRatingcountDirty = dirtyFlags[1];
		mRatingavgDirty = dirtyFlags[2];
	}
	
	@Override
	public int describeContents() {
	    return 0;
	}
	
	@Override
	public void writeToParcel(Parcel dest, int flags) {
		dest.writeLong(getId());
		dest.writeLong(mTrackRestId);
		dest.writeLong(mRatingcount);
		dest.writeDouble(mRatingavg);
		dest.writeBooleanArray(new boolean[] {
			mTrackRestIdDirty,
			mRatingcountDirty,
			mRatingavgDirty
		});
	}
	
	@Override
	protected AbstractValuesBuilder createBuilder() {
		Builder builder = Ratingsum.newBuilder();

		if(mTrackRestIdDirty) {
			builder.setTrackRestId(mTrackRestId);
		}
		if(mRatingcountDirty) {
			builder.setRatingcount(mRatingcount);
		}
		if(mRatingavgDirty) {
			builder.setRatingavg(mRatingavg);
		}
		
		return builder;
	}
	
    @Override
	public void makeDirty(boolean dirty){
		mTrackRestIdDirty = dirty;
		mRatingcountDirty = dirty;
		mRatingavgDirty = dirty;
	}

	@Override
	protected void setPropertiesFromCursor(Cursor c) {
		setId(c.getLong(Indices._ID));
		setTrackRestId(c.getLong(Indices.TRACK_REST_ID));
		setRatingcount(c.getLong(Indices.RATINGCOUNT));
		setRatingavg(c.getDouble(Indices.RATINGAVG));
	}
	
	public static RatingsumRecord fromCursor(Cursor c) {
	    RatingsumRecord item = new RatingsumRecord();
	    
		item.setPropertiesFromCursor(c);
		
		item.makeDirty(false);
		
	    return item;
	}
	
	public static RatingsumRecord fromBundle(Bundle bundle, String key) {
		bundle.setClassLoader(RatingsumRecord.class.getClassLoader());
		return bundle.getParcelable(key);
	}
	
	public static RatingsumRecord get(long id) {
	    Cursor c = null;
	    
	    ContentResolver resolver = Mechanoid.getContentResolver();
	    
	    try {
	        c = resolver.query(Ratingsum.CONTENT_URI.buildUpon()
			.appendPath(String.valueOf(id)).build(), PROJECTION, null, null, null);
	        
	        if(!c.moveToFirst()) {
	            return null;
	        }
	        
	        return fromCursor(c);
	    } finally {
	        Closeables.closeSilently(c);
	    }
	}
}
