/*
 * Generated by Robotoworks Mechanoid
 */
package info.mx.tracks.sqlite;

import android.content.ContentResolver;
import android.database.Cursor;
import android.os.Bundle;
import android.os.Parcel;
import android.os.Parcelable;
import android.net.Uri;
import info.mx.tracks.sqlite.MxInfoDBContract.Weather;
import info.mx.tracks.sqlite.MxInfoDBContract.Weather.Builder;
import com.robotoworks.mechanoid.util.Closeables;
import com.robotoworks.mechanoid.db.ActiveRecord;
import com.robotoworks.mechanoid.db.ActiveRecordFactory;
import com.robotoworks.mechanoid.Mechanoid;
import com.robotoworks.mechanoid.db.AbstractValuesBuilder;

public class WeatherRecord extends ActiveRecord implements Parcelable {

	private static ActiveRecordFactory<WeatherRecord> sFactory = new ActiveRecordFactory<WeatherRecord>() {
		@Override
		public WeatherRecord create(Cursor c) {
			return fromCursor(c);
		}
		
		@Override
		public String[] getProjection() {
			return PROJECTION;
		}

        @Override
                    public Uri getContentUri() {
                        return Weather.CONTENT_URI;
                    }
                };

    			public static ActiveRecordFactory<WeatherRecord> getFactory() {
		return sFactory;
	}

    public static final Parcelable.Creator<WeatherRecord> CREATOR 
    	= new Parcelable.Creator<WeatherRecord>() {
        public WeatherRecord createFromParcel(Parcel in) {
            return new WeatherRecord(in);
        }

        public WeatherRecord[] newArray(int size) {
            return new WeatherRecord[size];
        }
    };
    
    public static String[] PROJECTION = {
    	Weather._ID,
    	Weather.REST_ID,
    	Weather.TRACK_CLIENT_ID,
    	Weather.TYPE,
    	Weather.CONTENT,
    	Weather.DT,
    	Weather.CREATED
    };
    
    public interface Indices {
    	int _ID = 0;
    	int REST_ID = 1;
    	int TRACK_CLIENT_ID = 2;
    	int TYPE = 3;
    	int CONTENT = 4;
    	int DT = 5;
    	int CREATED = 6;
    }
    
    private long mRestId;
    private boolean mRestIdDirty;
    private long mTrackClientId;
    private boolean mTrackClientIdDirty;
    private String mType;
    private boolean mTypeDirty;
    private String mContent;
    private boolean mContentDirty;
    private long mDt;
    private boolean mDtDirty;
    private long mCreated;
    private boolean mCreatedDirty;
    
    @Override
    protected String[] _getProjection() {
    	return PROJECTION;
    }
    
    public void setRestId(long restId) {
    	mRestId = restId;
    	mRestIdDirty = true;
    }
    
    public long getRestId() {
    	return mRestId;
    }
    
    public void setTrackClientId(long trackClientId) {
    	mTrackClientId = trackClientId;
    	mTrackClientIdDirty = true;
    }
    
    public long getTrackClientId() {
    	return mTrackClientId;
    }
    
    public void setType(String type) {
    	mType = type;
    	mTypeDirty = true;
    }
    
    public String getType() {
    	return mType;
    }
    
    public void setContent(String content) {
    	mContent = content;
    	mContentDirty = true;
    }
    
    public String getContent() {
    	return mContent;
    }
    
    public void setDt(long dt) {
    	mDt = dt;
    	mDtDirty = true;
    }
    
    public long getDt() {
    	return mDt;
    }
    
    public void setCreated(long created) {
    	mCreated = created;
    	mCreatedDirty = true;
    }
    
    public long getCreated() {
    	return mCreated;
    }
    
    
    public WeatherRecord() {
    	super(Weather.CONTENT_URI);
	}
	
	private WeatherRecord(Parcel in) {
    	super(Weather.CONTENT_URI);
    	
		setId(in.readLong());
		
		mRestId = in.readLong();
		mTrackClientId = in.readLong();
		mType = in.readString();
		mContent = in.readString();
		mDt = in.readLong();
		mCreated = in.readLong();
		
		boolean[] dirtyFlags = new boolean[6];
		in.readBooleanArray(dirtyFlags);
		mRestIdDirty = dirtyFlags[0];
		mTrackClientIdDirty = dirtyFlags[1];
		mTypeDirty = dirtyFlags[2];
		mContentDirty = dirtyFlags[3];
		mDtDirty = dirtyFlags[4];
		mCreatedDirty = dirtyFlags[5];
	}
	
	@Override
	public int describeContents() {
	    return 0;
	}
	
	@Override
	public void writeToParcel(Parcel dest, int flags) {
		dest.writeLong(getId());
		dest.writeLong(mRestId);
		dest.writeLong(mTrackClientId);
		dest.writeString(mType);
		dest.writeString(mContent);
		dest.writeLong(mDt);
		dest.writeLong(mCreated);
		dest.writeBooleanArray(new boolean[] {
			mRestIdDirty,
			mTrackClientIdDirty,
			mTypeDirty,
			mContentDirty,
			mDtDirty,
			mCreatedDirty
		});
	}
	
	@Override
	protected AbstractValuesBuilder createBuilder() {
		Builder builder = Weather.newBuilder();

		if(mRestIdDirty) {
			builder.setRestId(mRestId);
		}
		if(mTrackClientIdDirty) {
			builder.setTrackClientId(mTrackClientId);
		}
		if(mTypeDirty) {
			builder.setType(mType);
		}
		if(mContentDirty) {
			builder.setContent(mContent);
		}
		if(mDtDirty) {
			builder.setDt(mDt);
		}
		if(mCreatedDirty) {
			builder.setCreated(mCreated);
		}
		
		return builder;
	}
	
    @Override
	public void makeDirty(boolean dirty){
		mRestIdDirty = dirty;
		mTrackClientIdDirty = dirty;
		mTypeDirty = dirty;
		mContentDirty = dirty;
		mDtDirty = dirty;
		mCreatedDirty = dirty;
	}

	@Override
	protected void setPropertiesFromCursor(Cursor c) {
		setId(c.getLong(Indices._ID));
		setRestId(c.getLong(Indices.REST_ID));
		setTrackClientId(c.getLong(Indices.TRACK_CLIENT_ID));
		setType(c.getString(Indices.TYPE));
		setContent(c.getString(Indices.CONTENT));
		setDt(c.getLong(Indices.DT));
		setCreated(c.getLong(Indices.CREATED));
	}
	
	public static WeatherRecord fromCursor(Cursor c) {
	    WeatherRecord item = new WeatherRecord();
	    
		item.setPropertiesFromCursor(c);
		
		item.makeDirty(false);
		
	    return item;
	}
	
	public static WeatherRecord fromBundle(Bundle bundle, String key) {
		bundle.setClassLoader(WeatherRecord.class.getClassLoader());
		return bundle.getParcelable(key);
	}
	
	public static WeatherRecord get(long id) {
	    Cursor c = null;
	    
	    ContentResolver resolver = Mechanoid.getContentResolver();
	    
	    try {
	        c = resolver.query(Weather.CONTENT_URI.buildUpon()
			.appendPath(String.valueOf(id)).build(), PROJECTION, null, null, null);
	        
	        if(!c.moveToFirst()) {
	            return null;
	        }
	        
	        return fromCursor(c);
	    } finally {
	        Closeables.closeSilently(c);
	    }
	}
}
