/*
 * Generated by Robotoworks Mechanoid
 */
package info.mx.tracks.sqlite;

import android.content.ContentResolver;
import android.database.Cursor;
import android.os.Bundle;
import android.os.Parcel;
import android.os.Parcelable;
import android.net.Uri;
import info.mx.tracks.sqlite.MxInfoDBContract.UserActivity;
import info.mx.tracks.sqlite.MxInfoDBContract.UserActivity.Builder;
import com.robotoworks.mechanoid.util.Closeables;
import com.robotoworks.mechanoid.db.ActiveRecord;
import com.robotoworks.mechanoid.db.ActiveRecordFactory;
import com.robotoworks.mechanoid.Mechanoid;
import com.robotoworks.mechanoid.db.AbstractValuesBuilder;

public class UserActivityRecord extends ActiveRecord implements Parcelable {

	private static ActiveRecordFactory<UserActivityRecord> sFactory = new ActiveRecordFactory<UserActivityRecord>() {
		@Override
		public UserActivityRecord create(Cursor c) {
			return fromCursor(c);
		}
		
		@Override
		public String[] getProjection() {
			return PROJECTION;
		}

        @Override
                    public Uri getContentUri() {
                        return UserActivity.CONTENT_URI;
                    }
                };

    			public static ActiveRecordFactory<UserActivityRecord> getFactory() {
		return sFactory;
	}

    public static final Parcelable.Creator<UserActivityRecord> CREATOR 
    	= new Parcelable.Creator<UserActivityRecord>() {
        public UserActivityRecord createFromParcel(Parcel in) {
            return new UserActivityRecord(in);
        }

        public UserActivityRecord[] newArray(int size) {
            return new UserActivityRecord[size];
        }
    };
    
    public static String[] PROJECTION = {
    	UserActivity._ID,
    	UserActivity.ANDROIDID,
    	UserActivity.APPROVED,
    	UserActivity.CNT
    };
    
    public interface Indices {
    	int _ID = 0;
    	int ANDROIDID = 1;
    	int APPROVED = 2;
    	int CNT = 3;
    }
    
    private String mAndroidid;
    private boolean mAndroididDirty;
    private long mApproved;
    private boolean mApprovedDirty;
    private long mCnt;
    private boolean mCntDirty;
    
    @Override
    protected String[] _getProjection() {
    	return PROJECTION;
    }
    
    public void setAndroidid(String androidid) {
    	mAndroidid = androidid;
    	mAndroididDirty = true;
    }
    
    public String getAndroidid() {
    	return mAndroidid;
    }
    public void setApproved(long approved) {
    	mApproved = approved;
    	mApprovedDirty = true;
    }
    
    public long getApproved() {
    	return mApproved;
    }
    public void setCnt(long cnt) {
    	mCnt = cnt;
    	mCntDirty = true;
    }
    
    public long getCnt() {
    	return mCnt;
    }
    
    public UserActivityRecord() {
    	super(UserActivity.CONTENT_URI);
	}
	
	private UserActivityRecord(Parcel in) {
    	super(UserActivity.CONTENT_URI);
    	
		setId(in.readLong());
		
		mAndroidid = in.readString();
		mApproved = in.readLong();
		mCnt = in.readLong();
		
		boolean[] dirtyFlags = new boolean[3];
		in.readBooleanArray(dirtyFlags);
		mAndroididDirty = dirtyFlags[0];
		mApprovedDirty = dirtyFlags[1];
		mCntDirty = dirtyFlags[2];
	}
	
	@Override
	public int describeContents() {
	    return 0;
	}
	
	@Override
	public void writeToParcel(Parcel dest, int flags) {
		dest.writeLong(getId());
		dest.writeString(mAndroidid);
		dest.writeLong(mApproved);
		dest.writeLong(mCnt);
		dest.writeBooleanArray(new boolean[] {
			mAndroididDirty,
			mApprovedDirty,
			mCntDirty
		});
	}
	
	@Override
	protected AbstractValuesBuilder createBuilder() {
		Builder builder = UserActivity.newBuilder();

		if(mAndroididDirty) {
			builder.setAndroidid(mAndroidid);
		}
		if(mApprovedDirty) {
			builder.setApproved(mApproved);
		}
		if(mCntDirty) {
			builder.setCnt(mCnt);
		}
		
		return builder;
	}
	
    @Override
	public void makeDirty(boolean dirty){
		mAndroididDirty = dirty;
		mApprovedDirty = dirty;
		mCntDirty = dirty;
	}

	@Override
	protected void setPropertiesFromCursor(Cursor c) {
		setId(c.getLong(Indices._ID));
		setAndroidid(c.getString(Indices.ANDROIDID));
		setApproved(c.getLong(Indices.APPROVED));
		setCnt(c.getLong(Indices.CNT));
	}
	
	public static UserActivityRecord fromCursor(Cursor c) {
	    UserActivityRecord item = new UserActivityRecord();
	    
		item.setPropertiesFromCursor(c);
		
		item.makeDirty(false);
		
	    return item;
	}
	
	public static UserActivityRecord fromBundle(Bundle bundle, String key) {
		bundle.setClassLoader(UserActivityRecord.class.getClassLoader());
		return bundle.getParcelable(key);
	}
	
	public static UserActivityRecord get(long id) {
	    Cursor c = null;
	    
	    ContentResolver resolver = Mechanoid.getContentResolver();
	    
	    try {
	        c = resolver.query(UserActivity.CONTENT_URI.buildUpon()
			.appendPath(String.valueOf(id)).build(), PROJECTION, null, null, null);
	        
	        if(!c.moveToFirst()) {
	            return null;
	        }
	        
	        return fromCursor(c);
	    } finally {
	        Closeables.closeSilently(c);
	    }
	}
}
