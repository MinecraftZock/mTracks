/*
 * Generated by Robotoworks Mechanoid
 */
package info.mx.tracks.sqlite;

import android.content.ContentResolver;
import android.database.Cursor;
import android.os.Bundle;
import android.os.Parcel;
import android.os.Parcelable;
import android.net.Uri;
import info.mx.tracks.sqlite.MxInfoDBContract.Series;
import info.mx.tracks.sqlite.MxInfoDBContract.Series.Builder;
import com.robotoworks.mechanoid.util.Closeables;
import com.robotoworks.mechanoid.db.ActiveRecord;
import com.robotoworks.mechanoid.db.ActiveRecordFactory;
import com.robotoworks.mechanoid.Mechanoid;
import com.robotoworks.mechanoid.db.AbstractValuesBuilder;

public class SeriesRecord extends ActiveRecord implements Parcelable {

	private static ActiveRecordFactory<SeriesRecord> sFactory = new ActiveRecordFactory<SeriesRecord>() {
		@Override
		public SeriesRecord create(Cursor c) {
			return fromCursor(c);
		}
		
		@Override
		public String[] getProjection() {
			return PROJECTION;
		}

        @Override
                    public Uri getContentUri() {
                        return Series.CONTENT_URI;
                    }
                };

    			public static ActiveRecordFactory<SeriesRecord> getFactory() {
		return sFactory;
	}

    public static final Parcelable.Creator<SeriesRecord> CREATOR 
    	= new Parcelable.Creator<SeriesRecord>() {
        public SeriesRecord createFromParcel(Parcel in) {
            return new SeriesRecord(in);
        }

        public SeriesRecord[] newArray(int size) {
            return new SeriesRecord[size];
        }
    };
    
    public static String[] PROJECTION = {
    	Series._ID,
    	Series.REST_ID,
    	Series.CHANGED,
    	Series.NAME,
    	Series.SERIES_URL
    };
    
    public interface Indices {
    	int _ID = 0;
    	int REST_ID = 1;
    	int CHANGED = 2;
    	int NAME = 3;
    	int SERIES_URL = 4;
    }
    
    private long mRestId;
    private boolean mRestIdDirty;
    private long mChanged;
    private boolean mChangedDirty;
    private String mName;
    private boolean mNameDirty;
    private String mSeriesUrl;
    private boolean mSeriesUrlDirty;
    
    @Override
    protected String[] _getProjection() {
    	return PROJECTION;
    }
    
    public void setRestId(long restId) {
    	mRestId = restId;
    	mRestIdDirty = true;
    }
    
    public long getRestId() {
    	return mRestId;
    }
    
    public void setChanged(long changed) {
    	mChanged = changed;
    	mChangedDirty = true;
    }
    
    public long getChanged() {
    	return mChanged;
    }
    
    public void setName(String name) {
    	mName = name;
    	mNameDirty = true;
    }
    
    public String getName() {
    	return mName;
    }
    
    public void setSeriesUrl(String seriesUrl) {
    	mSeriesUrl = seriesUrl;
    	mSeriesUrlDirty = true;
    }
    
    public String getSeriesUrl() {
    	return mSeriesUrl;
    }
    
    
    public SeriesRecord() {
    	super(Series.CONTENT_URI);
	}
	
	private SeriesRecord(Parcel in) {
    	super(Series.CONTENT_URI);
    	
		setId(in.readLong());
		
		mRestId = in.readLong();
		mChanged = in.readLong();
		mName = in.readString();
		mSeriesUrl = in.readString();
		
		boolean[] dirtyFlags = new boolean[4];
		in.readBooleanArray(dirtyFlags);
		mRestIdDirty = dirtyFlags[0];
		mChangedDirty = dirtyFlags[1];
		mNameDirty = dirtyFlags[2];
		mSeriesUrlDirty = dirtyFlags[3];
	}
	
	@Override
	public int describeContents() {
	    return 0;
	}
	
	@Override
	public void writeToParcel(Parcel dest, int flags) {
		dest.writeLong(getId());
		dest.writeLong(mRestId);
		dest.writeLong(mChanged);
		dest.writeString(mName);
		dest.writeString(mSeriesUrl);
		dest.writeBooleanArray(new boolean[] {
			mRestIdDirty,
			mChangedDirty,
			mNameDirty,
			mSeriesUrlDirty
		});
	}
	
	@Override
	protected AbstractValuesBuilder createBuilder() {
		Builder builder = Series.newBuilder();

		if(mRestIdDirty) {
			builder.setRestId(mRestId);
		}
		if(mChangedDirty) {
			builder.setChanged(mChanged);
		}
		if(mNameDirty) {
			builder.setName(mName);
		}
		if(mSeriesUrlDirty) {
			builder.setSeriesUrl(mSeriesUrl);
		}
		
		return builder;
	}
	
    @Override
	public void makeDirty(boolean dirty){
		mRestIdDirty = dirty;
		mChangedDirty = dirty;
		mNameDirty = dirty;
		mSeriesUrlDirty = dirty;
	}

	@Override
	protected void setPropertiesFromCursor(Cursor c) {
		setId(c.getLong(Indices._ID));
		setRestId(c.getLong(Indices.REST_ID));
		setChanged(c.getLong(Indices.CHANGED));
		setName(c.getString(Indices.NAME));
		setSeriesUrl(c.getString(Indices.SERIES_URL));
	}
	
	public static SeriesRecord fromCursor(Cursor c) {
	    SeriesRecord item = new SeriesRecord();
	    
		item.setPropertiesFromCursor(c);
		
		item.makeDirty(false);
		
	    return item;
	}
	
	public static SeriesRecord fromBundle(Bundle bundle, String key) {
		bundle.setClassLoader(SeriesRecord.class.getClassLoader());
		return bundle.getParcelable(key);
	}
	
	public static SeriesRecord get(long id) {
	    Cursor c = null;
	    
	    ContentResolver resolver = Mechanoid.getContentResolver();
	    
	    try {
	        c = resolver.query(Series.CONTENT_URI.buildUpon()
			.appendPath(String.valueOf(id)).build(), PROJECTION, null, null, null);
	        
	        if(!c.moveToFirst()) {
	            return null;
	        }
	        
	        return fromCursor(c);
	    } finally {
	        Closeables.closeSilently(c);
	    }
	}
}
