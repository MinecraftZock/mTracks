/*
 * Generated by Robotoworks Mechanoid
 */
package info.mx.tracks.sqlite;

import android.content.ContentResolver;
import android.database.Cursor;
import android.os.Bundle;
import android.os.Parcel;
import android.os.Parcelable;
import android.net.Uri;
import info.mx.tracks.sqlite.MxInfoDBContract.Message;
import info.mx.tracks.sqlite.MxInfoDBContract.Message.Builder;
import com.robotoworks.mechanoid.util.Closeables;
import com.robotoworks.mechanoid.db.ActiveRecord;
import com.robotoworks.mechanoid.db.ActiveRecordFactory;
import com.robotoworks.mechanoid.Mechanoid;
import com.robotoworks.mechanoid.db.AbstractValuesBuilder;

public class MessageRecord extends ActiveRecord implements Parcelable {

	private static ActiveRecordFactory<MessageRecord> sFactory = new ActiveRecordFactory<MessageRecord>() {
		@Override
		public MessageRecord create(Cursor c) {
			return fromCursor(c);
		}
		
		@Override
		public String[] getProjection() {
			return PROJECTION;
		}

        @Override
                    public Uri getContentUri() {
                        return Message.CONTENT_URI;
                    }
                };

    			public static ActiveRecordFactory<MessageRecord> getFactory() {
		return sFactory;
	}

    public static final Parcelable.Creator<MessageRecord> CREATOR 
    	= new Parcelable.Creator<MessageRecord>() {
        public MessageRecord createFromParcel(Parcel in) {
            return new MessageRecord(in);
        }

        public MessageRecord[] newArray(int size) {
            return new MessageRecord[size];
        }
    };
    
    public static String[] PROJECTION = {
    	Message._ID,
    	Message.REST_ID,
    	Message.CHANGED,
    	Message.ANDROIDID,
    	Message.READ,
    	Message.MSG
    };
    
    public interface Indices {
    	int _ID = 0;
    	int REST_ID = 1;
    	int CHANGED = 2;
    	int ANDROIDID = 3;
    	int READ = 4;
    	int MSG = 5;
    }
    
    private long mRestId;
    private boolean mRestIdDirty;
    private long mChanged;
    private boolean mChangedDirty;
    private String mAndroidid;
    private boolean mAndroididDirty;
    private long mRead;
    private boolean mReadDirty;
    private String mMsg;
    private boolean mMsgDirty;
    
    @Override
    protected String[] _getProjection() {
    	return PROJECTION;
    }
    
    public void setRestId(long restId) {
    	mRestId = restId;
    	mRestIdDirty = true;
    }
    
    public long getRestId() {
    	return mRestId;
    }
    
    public void setChanged(long changed) {
    	mChanged = changed;
    	mChangedDirty = true;
    }
    
    public long getChanged() {
    	return mChanged;
    }
    
    public void setAndroidid(String androidid) {
    	mAndroidid = androidid;
    	mAndroididDirty = true;
    }
    
    public String getAndroidid() {
    	return mAndroidid;
    }
    
    public void setRead(long read) {
    	mRead = read;
    	mReadDirty = true;
    }
    
    public long getRead() {
    	return mRead;
    }
    
    public void setMsg(String msg) {
    	mMsg = msg;
    	mMsgDirty = true;
    }
    
    public String getMsg() {
    	return mMsg;
    }
    
    
    public MessageRecord() {
    	super(Message.CONTENT_URI);
	}
	
	private MessageRecord(Parcel in) {
    	super(Message.CONTENT_URI);
    	
		setId(in.readLong());
		
		mRestId = in.readLong();
		mChanged = in.readLong();
		mAndroidid = in.readString();
		mRead = in.readLong();
		mMsg = in.readString();
		
		boolean[] dirtyFlags = new boolean[5];
		in.readBooleanArray(dirtyFlags);
		mRestIdDirty = dirtyFlags[0];
		mChangedDirty = dirtyFlags[1];
		mAndroididDirty = dirtyFlags[2];
		mReadDirty = dirtyFlags[3];
		mMsgDirty = dirtyFlags[4];
	}
	
	@Override
	public int describeContents() {
	    return 0;
	}
	
	@Override
	public void writeToParcel(Parcel dest, int flags) {
		dest.writeLong(getId());
		dest.writeLong(mRestId);
		dest.writeLong(mChanged);
		dest.writeString(mAndroidid);
		dest.writeLong(mRead);
		dest.writeString(mMsg);
		dest.writeBooleanArray(new boolean[] {
			mRestIdDirty,
			mChangedDirty,
			mAndroididDirty,
			mReadDirty,
			mMsgDirty
		});
	}
	
	@Override
	protected AbstractValuesBuilder createBuilder() {
		Builder builder = Message.newBuilder();

		if(mRestIdDirty) {
			builder.setRestId(mRestId);
		}
		if(mChangedDirty) {
			builder.setChanged(mChanged);
		}
		if(mAndroididDirty) {
			builder.setAndroidid(mAndroidid);
		}
		if(mReadDirty) {
			builder.setRead(mRead);
		}
		if(mMsgDirty) {
			builder.setMsg(mMsg);
		}
		
		return builder;
	}
	
    @Override
	public void makeDirty(boolean dirty){
		mRestIdDirty = dirty;
		mChangedDirty = dirty;
		mAndroididDirty = dirty;
		mReadDirty = dirty;
		mMsgDirty = dirty;
	}

	@Override
	protected void setPropertiesFromCursor(Cursor c) {
		setId(c.getLong(Indices._ID));
		setRestId(c.getLong(Indices.REST_ID));
		setChanged(c.getLong(Indices.CHANGED));
		setAndroidid(c.getString(Indices.ANDROIDID));
		setRead(c.getLong(Indices.READ));
		setMsg(c.getString(Indices.MSG));
	}
	
	public static MessageRecord fromCursor(Cursor c) {
	    MessageRecord item = new MessageRecord();
	    
		item.setPropertiesFromCursor(c);
		
		item.makeDirty(false);
		
	    return item;
	}
	
	public static MessageRecord fromBundle(Bundle bundle, String key) {
		bundle.setClassLoader(MessageRecord.class.getClassLoader());
		return bundle.getParcelable(key);
	}
	
	public static MessageRecord get(long id) {
	    Cursor c = null;
	    
	    ContentResolver resolver = Mechanoid.getContentResolver();
	    
	    try {
	        c = resolver.query(Message.CONTENT_URI.buildUpon()
			.appendPath(String.valueOf(id)).build(), PROJECTION, null, null, null);
	        
	        if(!c.moveToFirst()) {
	            return null;
	        }
	        
	        return fromCursor(c);
	    } finally {
	        Closeables.closeSilently(c);
	    }
	}
}
