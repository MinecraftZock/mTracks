/*
 * Generated by Robotoworks Mechanoid
 */
package info.mx.tracks.ops;

import com.robotoworks.mechanoid.Mechanoid;
import com.robotoworks.mechanoid.ops.Operation;
import com.robotoworks.mechanoid.ops.OperationContext;
import com.robotoworks.mechanoid.ops.OperationResult;
import com.robotoworks.mechanoid.ops.OperationServiceBridge;
import com.robotoworks.mechanoid.ops.OperationConfiguration;
import android.content.Intent;
import android.os.Bundle;

public abstract class AbstractOpPostTrackAppovedOperation extends Operation {
	public static final String ACTION_OP_POST_TRACK_APPOVED = "info.mx.tracks.ops.MxInfoService.actions.OP_POST_TRACK_APPOVED";

	public static final String EXTRA_TRACK_ID = "info.mx.tracks.ops.MxInfoService.extras.TRACK_ID";
	public static final String EXTRA_STATUS = "info.mx.tracks.ops.MxInfoService.extras.STATUS";

	static class Args {
		public long trackId;
		public int status;
	}
	
	static class Configuration extends OperationConfiguration {
		@Override 
		public Operation createOperation() {
			return new OpPostTrackAppovedOperation();
		}
		
		@Override
		public Intent findMatchOnConstraint(OperationServiceBridge bridge, Intent intent) {
			Intent existingRequest = bridge.findPendingRequestByActionWithExtras(AbstractOpPostTrackAppovedOperation.ACTION_OP_POST_TRACK_APPOVED, intent.getExtras());
			
			return existingRequest;
			
		}
	}
	
	public static final Intent newIntent(long trackId, int status) {
		Intent intent = new Intent(ACTION_OP_POST_TRACK_APPOVED);
		intent.setClass(Mechanoid.getApplicationContext(), MxInfoService.class);
		
		Bundle extras = new Bundle();
		extras.putLong(EXTRA_TRACK_ID, trackId);
		extras.putInt(EXTRA_STATUS, status);
		
		intent.putExtras(extras);
		
		return intent;
		
	}

	@Override
	public OperationResult execute(OperationContext context) {
		Args args = new Args();
		
		Bundle extras = context.getIntent().getExtras();
		args.trackId = extras.getLong(EXTRA_TRACK_ID);
		args.status = extras.getInt(EXTRA_STATUS);
		
		return onExecute(context, args);
	}
			
	protected abstract OperationResult onExecute(OperationContext context, Args args);
}
