/*
 * Generated by Robotoworks Mechanoid
 */
package info.hannes.mechadmin_gen.sqlite;

import android.content.ContentResolver;
import android.database.Cursor;
import android.net.Uri;
import android.os.Bundle;
import android.os.Parcel;
import android.os.Parcelable;

import com.robotoworks.mechanoid.Mechanoid;
import com.robotoworks.mechanoid.db.AbstractValuesBuilder;
import com.robotoworks.mechanoid.db.ActiveRecord;
import com.robotoworks.mechanoid.db.ActiveRecordFactory;
import com.robotoworks.mechanoid.util.Closeables;

import info.hannes.mechadmin_gen.sqlite.MxCalContract.MxTrack;
import info.hannes.mechadmin_gen.sqlite.MxCalContract.MxTrack.Builder;

public class MxTrackRecord extends ActiveRecord implements Parcelable {

	private static ActiveRecordFactory<MxTrackRecord> sFactory = new ActiveRecordFactory<MxTrackRecord>() {
		@Override
		public MxTrackRecord create(Cursor c) {
			return fromCursor(c);
		}

		@Override
		public Uri getContentUri() {
			return MxTrack.CONTENT_URI;
		}
		
		@Override
		public String[] getProjection() {
			return PROJECTION;
		}
	};
	
	public static ActiveRecordFactory<MxTrackRecord> getFactory() {
		return sFactory;
	}

    public static final Creator<MxTrackRecord> CREATOR
    	= new Creator<MxTrackRecord>() {
        public MxTrackRecord createFromParcel(Parcel in) {
            return new MxTrackRecord(in);
        }

        public MxTrackRecord[] newArray(int size) {
            return new MxTrackRecord[size];
        }
    };
    
    public static String[] PROJECTION = {
    	MxTrack._ID,
    	MxTrack.REST_ID,
    	MxTrack.WEB_ID,
    	MxTrack.CREATED_AT,
    	MxTrack.UPDATED_AT,
    	MxTrack.ADDRESS,
    	MxTrack.CITY,
    	MxTrack.EMAIL,
    	MxTrack.NAME,
    	MxTrack.PHONE,
    	MxTrack.STATE_CODE,
    	MxTrack.WEBSITE,
    	MxTrack.ZIP,
    	MxTrack.QUELLFILE_ID,
    	MxTrack.LAT,
    	MxTrack.LNG
    };
    
    public interface Indices {
    	int _ID = 0;
    	int REST_ID = 1;
    	int WEB_ID = 2;
    	int CREATED_AT = 3;
    	int UPDATED_AT = 4;
    	int ADDRESS = 5;
    	int CITY = 6;
    	int EMAIL = 7;
    	int NAME = 8;
    	int PHONE = 9;
    	int STATE_CODE = 10;
    	int WEBSITE = 11;
    	int ZIP = 12;
    	int QUELLFILE_ID = 13;
    	int LAT = 14;
    	int LNG = 15;
    }
    
    private long mRestId;
    private boolean mRestIdDirty;
    private long mWebId;
    private boolean mWebIdDirty;
    private long mCreatedAt;
    private boolean mCreatedAtDirty;
    private long mUpdatedAt;
    private boolean mUpdatedAtDirty;
    private String mAddress;
    private boolean mAddressDirty;
    private String mCity;
    private boolean mCityDirty;
    private String mEmail;
    private boolean mEmailDirty;
    private String mName;
    private boolean mNameDirty;
    private String mPhone;
    private boolean mPhoneDirty;
    private String mStateCode;
    private boolean mStateCodeDirty;
    private String mWebsite;
    private boolean mWebsiteDirty;
    private long mZip;
    private boolean mZipDirty;
    private long mQuellfileId;
    private boolean mQuellfileIdDirty;
    private double mLat;
    private boolean mLatDirty;
    private double mLng;
    private boolean mLngDirty;
    
    @Override
    protected String[] _getProjection() {
    	return PROJECTION;
    }
    
    public void setRestId(long restId) {
    	mRestId = restId;
    	mRestIdDirty = true;
    }
    
    public long getRestId() {
    	return mRestId;
    }
    
    public void setWebId(long webId) {
    	mWebId = webId;
    	mWebIdDirty = true;
    }
    
    public long getWebId() {
    	return mWebId;
    }
    
    public void setCreatedAt(long createdAt) {
    	mCreatedAt = createdAt;
    	mCreatedAtDirty = true;
    }
    
    public long getCreatedAt() {
    	return mCreatedAt;
    }
    
    public void setUpdatedAt(long updatedAt) {
    	mUpdatedAt = updatedAt;
    	mUpdatedAtDirty = true;
    }
    
    public long getUpdatedAt() {
    	return mUpdatedAt;
    }
    
    public void setAddress(String address) {
    	mAddress = address;
    	mAddressDirty = true;
    }
    
    public String getAddress() {
    	return mAddress;
    }
    
    public void setCity(String city) {
    	mCity = city;
    	mCityDirty = true;
    }
    
    public String getCity() {
    	return mCity;
    }
    
    public void setEmail(String email) {
    	mEmail = email;
    	mEmailDirty = true;
    }
    
    public String getEmail() {
    	return mEmail;
    }
    
    public void setName(String name) {
    	mName = name;
    	mNameDirty = true;
    }
    
    public String getName() {
    	return mName;
    }
    
    public void setPhone(String phone) {
    	mPhone = phone;
    	mPhoneDirty = true;
    }
    
    public String getPhone() {
    	return mPhone;
    }
    
    public void setStateCode(String stateCode) {
    	mStateCode = stateCode;
    	mStateCodeDirty = true;
    }
    
    public String getStateCode() {
    	return mStateCode;
    }
    
    public void setWebsite(String website) {
    	mWebsite = website;
    	mWebsiteDirty = true;
    }
    
    public String getWebsite() {
    	return mWebsite;
    }
    
    public void setZip(long zip) {
    	mZip = zip;
    	mZipDirty = true;
    }
    
    public long getZip() {
    	return mZip;
    }
    
    public void setQuellfileId(long quellfileId) {
    	mQuellfileId = quellfileId;
    	mQuellfileIdDirty = true;
    }
    
    public long getQuellfileId() {
    	return mQuellfileId;
    }
    
    public void setLat(double lat) {
    	mLat = lat;
    	mLatDirty = true;
    }
    
    public double getLat() {
    	return mLat;
    }
    
    public void setLng(double lng) {
    	mLng = lng;
    	mLngDirty = true;
    }
    
    public double getLng() {
    	return mLng;
    }
    
    
    public MxTrackRecord() {
    	super(MxTrack.CONTENT_URI);
	}
	
	private MxTrackRecord(Parcel in) {
    	super(MxTrack.CONTENT_URI);
    	
		setId(in.readLong());
		
		mRestId = in.readLong();
		mWebId = in.readLong();
		mCreatedAt = in.readLong();
		mUpdatedAt = in.readLong();
		mAddress = in.readString();
		mCity = in.readString();
		mEmail = in.readString();
		mName = in.readString();
		mPhone = in.readString();
		mStateCode = in.readString();
		mWebsite = in.readString();
		mZip = in.readLong();
		mQuellfileId = in.readLong();
		mLat = in.readDouble();
		mLng = in.readDouble();
		
		boolean[] dirtyFlags = new boolean[15];
		in.readBooleanArray(dirtyFlags);
		mRestIdDirty = dirtyFlags[0];
		mWebIdDirty = dirtyFlags[1];
		mCreatedAtDirty = dirtyFlags[2];
		mUpdatedAtDirty = dirtyFlags[3];
		mAddressDirty = dirtyFlags[4];
		mCityDirty = dirtyFlags[5];
		mEmailDirty = dirtyFlags[6];
		mNameDirty = dirtyFlags[7];
		mPhoneDirty = dirtyFlags[8];
		mStateCodeDirty = dirtyFlags[9];
		mWebsiteDirty = dirtyFlags[10];
		mZipDirty = dirtyFlags[11];
		mQuellfileIdDirty = dirtyFlags[12];
		mLatDirty = dirtyFlags[13];
		mLngDirty = dirtyFlags[14];
	}
	
	@Override
	public int describeContents() {
	    return 0;
	}
	
	@Override
	public void writeToParcel(Parcel dest, int flags) {
		dest.writeLong(getId());
		dest.writeLong(mRestId);
		dest.writeLong(mWebId);
		dest.writeLong(mCreatedAt);
		dest.writeLong(mUpdatedAt);
		dest.writeString(mAddress);
		dest.writeString(mCity);
		dest.writeString(mEmail);
		dest.writeString(mName);
		dest.writeString(mPhone);
		dest.writeString(mStateCode);
		dest.writeString(mWebsite);
		dest.writeLong(mZip);
		dest.writeLong(mQuellfileId);
		dest.writeDouble(mLat);
		dest.writeDouble(mLng);
		dest.writeBooleanArray(new boolean[] {
			mRestIdDirty,
			mWebIdDirty,
			mCreatedAtDirty,
			mUpdatedAtDirty,
			mAddressDirty,
			mCityDirty,
			mEmailDirty,
			mNameDirty,
			mPhoneDirty,
			mStateCodeDirty,
			mWebsiteDirty,
			mZipDirty,
			mQuellfileIdDirty,
			mLatDirty,
			mLngDirty
		});
	}
	
	@Override
	protected AbstractValuesBuilder createBuilder() {
		Builder builder = MxTrack.newBuilder();

		if(mRestIdDirty) {
			builder.setRestId(mRestId);
		}
		if(mWebIdDirty) {
			builder.setWebId(mWebId);
		}
		if(mCreatedAtDirty) {
			builder.setCreatedAt(mCreatedAt);
		}
		if(mUpdatedAtDirty) {
			builder.setUpdatedAt(mUpdatedAt);
		}
		if(mAddressDirty) {
			builder.setAddress(mAddress);
		}
		if(mCityDirty) {
			builder.setCity(mCity);
		}
		if(mEmailDirty) {
			builder.setEmail(mEmail);
		}
		if(mNameDirty) {
			builder.setName(mName);
		}
		if(mPhoneDirty) {
			builder.setPhone(mPhone);
		}
		if(mStateCodeDirty) {
			builder.setStateCode(mStateCode);
		}
		if(mWebsiteDirty) {
			builder.setWebsite(mWebsite);
		}
		if(mZipDirty) {
			builder.setZip(mZip);
		}
		if(mQuellfileIdDirty) {
			builder.setQuellfileId(mQuellfileId);
		}
		if(mLatDirty) {
			builder.setLat(mLat);
		}
		if(mLngDirty) {
			builder.setLng(mLng);
		}
		
		return builder;
	}
	
    @Override
	public void makeDirty(boolean dirty){
		mRestIdDirty = dirty;
		mWebIdDirty = dirty;
		mCreatedAtDirty = dirty;
		mUpdatedAtDirty = dirty;
		mAddressDirty = dirty;
		mCityDirty = dirty;
		mEmailDirty = dirty;
		mNameDirty = dirty;
		mPhoneDirty = dirty;
		mStateCodeDirty = dirty;
		mWebsiteDirty = dirty;
		mZipDirty = dirty;
		mQuellfileIdDirty = dirty;
		mLatDirty = dirty;
		mLngDirty = dirty;
	}

	@Override
	protected void setPropertiesFromCursor(Cursor c) {
		setId(c.getLong(Indices._ID));
		setRestId(c.getLong(Indices.REST_ID));
		setWebId(c.getLong(Indices.WEB_ID));
		setCreatedAt(c.getLong(Indices.CREATED_AT));
		setUpdatedAt(c.getLong(Indices.UPDATED_AT));
		setAddress(c.getString(Indices.ADDRESS));
		setCity(c.getString(Indices.CITY));
		setEmail(c.getString(Indices.EMAIL));
		setName(c.getString(Indices.NAME));
		setPhone(c.getString(Indices.PHONE));
		setStateCode(c.getString(Indices.STATE_CODE));
		setWebsite(c.getString(Indices.WEBSITE));
		setZip(c.getLong(Indices.ZIP));
		setQuellfileId(c.getLong(Indices.QUELLFILE_ID));
		setLat(c.getDouble(Indices.LAT));
		setLng(c.getDouble(Indices.LNG));
	}
	
	public static MxTrackRecord fromCursor(Cursor c) {
	    MxTrackRecord item = new MxTrackRecord();
	    
		item.setPropertiesFromCursor(c);
		
		item.makeDirty(false);
		
	    return item;
	}
	
	public static MxTrackRecord fromBundle(Bundle bundle, String key) {
		bundle.setClassLoader(MxTrackRecord.class.getClassLoader());
		return bundle.getParcelable(key);
	}
	
	public static MxTrackRecord get(long id) {
	    Cursor c = null;
	    
	    ContentResolver resolver = Mechanoid.getContentResolver();
	    
	    try {
	        c = resolver.query(MxTrack.CONTENT_URI.buildUpon()
			.appendPath(String.valueOf(id)).build(), PROJECTION, null, null, null);
	        
	        if(!c.moveToFirst()) {
	            return null;
	        }
	        
	        return fromCursor(c);
	    } finally {
	        Closeables.closeSilently(c);
	    }
	}
}
