/*
 * Generated by Robotoworks Mechanoid
 */
package info.hannes.mechadmin_gen.sqlite;

import android.content.ContentResolver;
import android.database.Cursor;
import android.net.Uri;
import android.os.Bundle;
import android.os.Parcel;
import android.os.Parcelable;

import com.robotoworks.mechanoid.Mechanoid;
import com.robotoworks.mechanoid.db.AbstractValuesBuilder;
import com.robotoworks.mechanoid.db.ActiveRecord;
import com.robotoworks.mechanoid.db.ActiveRecordFactory;
import com.robotoworks.mechanoid.util.Closeables;

import info.hannes.mechadmin_gen.sqlite.MxAdminDBContract.PictureStage;
import info.hannes.mechadmin_gen.sqlite.MxAdminDBContract.PictureStage.Builder;

public class PictureStageRecord extends ActiveRecord implements Parcelable {

	private static ActiveRecordFactory<PictureStageRecord> sFactory = new ActiveRecordFactory<PictureStageRecord>() {
		@Override
		public PictureStageRecord create(Cursor c) {
			return fromCursor(c);
		}

		@Override
		public Uri getContentUri() {
			return PictureStage.CONTENT_URI;
		}
		
		@Override
		public String[] getProjection() {
			return PROJECTION;
		}
	};
	
	public static ActiveRecordFactory<PictureStageRecord> getFactory() {
		return sFactory;
	}

    public static final Creator<PictureStageRecord> CREATOR
    	= new Creator<PictureStageRecord>() {
        public PictureStageRecord createFromParcel(Parcel in) {
            return new PictureStageRecord(in);
        }

        public PictureStageRecord[] newArray(int size) {
            return new PictureStageRecord[size];
        }
    };
    
    public static String[] PROJECTION = {
    	PictureStage._ID,
    	PictureStage.REST_ID,
    	PictureStage.TRACK_ID,
    	PictureStage.TRACK_REST_ID,
    	PictureStage.CHANGED,
    	PictureStage.WWW,
    	PictureStage.LOCAL_FILE,
    	PictureStage.UNINTERESSANT
    };
    
    public interface Indices {
    	int _ID = 0;
    	int REST_ID = 1;
    	int TRACK_ID = 2;
    	int TRACK_REST_ID = 3;
    	int CHANGED = 4;
    	int WWW = 5;
    	int LOCAL_FILE = 6;
    	int UNINTERESSANT = 7;
    }
    
    private long mRestId;
    private boolean mRestIdDirty;
    private long mTrackId;
    private boolean mTrackIdDirty;
    private long mTrackRestId;
    private boolean mTrackRestIdDirty;
    private long mChanged;
    private boolean mChangedDirty;
    private String mWww;
    private boolean mWwwDirty;
    private String mLocalFile;
    private boolean mLocalFileDirty;
    private long mUninteressant;
    private boolean mUninteressantDirty;
    
    @Override
    protected String[] _getProjection() {
    	return PROJECTION;
    }
    
    public void setRestId(long restId) {
    	mRestId = restId;
    	mRestIdDirty = true;
    }
    
    public long getRestId() {
    	return mRestId;
    }
    
    public void setTrackId(long trackId) {
    	mTrackId = trackId;
    	mTrackIdDirty = true;
    }
    
    public long getTrackId() {
    	return mTrackId;
    }
    
    public void setTrackRestId(long trackRestId) {
    	mTrackRestId = trackRestId;
    	mTrackRestIdDirty = true;
    }
    
    public long getTrackRestId() {
    	return mTrackRestId;
    }
    
    public void setChanged(long changed) {
    	mChanged = changed;
    	mChangedDirty = true;
    }
    
    public long getChanged() {
    	return mChanged;
    }
    
    public void setWww(String www) {
    	mWww = www;
    	mWwwDirty = true;
    }
    
    public String getWww() {
    	return mWww;
    }
    
    public void setLocalFile(String localFile) {
    	mLocalFile = localFile;
    	mLocalFileDirty = true;
    }
    
    public String getLocalFile() {
    	return mLocalFile;
    }
    
    public void setUninteressant(long uninteressant) {
    	mUninteressant = uninteressant;
    	mUninteressantDirty = true;
    }
    
    public long getUninteressant() {
    	return mUninteressant;
    }
    
    
    public PictureStageRecord() {
    	super(PictureStage.CONTENT_URI);
	}
	
	private PictureStageRecord(Parcel in) {
    	super(PictureStage.CONTENT_URI);
    	
		setId(in.readLong());
		
		mRestId = in.readLong();
		mTrackId = in.readLong();
		mTrackRestId = in.readLong();
		mChanged = in.readLong();
		mWww = in.readString();
		mLocalFile = in.readString();
		mUninteressant = in.readLong();
		
		boolean[] dirtyFlags = new boolean[7];
		in.readBooleanArray(dirtyFlags);
		mRestIdDirty = dirtyFlags[0];
		mTrackIdDirty = dirtyFlags[1];
		mTrackRestIdDirty = dirtyFlags[2];
		mChangedDirty = dirtyFlags[3];
		mWwwDirty = dirtyFlags[4];
		mLocalFileDirty = dirtyFlags[5];
		mUninteressantDirty = dirtyFlags[6];
	}
	
	@Override
	public int describeContents() {
	    return 0;
	}
	
	@Override
	public void writeToParcel(Parcel dest, int flags) {
		dest.writeLong(getId());
		dest.writeLong(mRestId);
		dest.writeLong(mTrackId);
		dest.writeLong(mTrackRestId);
		dest.writeLong(mChanged);
		dest.writeString(mWww);
		dest.writeString(mLocalFile);
		dest.writeLong(mUninteressant);
		dest.writeBooleanArray(new boolean[] {
			mRestIdDirty,
			mTrackIdDirty,
			mTrackRestIdDirty,
			mChangedDirty,
			mWwwDirty,
			mLocalFileDirty,
			mUninteressantDirty
		});
	}
	
	@Override
	protected AbstractValuesBuilder createBuilder() {
		Builder builder = PictureStage.newBuilder();

		if(mRestIdDirty) {
			builder.setRestId(mRestId);
		}
		if(mTrackIdDirty) {
			builder.setTrackId(mTrackId);
		}
		if(mTrackRestIdDirty) {
			builder.setTrackRestId(mTrackRestId);
		}
		if(mChangedDirty) {
			builder.setChanged(mChanged);
		}
		if(mWwwDirty) {
			builder.setWww(mWww);
		}
		if(mLocalFileDirty) {
			builder.setLocalFile(mLocalFile);
		}
		if(mUninteressantDirty) {
			builder.setUninteressant(mUninteressant);
		}
		
		return builder;
	}
	
    @Override
	public void makeDirty(boolean dirty){
		mRestIdDirty = dirty;
		mTrackIdDirty = dirty;
		mTrackRestIdDirty = dirty;
		mChangedDirty = dirty;
		mWwwDirty = dirty;
		mLocalFileDirty = dirty;
		mUninteressantDirty = dirty;
	}

	@Override
	protected void setPropertiesFromCursor(Cursor c) {
		setId(c.getLong(Indices._ID));
		setRestId(c.getLong(Indices.REST_ID));
		setTrackId(c.getLong(Indices.TRACK_ID));
		setTrackRestId(c.getLong(Indices.TRACK_REST_ID));
		setChanged(c.getLong(Indices.CHANGED));
		setWww(c.getString(Indices.WWW));
		setLocalFile(c.getString(Indices.LOCAL_FILE));
		setUninteressant(c.getLong(Indices.UNINTERESSANT));
	}
	
	public static PictureStageRecord fromCursor(Cursor c) {
	    PictureStageRecord item = new PictureStageRecord();
	    
		item.setPropertiesFromCursor(c);
		
		item.makeDirty(false);
		
	    return item;
	}
	
	public static PictureStageRecord fromBundle(Bundle bundle, String key) {
		bundle.setClassLoader(PictureStageRecord.class.getClassLoader());
		return bundle.getParcelable(key);
	}
	
	public static PictureStageRecord get(long id) {
	    Cursor c = null;
	    
	    ContentResolver resolver = Mechanoid.getContentResolver();
	    
	    try {
	        c = resolver.query(PictureStage.CONTENT_URI.buildUpon()
			.appendPath(String.valueOf(id)).build(), PROJECTION, null, null, null);
	        
	        if(!c.moveToFirst()) {
	            return null;
	        }
	        
	        return fromCursor(c);
	    } finally {
	        Closeables.closeSilently(c);
	    }
	}
}
