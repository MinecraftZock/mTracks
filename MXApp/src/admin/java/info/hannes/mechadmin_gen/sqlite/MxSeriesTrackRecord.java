/*
 * Generated by Robotoworks Mechanoid
 */
package info.hannes.mechadmin_gen.sqlite;

import android.content.ContentResolver;
import android.database.Cursor;
import android.net.Uri;
import android.os.Bundle;
import android.os.Parcel;
import android.os.Parcelable;

import com.robotoworks.mechanoid.Mechanoid;
import com.robotoworks.mechanoid.db.AbstractValuesBuilder;
import com.robotoworks.mechanoid.db.ActiveRecord;
import com.robotoworks.mechanoid.db.ActiveRecordFactory;
import com.robotoworks.mechanoid.util.Closeables;

import info.hannes.mechadmin_gen.sqlite.MxCalContract.MxSeriesTrack;
import info.hannes.mechadmin_gen.sqlite.MxCalContract.MxSeriesTrack.Builder;

public class MxSeriesTrackRecord extends ActiveRecord implements Parcelable {

	private static ActiveRecordFactory<MxSeriesTrackRecord> sFactory = new ActiveRecordFactory<MxSeriesTrackRecord>() {
		@Override
		public MxSeriesTrackRecord create(Cursor c) {
			return fromCursor(c);
		}

		@Override
		public Uri getContentUri() {
			return MxSeriesTrack.CONTENT_URI;
		}
		
		@Override
		public String[] getProjection() {
			return PROJECTION;
		}
	};
	
	public static ActiveRecordFactory<MxSeriesTrackRecord> getFactory() {
		return sFactory;
	}

    public static final Creator<MxSeriesTrackRecord> CREATOR
    	= new Creator<MxSeriesTrackRecord>() {
        public MxSeriesTrackRecord createFromParcel(Parcel in) {
            return new MxSeriesTrackRecord(in);
        }

        public MxSeriesTrackRecord[] newArray(int size) {
            return new MxSeriesTrackRecord[size];
        }
    };
    
    public static String[] PROJECTION = {
    	MxSeriesTrack._ID,
    	MxSeriesTrack.REST_ID,
    	MxSeriesTrack.WEB_ID,
    	MxSeriesTrack.WEB_SERIES_ID,
    	MxSeriesTrack.WEB_TRACK_ID,
    	MxSeriesTrack.CREATED_AT,
    	MxSeriesTrack.UPDATED_AT,
    	MxSeriesTrack.EVENT_DATE,
    	MxSeriesTrack.NOTES,
    	MxSeriesTrack.QUELLFILE_ID
    };
    
    public interface Indices {
    	int _ID = 0;
    	int REST_ID = 1;
    	int WEB_ID = 2;
    	int WEB_SERIES_ID = 3;
    	int WEB_TRACK_ID = 4;
    	int CREATED_AT = 5;
    	int UPDATED_AT = 6;
    	int EVENT_DATE = 7;
    	int NOTES = 8;
    	int QUELLFILE_ID = 9;
    }
    
    private long mRestId;
    private boolean mRestIdDirty;
    private long mWebId;
    private boolean mWebIdDirty;
    private long mWebSeriesId;
    private boolean mWebSeriesIdDirty;
    private long mWebTrackId;
    private boolean mWebTrackIdDirty;
    private long mCreatedAt;
    private boolean mCreatedAtDirty;
    private long mUpdatedAt;
    private boolean mUpdatedAtDirty;
    private long mEventDate;
    private boolean mEventDateDirty;
    private String mNotes;
    private boolean mNotesDirty;
    private long mQuellfileId;
    private boolean mQuellfileIdDirty;
    
    @Override
    protected String[] _getProjection() {
    	return PROJECTION;
    }
    
    public void setRestId(long restId) {
    	mRestId = restId;
    	mRestIdDirty = true;
    }
    
    public long getRestId() {
    	return mRestId;
    }
    
    public void setWebId(long webId) {
    	mWebId = webId;
    	mWebIdDirty = true;
    }
    
    public long getWebId() {
    	return mWebId;
    }
    
    public void setWebSeriesId(long webSeriesId) {
    	mWebSeriesId = webSeriesId;
    	mWebSeriesIdDirty = true;
    }
    
    public long getWebSeriesId() {
    	return mWebSeriesId;
    }
    
    public void setWebTrackId(long webTrackId) {
    	mWebTrackId = webTrackId;
    	mWebTrackIdDirty = true;
    }
    
    public long getWebTrackId() {
    	return mWebTrackId;
    }
    
    public void setCreatedAt(long createdAt) {
    	mCreatedAt = createdAt;
    	mCreatedAtDirty = true;
    }
    
    public long getCreatedAt() {
    	return mCreatedAt;
    }
    
    public void setUpdatedAt(long updatedAt) {
    	mUpdatedAt = updatedAt;
    	mUpdatedAtDirty = true;
    }
    
    public long getUpdatedAt() {
    	return mUpdatedAt;
    }
    
    public void setEventDate(long eventDate) {
    	mEventDate = eventDate;
    	mEventDateDirty = true;
    }
    
    public long getEventDate() {
    	return mEventDate;
    }
    
    public void setNotes(String notes) {
    	mNotes = notes;
    	mNotesDirty = true;
    }
    
    public String getNotes() {
    	return mNotes;
    }
    
    public void setQuellfileId(long quellfileId) {
    	mQuellfileId = quellfileId;
    	mQuellfileIdDirty = true;
    }
    
    public long getQuellfileId() {
    	return mQuellfileId;
    }
    
    
    public MxSeriesTrackRecord() {
    	super(MxSeriesTrack.CONTENT_URI);
	}
	
	private MxSeriesTrackRecord(Parcel in) {
    	super(MxSeriesTrack.CONTENT_URI);
    	
		setId(in.readLong());
		
		mRestId = in.readLong();
		mWebId = in.readLong();
		mWebSeriesId = in.readLong();
		mWebTrackId = in.readLong();
		mCreatedAt = in.readLong();
		mUpdatedAt = in.readLong();
		mEventDate = in.readLong();
		mNotes = in.readString();
		mQuellfileId = in.readLong();
		
		boolean[] dirtyFlags = new boolean[9];
		in.readBooleanArray(dirtyFlags);
		mRestIdDirty = dirtyFlags[0];
		mWebIdDirty = dirtyFlags[1];
		mWebSeriesIdDirty = dirtyFlags[2];
		mWebTrackIdDirty = dirtyFlags[3];
		mCreatedAtDirty = dirtyFlags[4];
		mUpdatedAtDirty = dirtyFlags[5];
		mEventDateDirty = dirtyFlags[6];
		mNotesDirty = dirtyFlags[7];
		mQuellfileIdDirty = dirtyFlags[8];
	}
	
	@Override
	public int describeContents() {
	    return 0;
	}
	
	@Override
	public void writeToParcel(Parcel dest, int flags) {
		dest.writeLong(getId());
		dest.writeLong(mRestId);
		dest.writeLong(mWebId);
		dest.writeLong(mWebSeriesId);
		dest.writeLong(mWebTrackId);
		dest.writeLong(mCreatedAt);
		dest.writeLong(mUpdatedAt);
		dest.writeLong(mEventDate);
		dest.writeString(mNotes);
		dest.writeLong(mQuellfileId);
		dest.writeBooleanArray(new boolean[] {
			mRestIdDirty,
			mWebIdDirty,
			mWebSeriesIdDirty,
			mWebTrackIdDirty,
			mCreatedAtDirty,
			mUpdatedAtDirty,
			mEventDateDirty,
			mNotesDirty,
			mQuellfileIdDirty
		});
	}
	
	@Override
	protected AbstractValuesBuilder createBuilder() {
		Builder builder = MxSeriesTrack.newBuilder();

		if(mRestIdDirty) {
			builder.setRestId(mRestId);
		}
		if(mWebIdDirty) {
			builder.setWebId(mWebId);
		}
		if(mWebSeriesIdDirty) {
			builder.setWebSeriesId(mWebSeriesId);
		}
		if(mWebTrackIdDirty) {
			builder.setWebTrackId(mWebTrackId);
		}
		if(mCreatedAtDirty) {
			builder.setCreatedAt(mCreatedAt);
		}
		if(mUpdatedAtDirty) {
			builder.setUpdatedAt(mUpdatedAt);
		}
		if(mEventDateDirty) {
			builder.setEventDate(mEventDate);
		}
		if(mNotesDirty) {
			builder.setNotes(mNotes);
		}
		if(mQuellfileIdDirty) {
			builder.setQuellfileId(mQuellfileId);
		}
		
		return builder;
	}
	
    @Override
	public void makeDirty(boolean dirty){
		mRestIdDirty = dirty;
		mWebIdDirty = dirty;
		mWebSeriesIdDirty = dirty;
		mWebTrackIdDirty = dirty;
		mCreatedAtDirty = dirty;
		mUpdatedAtDirty = dirty;
		mEventDateDirty = dirty;
		mNotesDirty = dirty;
		mQuellfileIdDirty = dirty;
	}

	@Override
	protected void setPropertiesFromCursor(Cursor c) {
		setId(c.getLong(Indices._ID));
		setRestId(c.getLong(Indices.REST_ID));
		setWebId(c.getLong(Indices.WEB_ID));
		setWebSeriesId(c.getLong(Indices.WEB_SERIES_ID));
		setWebTrackId(c.getLong(Indices.WEB_TRACK_ID));
		setCreatedAt(c.getLong(Indices.CREATED_AT));
		setUpdatedAt(c.getLong(Indices.UPDATED_AT));
		setEventDate(c.getLong(Indices.EVENT_DATE));
		setNotes(c.getString(Indices.NOTES));
		setQuellfileId(c.getLong(Indices.QUELLFILE_ID));
	}
	
	public static MxSeriesTrackRecord fromCursor(Cursor c) {
	    MxSeriesTrackRecord item = new MxSeriesTrackRecord();
	    
		item.setPropertiesFromCursor(c);
		
		item.makeDirty(false);
		
	    return item;
	}
	
	public static MxSeriesTrackRecord fromBundle(Bundle bundle, String key) {
		bundle.setClassLoader(MxSeriesTrackRecord.class.getClassLoader());
		return bundle.getParcelable(key);
	}
	
	public static MxSeriesTrackRecord get(long id) {
	    Cursor c = null;
	    
	    ContentResolver resolver = Mechanoid.getContentResolver();
	    
	    try {
	        c = resolver.query(MxSeriesTrack.CONTENT_URI.buildUpon()
			.appendPath(String.valueOf(id)).build(), PROJECTION, null, null, null);
	        
	        if(!c.moveToFirst()) {
	            return null;
	        }
	        
	        return fromCursor(c);
	    } finally {
	        Closeables.closeSilently(c);
	    }
	}
}
