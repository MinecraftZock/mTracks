/*
 * Generated by Robotoworks Mechanoid
 */
package info.hannes.mechadmin_gen.sqlite;

import android.net.Uri;
import android.provider.BaseColumns;

import com.robotoworks.mechanoid.Mechanoid;
import com.robotoworks.mechanoid.db.AbstractValuesBuilder;

import java.lang.reflect.Field;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

public class MxAdminDBContract  {
    public static final String CONTENT_AUTHORITY = initAuthority();

	private static String initAuthority() {
		String authority = "info.hannes.mechadmin.sqlite.mxadmindb";

		try {
    		
    		ClassLoader loader = MxAdminDBContract.class.getClassLoader();
    		
			Class<?> clz = loader.loadClass("info.hannes.mechadmin.sqlite.MxAdminDBContentProviderAuthority");
			Field declaredField = clz.getDeclaredField("CONTENT_AUTHORITY");
			
			authority = declaredField.get(null).toString();
		} catch (ClassNotFoundException e) {} 
    	catch (NoSuchFieldException e) {} 
    	catch (IllegalArgumentException e) {
		} catch (IllegalAccessException e) {
		}
		
		return authority;
	}
	
    private static final Uri BASE_CONTENT_URI = Uri.parse("content://" + CONTENT_AUTHORITY);

	interface PictureStageColumns {
		String REST_ID = "restId";
		String TRACK_ID = "trackId";
		String TRACK_REST_ID = "trackRestId";
		String CHANGED = "changed";
		String WWW = "www";
		String LOCAL_FILE = "LocalFile";
		String UNINTERESSANT = "uninteressant";
	}
	
	interface TrackstageBrotherColumns {
		String REST_ID = "restId";
		String TRACK_REST_ID = "trackRestId";
		String CREATED = "created";
		String TRACKNAME = "Trackname";
		String LONGITUDE = "Longitude";
		String LATITUDE = "Latitude";
		String COUNTRY = "Country";
		String ANDROIDID = "androidid";
		String URL_DETAIL_XML = "urlDetailXml";
		String CONTENT_DETAIL_XML = "contentDetailXml";
		String URL_PHOTO = "urlPhoto";
		String CONTENT_PHOTO = "contentPhoto";
		String URL = "url";
		String PHONE = "Phone";
		String NOTES = "Notes";
		String VOTES = "Votes";
		String OPENMONDAYS = "Openmondays";
		String OPENTUESDAYS = "Opentuesdays";
		String OPENWEDNESDAY = "Openwednesday";
		String OPENTHURSDAY = "Openthursday";
		String OPENFRIDAY = "Openfriday";
		String OPENSATURDAY = "Opensaturday";
		String OPENSUNDAY = "Opensunday";
		String HOURSMONDAY = "Hoursmonday";
		String HOURSTUESDAY = "Hourstuesday";
		String HOURSWEDNESDAY = "Hourswednesday";
		String HOURSTHURSDAY = "Hoursthursday";
		String HOURSFRIDAY = "Hoursfriday";
		String HOURSSATURDAY = "Hourssaturday";
		String HOURSSUNDAY = "Hourssunday";
		String TRACKACCESS = "trackaccess";
	}
	
	interface TrackstageRidColumns {
		String REST_ID = "restId";
		String CREATED = "created";
		String URL_MAP_POINTS_JSON = "urlMapPointsJson";
		String URL_DETAIL_XML = "urlDetailXml";
		String CONTENT_MAP_POINTS_JSON = "contentMapPointsJson";
		String CONTENT_DETAIL_XML = "contentDetailXml";
	}
	
	interface VideosColumns {
		String REST_ID = "restId";
		String TRACK_ID = "trackId";
		String CHANGED = "changed";
		String WWW = "www";
		String TRACK_REST_ID = "trackRestId";
		String LOCAL_FILE = "LocalFile";
	}
	
	interface TrackssmallRidColumns {
		String REST_ID = "restId";
		String LEN_J_S_O_N = "lenJSON";
		String LEN_X_M_L = "lenXML";
	}
			
	/**
	 * <p>Column definitions and helper methods to work with the PictureStage.</p>
	 */
	public static class PictureStage implements PictureStageColumns, BaseColumns {
	    public static final Uri CONTENT_URI = 
				BASE_CONTENT_URI.buildUpon().appendPath("PictureStage").build();
	
		/**
		 * <p>The content type for a cursor that contains many PictureStage rows.</p>
		 */
	    public static final String CONTENT_TYPE =
	            "vnd.android.cursor.dir/vnd.mxadmindb.PictureStage";
	
		/**
		 * <p>The content type for a cursor that contains a single PictureStage row.</p>
		 */
		public static final String ITEM_CONTENT_TYPE =
			"vnd.android.cursor.item/vnd.mxadmindb.PictureStage";
	
		/**
		 * <p>Builds a Uri with appended id for a row in PictureStage, 
		 * eg:- content://info.hannes.mechadmin.sqlite.mxadmindb/picturestage/123.</p>
		 */
	    public static Uri buildUriWithId(long id) {
	        return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
	    }
		public static int delete() {
			return Mechanoid.getContentResolver().delete(PictureStage.CONTENT_URI, null, null);
		}
		
		public static int delete(String where, String[] selectionArgs) {
			return Mechanoid.getContentResolver().delete(PictureStage.CONTENT_URI, where, selectionArgs);
		}
		
		/**
		 * <p>Create a new Builder for PictureStage</p>
		 */
		public static Builder newBuilder() {
			return new Builder();
		}
		
		/**
		 * <p>Build and execute insert or update statements for PictureStage.</p>
		 *
		 * <p>Use {@link PictureStage#newBuilder()} to create new builder</p>
		 */
		public static class Builder extends AbstractValuesBuilder {
			private Builder() {
				super(Mechanoid.getApplicationContext(), PictureStage.CONTENT_URI);
			}
			
			public Builder setRestId(long value) {
				mValues.put(PictureStage.REST_ID, value);
				return this;
			}
			public Builder setTrackId(long value) {
				mValues.put(PictureStage.TRACK_ID, value);
				return this;
			}
			public Builder setTrackRestId(long value) {
				mValues.put(PictureStage.TRACK_REST_ID, value);
				return this;
			}
			public Builder setChanged(long value) {
				mValues.put(PictureStage.CHANGED, value);
				return this;
			}
			public Builder setWww(String value) {
				mValues.put(PictureStage.WWW, value);
				return this;
			}
			public Builder setLocalFile(String value) {
				mValues.put(PictureStage.LOCAL_FILE, value);
				return this;
			}
			public Builder setUninteressant(long value) {
				mValues.put(PictureStage.UNINTERESSANT, value);
				return this;
			}
		}
		
		static final Set<Uri> VIEW_URIS;
		
		static {
			HashSet<Uri> viewUris =  new HashSet<Uri>();
	
			
			VIEW_URIS = Collections.unmodifiableSet(viewUris);
		}
	}
	/**
	 * <p>Column definitions and helper methods to work with the TrackstageBrother.</p>
	 */
	public static class TrackstageBrother implements TrackstageBrotherColumns, BaseColumns {
	    public static final Uri CONTENT_URI = 
				BASE_CONTENT_URI.buildUpon().appendPath("trackstageBrother").build();
	
		/**
		 * <p>The content type for a cursor that contains many TrackstageBrother rows.</p>
		 */
	    public static final String CONTENT_TYPE =
	            "vnd.android.cursor.dir/vnd.mxadmindb.trackstageBrother";
	
		/**
		 * <p>The content type for a cursor that contains a single TrackstageBrother row.</p>
		 */
		public static final String ITEM_CONTENT_TYPE =
			"vnd.android.cursor.item/vnd.mxadmindb.trackstageBrother";
	
		/**
		 * <p>Builds a Uri with appended id for a row in TrackstageBrother, 
		 * eg:- content://info.hannes.mechadmin.sqlite.mxadmindb/trackstagebrother/123.</p>
		 */
	    public static Uri buildUriWithId(long id) {
	        return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
	    }
		public static int delete() {
			return Mechanoid.getContentResolver().delete(TrackstageBrother.CONTENT_URI, null, null);
		}
		
		public static int delete(String where, String[] selectionArgs) {
			return Mechanoid.getContentResolver().delete(TrackstageBrother.CONTENT_URI, where, selectionArgs);
		}
		
		/**
		 * <p>Create a new Builder for TrackstageBrother</p>
		 */
		public static Builder newBuilder() {
			return new Builder();
		}
		
		/**
		 * <p>Build and execute insert or update statements for TrackstageBrother.</p>
		 *
		 * <p>Use {@link TrackstageBrother#newBuilder()} to create new builder</p>
		 */
		public static class Builder extends AbstractValuesBuilder {
			private Builder() {
				super(Mechanoid.getApplicationContext(), TrackstageBrother.CONTENT_URI);
			}
			
			public Builder setRestId(long value) {
				mValues.put(TrackstageBrother.REST_ID, value);
				return this;
			}
			public Builder setTrackRestId(long value) {
				mValues.put(TrackstageBrother.TRACK_REST_ID, value);
				return this;
			}
			public Builder setCreated(long value) {
				mValues.put(TrackstageBrother.CREATED, value);
				return this;
			}
			public Builder setTrackname(String value) {
				mValues.put(TrackstageBrother.TRACKNAME, value);
				return this;
			}
			public Builder setLongitude(double value) {
				mValues.put(TrackstageBrother.LONGITUDE, value);
				return this;
			}
			public Builder setLatitude(double value) {
				mValues.put(TrackstageBrother.LATITUDE, value);
				return this;
			}
			public Builder setCountry(String value) {
				mValues.put(TrackstageBrother.COUNTRY, value);
				return this;
			}
			public Builder setAndroidid(String value) {
				mValues.put(TrackstageBrother.ANDROIDID, value);
				return this;
			}
			public Builder setUrlDetailXml(String value) {
				mValues.put(TrackstageBrother.URL_DETAIL_XML, value);
				return this;
			}
			public Builder setContentDetailXml(String value) {
				mValues.put(TrackstageBrother.CONTENT_DETAIL_XML, value);
				return this;
			}
			public Builder setUrlPhoto(String value) {
				mValues.put(TrackstageBrother.URL_PHOTO, value);
				return this;
			}
			public Builder setContentPhoto(String value) {
				mValues.put(TrackstageBrother.CONTENT_PHOTO, value);
				return this;
			}
			public Builder setUrl(String value) {
				mValues.put(TrackstageBrother.URL, value);
				return this;
			}
			public Builder setPhone(String value) {
				mValues.put(TrackstageBrother.PHONE, value);
				return this;
			}
			public Builder setNotes(String value) {
				mValues.put(TrackstageBrother.NOTES, value);
				return this;
			}
			public Builder setVotes(String value) {
				mValues.put(TrackstageBrother.VOTES, value);
				return this;
			}
			public Builder setOpenmondays(long value) {
				mValues.put(TrackstageBrother.OPENMONDAYS, value);
				return this;
			}
			public Builder setOpentuesdays(long value) {
				mValues.put(TrackstageBrother.OPENTUESDAYS, value);
				return this;
			}
			public Builder setOpenwednesday(long value) {
				mValues.put(TrackstageBrother.OPENWEDNESDAY, value);
				return this;
			}
			public Builder setOpenthursday(long value) {
				mValues.put(TrackstageBrother.OPENTHURSDAY, value);
				return this;
			}
			public Builder setOpenfriday(long value) {
				mValues.put(TrackstageBrother.OPENFRIDAY, value);
				return this;
			}
			public Builder setOpensaturday(long value) {
				mValues.put(TrackstageBrother.OPENSATURDAY, value);
				return this;
			}
			public Builder setOpensunday(long value) {
				mValues.put(TrackstageBrother.OPENSUNDAY, value);
				return this;
			}
			public Builder setHoursmonday(String value) {
				mValues.put(TrackstageBrother.HOURSMONDAY, value);
				return this;
			}
			public Builder setHourstuesday(String value) {
				mValues.put(TrackstageBrother.HOURSTUESDAY, value);
				return this;
			}
			public Builder setHourswednesday(String value) {
				mValues.put(TrackstageBrother.HOURSWEDNESDAY, value);
				return this;
			}
			public Builder setHoursthursday(String value) {
				mValues.put(TrackstageBrother.HOURSTHURSDAY, value);
				return this;
			}
			public Builder setHoursfriday(String value) {
				mValues.put(TrackstageBrother.HOURSFRIDAY, value);
				return this;
			}
			public Builder setHourssaturday(String value) {
				mValues.put(TrackstageBrother.HOURSSATURDAY, value);
				return this;
			}
			public Builder setHourssunday(String value) {
				mValues.put(TrackstageBrother.HOURSSUNDAY, value);
				return this;
			}
			public Builder setTrackaccess(String value) {
				mValues.put(TrackstageBrother.TRACKACCESS, value);
				return this;
			}
		}
		
		static final Set<Uri> VIEW_URIS;
		
		static {
			HashSet<Uri> viewUris =  new HashSet<Uri>();
	
			
			VIEW_URIS = Collections.unmodifiableSet(viewUris);
		}
	}
	/**
	 * <p>Column definitions and helper methods to work with the TrackstageRid.</p>
	 */
	public static class TrackstageRid implements TrackstageRidColumns, BaseColumns {
	    public static final Uri CONTENT_URI = 
				BASE_CONTENT_URI.buildUpon().appendPath("trackstageRid").build();
	
		/**
		 * <p>The content type for a cursor that contains many TrackstageRid rows.</p>
		 */
	    public static final String CONTENT_TYPE =
	            "vnd.android.cursor.dir/vnd.mxadmindb.trackstageRid";
	
		/**
		 * <p>The content type for a cursor that contains a single TrackstageRid row.</p>
		 */
		public static final String ITEM_CONTENT_TYPE =
			"vnd.android.cursor.item/vnd.mxadmindb.trackstageRid";
	
		/**
		 * <p>Builds a Uri with appended id for a row in TrackstageRid, 
		 * eg:- content://info.hannes.mechadmin.sqlite.mxadmindb/trackstagerid/123.</p>
		 */
	    public static Uri buildUriWithId(long id) {
	        return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
	    }
		public static int delete() {
			return Mechanoid.getContentResolver().delete(TrackstageRid.CONTENT_URI, null, null);
		}
		
		public static int delete(String where, String[] selectionArgs) {
			return Mechanoid.getContentResolver().delete(TrackstageRid.CONTENT_URI, where, selectionArgs);
		}
		
		/**
		 * <p>Create a new Builder for TrackstageRid</p>
		 */
		public static Builder newBuilder() {
			return new Builder();
		}
		
		/**
		 * <p>Build and execute insert or update statements for TrackstageRid.</p>
		 *
		 * <p>Use {@link TrackstageRid#newBuilder()} to create new builder</p>
		 */
		public static class Builder extends AbstractValuesBuilder {
			private Builder() {
				super(Mechanoid.getApplicationContext(), TrackstageRid.CONTENT_URI);
			}
			
			public Builder setRestId(long value) {
				mValues.put(TrackstageRid.REST_ID, value);
				return this;
			}
			public Builder setCreated(long value) {
				mValues.put(TrackstageRid.CREATED, value);
				return this;
			}
			public Builder setUrlMapPointsJson(String value) {
				mValues.put(TrackstageRid.URL_MAP_POINTS_JSON, value);
				return this;
			}
			public Builder setUrlDetailXml(String value) {
				mValues.put(TrackstageRid.URL_DETAIL_XML, value);
				return this;
			}
			public Builder setContentMapPointsJson(String value) {
				mValues.put(TrackstageRid.CONTENT_MAP_POINTS_JSON, value);
				return this;
			}
			public Builder setContentDetailXml(String value) {
				mValues.put(TrackstageRid.CONTENT_DETAIL_XML, value);
				return this;
			}
		}
		
		static final Set<Uri> VIEW_URIS;
		
		static {
			HashSet<Uri> viewUris =  new HashSet<Uri>();
	
			viewUris.add(TrackssmallRid.CONTENT_URI);
			
			VIEW_URIS = Collections.unmodifiableSet(viewUris);
		}
	}
	/**
	 * <p>Column definitions and helper methods to work with the Videos.</p>
	 */
	public static class Videos implements VideosColumns, BaseColumns {
	    public static final Uri CONTENT_URI = 
				BASE_CONTENT_URI.buildUpon().appendPath("videos").build();
	
		/**
		 * <p>The content type for a cursor that contains many Videos rows.</p>
		 */
	    public static final String CONTENT_TYPE =
	            "vnd.android.cursor.dir/vnd.mxadmindb.videos";
	
		/**
		 * <p>The content type for a cursor that contains a single Videos row.</p>
		 */
		public static final String ITEM_CONTENT_TYPE =
			"vnd.android.cursor.item/vnd.mxadmindb.videos";
	
		/**
		 * <p>Builds a Uri with appended id for a row in Videos, 
		 * eg:- content://info.hannes.mechadmin.sqlite.mxadmindb/videos/123.</p>
		 */
	    public static Uri buildUriWithId(long id) {
	        return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
	    }
		public static int delete() {
			return Mechanoid.getContentResolver().delete(Videos.CONTENT_URI, null, null);
		}
		
		public static int delete(String where, String[] selectionArgs) {
			return Mechanoid.getContentResolver().delete(Videos.CONTENT_URI, where, selectionArgs);
		}
		
		/**
		 * <p>Create a new Builder for Videos</p>
		 */
		public static Builder newBuilder() {
			return new Builder();
		}
		
		/**
		 * <p>Build and execute insert or update statements for Videos.</p>
		 *
		 * <p>Use {@link Videos#newBuilder()} to create new builder</p>
		 */
		public static class Builder extends AbstractValuesBuilder {
			private Builder() {
				super(Mechanoid.getApplicationContext(), Videos.CONTENT_URI);
			}
			
			public Builder setRestId(long value) {
				mValues.put(Videos.REST_ID, value);
				return this;
			}
			public Builder setTrackId(long value) {
				mValues.put(Videos.TRACK_ID, value);
				return this;
			}
			public Builder setChanged(long value) {
				mValues.put(Videos.CHANGED, value);
				return this;
			}
			public Builder setWww(String value) {
				mValues.put(Videos.WWW, value);
				return this;
			}
			public Builder setTrackRestId(long value) {
				mValues.put(Videos.TRACK_REST_ID, value);
				return this;
			}
			public Builder setLocalFile(String value) {
				mValues.put(Videos.LOCAL_FILE, value);
				return this;
			}
		}
		
		static final Set<Uri> VIEW_URIS;
		
		static {
			HashSet<Uri> viewUris =  new HashSet<Uri>();
	
			
			VIEW_URIS = Collections.unmodifiableSet(viewUris);
		}
	}

	/**
	 * <p>Column definitions and helper methods to work with the TrackssmallRid.</p>
	 */
	public static class TrackssmallRid implements TrackssmallRidColumns, BaseColumns {
	    public static final Uri CONTENT_URI = 
				BASE_CONTENT_URI.buildUpon().appendPath("trackssmallRid").build();
	
		/**
		 * <p>The content type for a cursor that contains many TrackssmallRid rows.</p>
		 */
	    public static final String CONTENT_TYPE =
	            "vnd.android.cursor.dir/vnd.mxadmindb.trackssmallRid";
	
		/**
		 * <p>The content type for a cursor that contains a single TrackssmallRid row.</p>
		 */
		public static final String ITEM_CONTENT_TYPE =
			"vnd.android.cursor.item/vnd.mxadmindb.trackssmallRid";
	
		/**
		 * <p>Builds a Uri with appended id for a row in TrackssmallRid, 
		 * eg:- content://info.hannes.mechadmin.sqlite.mxadmindb/trackssmallrid/123.</p>
		 */
	    public static Uri buildUriWithId(long id) {
	        return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
	    }
		public static int delete() {
			return Mechanoid.getContentResolver().delete(TrackssmallRid.CONTENT_URI, null, null);
		}
		
		public static int delete(String where, String[] selectionArgs) {
			return Mechanoid.getContentResolver().delete(TrackssmallRid.CONTENT_URI, where, selectionArgs);
		}
		
		/**
		 * <p>Create a new Builder for TrackssmallRid</p>
		 */
		public static Builder newBuilder() {
			return new Builder();
		}
		
		/**
		 * <p>Build and execute insert or update statements for TrackssmallRid.</p>
		 *
		 * <p>Use {@link TrackssmallRid#newBuilder()} to create new builder</p>
		 */
		public static class Builder extends AbstractValuesBuilder {
			private Builder() {
				super(Mechanoid.getApplicationContext(), TrackssmallRid.CONTENT_URI);
			}
			
			public Builder setRestId(long value) {
				mValues.put(TrackssmallRid.REST_ID, value);
				return this;
			}
			public Builder setLenJSON(long value) {
				mValues.put(TrackssmallRid.LEN_J_S_O_N, value);
				return this;
			}
			public Builder setLenXML(long value) {
				mValues.put(TrackssmallRid.LEN_X_M_L, value);
				return this;
			}
		}
		
		static final Set<Uri> VIEW_URIS;
		
		static {
			HashSet<Uri> viewUris =  new HashSet<Uri>();
	
			
			VIEW_URIS = Collections.unmodifiableSet(viewUris);
		}
	}
	

	
	static Map<Uri, Set<Uri>> REFERENCING_VIEWS;
	
	static {
		Map<Uri, Set<Uri>> map = new HashMap<Uri, Set<Uri>>();
		
		map.put(PictureStage.CONTENT_URI, PictureStage.VIEW_URIS);
		map.put(TrackstageBrother.CONTENT_URI, TrackstageBrother.VIEW_URIS);
		map.put(TrackstageRid.CONTENT_URI, TrackstageRid.VIEW_URIS);
		map.put(Videos.CONTENT_URI, Videos.VIEW_URIS);
		map.put(TrackssmallRid.CONTENT_URI, TrackssmallRid.VIEW_URIS);
		
		REFERENCING_VIEWS = Collections.unmodifiableMap(map);
		
	}
	
	private MxAdminDBContract(){}
	
	/**
	 * <p>Delete all rows from all tables</p>
	 */						
	public static void deleteAll() {
		PictureStage.delete();
		TrackstageBrother.delete();
		TrackstageRid.delete();
		Videos.delete();
	}
}
