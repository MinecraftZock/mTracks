/*
 * Generated by Robotoworks Mechanoid
 */
package info.hannes.mechadmin_gen.sqlite;

import android.content.ContentResolver;
import android.database.Cursor;
import android.net.Uri;
import android.os.Bundle;
import android.os.Parcel;
import android.os.Parcelable;

import com.robotoworks.mechanoid.Mechanoid;
import com.robotoworks.mechanoid.db.AbstractValuesBuilder;
import com.robotoworks.mechanoid.db.ActiveRecord;
import com.robotoworks.mechanoid.db.ActiveRecordFactory;
import com.robotoworks.mechanoid.util.Closeables;

import info.hannes.mechadmin_gen.sqlite.MxCalContract.ImportstatusCal;
import info.hannes.mechadmin_gen.sqlite.MxCalContract.ImportstatusCal.Builder;

public class ImportstatusCalRecord extends ActiveRecord implements Parcelable {

    private static final ActiveRecordFactory<ImportstatusCalRecord> sFactory = new ActiveRecordFactory<>() {
        @Override
        public ImportstatusCalRecord create(Cursor c) {
            return fromCursor(c);
        }

        @Override
        public Uri getContentUri() {
            return ImportstatusCal.CONTENT_URI;
        }

        @Override
        public String[] getProjection() {
            return PROJECTION;
        }
    };

    public static ActiveRecordFactory<ImportstatusCalRecord> getFactory() {
        return sFactory;
    }

    public static final Creator<ImportstatusCalRecord> CREATOR
            = new Creator<>() {
        public ImportstatusCalRecord createFromParcel(Parcel in) {
            return new ImportstatusCalRecord(in);
        }

        public ImportstatusCalRecord[] newArray(int size) {
            return new ImportstatusCalRecord[size];
        }
    };

    public static String[] PROJECTION = {
            ImportstatusCal._ID,
            ImportstatusCal.MSG,
            ImportstatusCal.CREATED
    };

    public interface Indices {
        int _ID = 0;
        int MSG = 1;
        int CREATED = 2;
    }

    private String mMsg;
    private boolean mMsgDirty;
    private long mCreated;
    private boolean mCreatedDirty;

    @Override
    protected String[] _getProjection() {
        return PROJECTION;
    }

    public void setMsg(String msg) {
        mMsg = msg;
        mMsgDirty = true;
    }

    public String getMsg() {
        return mMsg;
    }

    public void setCreated(long created) {
        mCreated = created;
        mCreatedDirty = true;
    }

    public long getCreated() {
        return mCreated;
    }


    public ImportstatusCalRecord() {
        super(ImportstatusCal.CONTENT_URI);
    }

    private ImportstatusCalRecord(Parcel in) {
        super(ImportstatusCal.CONTENT_URI);

        setId(in.readLong());

        mMsg = in.readString();
        mCreated = in.readLong();

        boolean[] dirtyFlags = new boolean[2];
        in.readBooleanArray(dirtyFlags);
        mMsgDirty = dirtyFlags[0];
        mCreatedDirty = dirtyFlags[1];
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        dest.writeLong(getId());
        dest.writeString(mMsg);
        dest.writeLong(mCreated);
        dest.writeBooleanArray(new boolean[]{
                mMsgDirty,
                mCreatedDirty
        });
    }

    @Override
    protected AbstractValuesBuilder createBuilder() {
        Builder builder = ImportstatusCal.newBuilder();

        if (mMsgDirty) {
            builder.setMsg(mMsg);
        }
        if (mCreatedDirty) {
            builder.setCreated(mCreated);
        }

        return builder;
    }

    @Override
    public void makeDirty(boolean dirty) {
        mMsgDirty = dirty;
        mCreatedDirty = dirty;
    }

    @Override
    protected void setPropertiesFromCursor(Cursor c) {
        setId(c.getLong(Indices._ID));
        setMsg(c.getString(Indices.MSG));
        setCreated(c.getLong(Indices.CREATED));
    }

    public static ImportstatusCalRecord fromCursor(Cursor c) {
        ImportstatusCalRecord item = new ImportstatusCalRecord();

        item.setPropertiesFromCursor(c);

        item.makeDirty(false);

        return item;
    }

    public static ImportstatusCalRecord fromBundle(Bundle bundle, String key) {
        bundle.setClassLoader(ImportstatusCalRecord.class.getClassLoader());
        return bundle.getParcelable(key);
    }

    public static ImportstatusCalRecord get(long id) {
        Cursor c = null;

        ContentResolver resolver = Mechanoid.getContentResolver();

        try {
            c = resolver.query(ImportstatusCal.CONTENT_URI.buildUpon()
                    .appendPath(String.valueOf(id)).build(), PROJECTION, null, null, null);

            if (!c.moveToFirst()) {
                return null;
            }

            return fromCursor(c);
        } finally {
            Closeables.closeSilently(c);
        }
    }
}
