import org.gradle.internal.logging.text.StyledTextOutputFactory

import static org.gradle.internal.logging.text.StyledTextOutput.Style

plugins {
    id 'com.android.application'
    id 'com.github.triplet.play'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
}

def mapKey = System.getenv("releaseKey") ? System.getenv("releaseKey") : "dummy"
def backendKey = "BACKEND_PROD_URL"
def backendUrl = System.getenv(backendKey) ? System.getenv(backendKey) : "http://backend.org"

def httpLoggingLevel = 'HTTP_LOGGING_LEVEL'
def SHOW_WEATHER = 'SHOW_WEATHER'
def commitSHA1 = 'COMMIT_SHA1'
def pushServerSleep = 'PUSH_SERVER_SLEEP'
def unixTime = 'UNIX_TIME_CREATED'

static def getLatestGitHash() {
    def process = "git rev-parse --short HEAD".execute()
    return process.text.toString().trim()
}

static def getGitCommitCount() {
    def process = "git rev-list HEAD --count".execute()
    return process.text.toInteger() + 2109
}

static def getUnixCreateTime() {
    def process = "date +%s".execute()
    return process.text.toString().trim()
}

static def getTag() {
    def process = "date +%y-%m".execute()
    def version = process.text.toString().trim()
    return version + "." + getGitCommitCount()
}

static def getVersion() {
    return getTag() + "-" + getLatestGitHash()
}

static void newTag() {
    println "Add new tag"
    def processLastCommitMessage = "git log -1 --pretty=%B".execute()
    def message = processLastCommitMessage.text.toString().trim()
    println "new message -> " + message
    def tagCommand = "git tag -a " + getTag() + " -m \"" + message + "\""
    println "command=" + tagCommand

    def sOut = new StringBuilder(), sErr = new StringBuilder()
    def process = ["bash", "-c", tagCommand, "-m", message].execute()
    process.consumeProcessOutput(sOut, sErr)
    process.waitForOrKill(1000)
    println "out> $sOut err> $sErr"
}

static void pushTag() {
    def sOut = new StringBuilder(), sErr = new StringBuilder()
    def process = "git push --tags".execute()
    process.consumeProcessOutput(sOut, sErr)
    process.waitForOrKill(2000)
    println "out> $sOut err> $sErr"
}

android {

    compileSdkVersion defaultCompileSdkVersion

    defaultConfig {
        versionCode getGitCommitCount()
        minSdkVersion defaultMinSdkVersion
        versionName getVersion()

        resValue "string", "GOOGLE_MAP_API_KEY", mapKey.toString()
        resValue "string", backendKey, backendUrl.toString()
        targetSdkVersion defaultTargetSdkVersion
        buildConfigField "Boolean", SHOW_WEATHER, "true"
        buildConfigField "String", httpLoggingLevel, "\"NONE\""  //NONE, BASIC, HEADERS, BODY
        buildConfigField "String", commitSHA1, "\"" + getLatestGitHash() + "\""
        buildConfigField "long", unixTime, getUnixCreateTime()
        multiDexEnabled true
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }

    // ./gradlew connectedAdminReleaseAndroidTest
    // testBuildType "release"

    signingConfigs {
        debugCI {
            storeFile file('./debug.keystore')
            storePassword "android"
            keyPassword "android"
            keyAlias "androiddebugkey"
        }
        release {
            storeFile file('../signing/release.keystore')
            storePassword System.getenv("KEYSTORE_PASS")
            keyAlias System.getenv("ALIAS_NAME")
            keyPassword System.getenv("ALIAS_PASS")
        }
    }
    packagingOptions {
        resources {
            excludes += ['META-INF/NOTICE.txt', 'META-INF/LICENSE.txt', 'META-INF/rxjava.properties', 'META-INF/DEPENDENCIES']
            pickFirsts += ['META-INF/atomicfu.kotlin_module']
        }
    }


    buildTypes {
        debug {
            if (System.getenv("CI") == "true") { // Github action
                signingConfig signingConfigs.debugCI
            }
            //applicationIdSuffix ".debug"
            versionNameSuffix ".debug"
            buildConfigField "boolean", "FILE_LOGGING", "true"
            buildConfigField "String", httpLoggingLevel, "\"BODY\""  //NONE, BASIC, HEADERS, BODY
            buildConfigField 'int', pushServerSleep, '1000'
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            //define whether log output gets logged into log file
            buildConfigField "boolean", "FILE_LOGGING", "false"
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.cfg', 'proguard_admin.cfg', 'proguard_admin_mechanoid.cfg', '../core/proguard_core.txt', 'proguard-RxCommAdminLib'
            testProguardFiles getDefaultProguardFile('proguard-android.txt'), "$projectDir/proguard.cfg", "$projectDir/proguard_admin.cfg", "$projectDir/proguard_admin_mechanoid.cfg", "$projectDir/proguard-test-rules.pro", '$projectDir/proguard-RxCommAdminLib'
            buildConfigField 'int', pushServerSleep, '1500'
        }
    }

    flavorDimensions "kind"
    productFlavors {
        paid {
            dimension "kind"
            applicationId 'info.mx.tracks'
            versionName version + "." + getGitCommitCount()
        }
        admin {
            dimension "kind"
            applicationId 'info.hannes.mxadmin'
            versionNameSuffix "-Admin"
            buildConfigField "Boolean", SHOW_WEATHER, "false"
        }
        free {
            applicationId "info.mx.free"
            versionNameSuffix "-Free"
        }
    }

    sourceSets {
        main {
            java.srcDirs = ['src/main/java', '../core/src', '../core/src-gen']
            res.srcDirs = ['src/main/res', '../core/res']
            assets.srcDirs = ['assets', '../core/assets']
            //disable automatic ndk-build
        }
    }

    buildFeatures {
        viewBinding true
    }
    lint {
        checkReleaseBuilds false
        disable 'MissingTranslation', 'UnusedResources', 'InvalidPackage', 'Range'
    }
    namespace 'info.mx.tracks'

}

dependencies {
    implementation fileTree(dir: '../core/libs', include: ['*.aar'])
    //implementation project(path: ':access')
    implementation project(':commonLib')

    implementation 'com.github.hannesa2:FloatingActionButton:2.3.2'

    implementation 'com.google.firebase:firebase-core:21.1.1'
    implementation platform('com.google.firebase:firebase-bom:28.3.0')
    implementation 'com.google.firebase:firebase-analytics:21.2.1' // (Recommended) Add Analytics
    implementation 'com.google.firebase:firebase-crashlytics:18.4.1'

    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation "com.google.code.gson:gson:${gsonVersion}"
    freeImplementation "com.google.android.gms:play-services-ads:22.0.0"

    // Koin main features for Android
    implementation "io.insert-koin:koin-android:$koin_version"

    // Java Compatibility
    implementation "io.insert-koin:koin-android-compat:$koin_version"
    // Jetpack WorkManager
    implementation "io.insert-koin:koin-androidx-workmanager:$koin_version"
    // Navigation Graph
    implementation "io.insert-koin:koin-androidx-navigation:$koin_version"
    // Jetpack Compose
    implementation "io.insert-koin:koin-androidx-compose:3.2.2"

    // crash
    def work_version = "2.8.1"
    implementation "androidx.work:work-runtime:$work_version"
    implementation "androidx.work:work-runtime-ktx:$work_version"

    implementation 'androidx.multidex:multidex:2.0.1'

    adminImplementation 'org.jsoup:jsoup:1.15.3'
    implementation 'com.github.hannesa2:android-maps-extensions:3.0'
    implementation 'com.github.hannesa2:AndroidSlidingUpPanel:4.3.0'
    implementation 'com.github.MikeOrtiz:TouchImageView:3.3'

    implementation "androidx.browser:browser:1.5.0"
    implementation "androidx.vectordrawable:vectordrawable-animated:1.1.0"

    implementation "androidx.room:room-runtime:$room"
    kapt "androidx.room:room-compiler:$room"
    implementation "androidx.room:room-rxjava2:$room"
    implementation "androidx.room:room-testing:$room"

    implementation 'com.github.hannesa2:ChangeLog:3.4'
    implementation 'com.github.AppDevNext.Logcat:LogcatCrashlyticLib:2.12'

    // core
    implementation 'com.github.hannesa2:mechanoid:4.3'
    implementation project(path: ':RxCommLib')
    implementation "com.google.code.gson:gson:${gsonVersion}"
    implementation 'net.lingala.zip4j:zip4j:2.7.0'
    implementation 'com.github.hannesa2:android-emulator-detector:1.4.2'
    implementation "com.google.android.gms:play-services-maps:18.1.0"
    implementation "com.google.android.gms:play-services-location:${defaultPlayLibVersion}"
    implementation "com.google.android.libraries.places:places:3.0.0"
    implementation "com.android.volley:volley:1.2.1" // maybe no more needed
    implementation 'com.google.maps.android:android-maps-utils:2.2.5'

    // Testing-only dependencies
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_core"
    androidTestImplementation "androidx.room:room-testing:$room"
    androidTestImplementation "androidx.test:rules:1.5.0"
    androidTestImplementation "androidx.test:runner:1.5.2"
    androidTestImplementation "androidx.test:core:1.5.0"

    // Assertions
    androidTestImplementation "androidx.test.ext:junit:$extJUnitVersion"
    androidTestImplementation "androidx.test.ext:truth:1.5.0"
    androidTestImplementation "com.google.truth:truth:1.1.3"

    // UiAutomator Testing
    androidTestImplementation "androidx.test.uiautomator:uiautomator:$uiautomatorVersion"
    androidTestImplementation 'org.hamcrest:hamcrest-integration:1.3'

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.6.1"
}

def generateGitChangelog() {
    def out = services.get(StyledTextOutputFactory).create("")
    out.style(Style.Normal).text("generateGitChangelog for admin, paid and free ")
            .style(Style.SuccessHeader).text(getVersion())
            .style(Style.Info).println(' GENERATED')
    println ""

    def processMkDirAdmin = "mkdir -p MXApp/src/admin/res/raw".execute()
    processMkDirAdmin.waitForProcessOutput(System.out, System.err)
    def processMkDirPaid = "mkdir -p MXApp/src/paid/res/raw".execute()
    processMkDirPaid.waitForProcessOutput(System.out, System.err)
    def processMkDirFree = "mkdir -p MXApp/src/free/res/raw".execute()
    processMkDirFree.waitForProcessOutput(System.out, System.err)

    def procGenerateAdmin = "./scripts/generateLog.sh".execute()
    procGenerateAdmin.waitForProcessOutput(System.out, System.err)
}

task newVersion() {
    if (gradle.startParameter.taskNames.contains("staticAnalysis")) {
        println("Running static analysis: disabling release builds!")
        config.params.disableReleaseBuilds = true
    }
    group = 'verification'
    description = 'Run all the static analysis and Unit tests needed for CI'
    //    dependsOn 'detekt'
    //    dependsOn 'checkstyle'
    //    dependsOn getTasksByName('lint', true).findAll { task -> !task.path.contains(':test-') }
    //    dependsOn getTasksByName('test', true).findAll { task -> !task.path.contains(':test-') }
    //dependsOn 'connectedAndroidTest'
    dependsOn 'tagNewVersion'
}

tasks['clean'].doLast({
    generateGitChangelog()
})

tasks.register("tagNewVersion") {
    group = 'Release'
    description = 'Before we test, then a tag is crated'

    doLast {
        def out = services.get(StyledTextOutputFactory).create("")
        out.style(Style.Normal).text("Build new tag ")
                .style(Style.SuccessHeader).text(getTag())
                .style(Style.Info).println(' GENERATED')
        println ""

        newTag()
        pushTag()
    }
}

play {
    serviceAccountCredentials = file("../signing/Surveilance-playstore.json")
    track = 'alpha'
}
