/*
 * Generated by Robotoworks Mechanoid
 */
package info.hannes.mechadmin_gen.sqlite;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;

import com.robotoworks.mechanoid.db.MechanoidSQLiteOpenHelper;
import com.robotoworks.mechanoid.db.SQLiteMigration;

import info.hannes.mechadmin_gen.sqlite.migrations.DefaultMxAdminDBMigrationV1;
import info.hannes.mechadmin_gen.sqlite.migrations.DefaultMxAdminDBMigrationV10;
import info.hannes.mechadmin_gen.sqlite.migrations.DefaultMxAdminDBMigrationV2;
import info.hannes.mechadmin_gen.sqlite.migrations.DefaultMxAdminDBMigrationV3;
import info.hannes.mechadmin_gen.sqlite.migrations.DefaultMxAdminDBMigrationV4;
import info.hannes.mechadmin_gen.sqlite.migrations.DefaultMxAdminDBMigrationV5;
import info.hannes.mechadmin_gen.sqlite.migrations.DefaultMxAdminDBMigrationV6;
import info.hannes.mechadmin_gen.sqlite.migrations.DefaultMxAdminDBMigrationV7;
import info.hannes.mechadmin_gen.sqlite.migrations.DefaultMxAdminDBMigrationV8;
import info.hannes.mechadmin_gen.sqlite.migrations.DefaultMxAdminDBMigrationV9;

public abstract class AbstractMxAdminDBOpenHelper extends MechanoidSQLiteOpenHelper {
	private static final String DATABASE_NAME = "MxAdminDB.db";

	public static final int VERSION = 10;

	public interface Sources {
		String TRACKSTAGE_RID = "trackstageRid";
		String TRACKSTAGE_BROTHER = "trackstageBrother";
		String VIDEOS = "videos";
		String PICTURE_STAGE = "PictureStage";
		String TRACKSSMALL_RID = "trackssmallRid";
	}

	public AbstractMxAdminDBOpenHelper(Context context) {
		super(context, DATABASE_NAME, null, VERSION);
	}

	public AbstractMxAdminDBOpenHelper(Context context, String name) {
		super(context, name, null, VERSION);
	}

	@Override
	public void onCreate(SQLiteDatabase db) {
		applyMigrations(db, 0, VERSION);
	}
	

	@Override
	protected SQLiteMigration createMigration(int version) {
		switch(version) {
			case 0:
				return createMxAdminDBMigrationV1();
			case 1:
				return createMxAdminDBMigrationV2();
			case 2:
				return createMxAdminDBMigrationV3();
			case 3:
				return createMxAdminDBMigrationV4();
			case 4:
				return createMxAdminDBMigrationV5();
			case 5:
				return createMxAdminDBMigrationV6();
			case 6:
				return createMxAdminDBMigrationV7();
			case 7:
				return createMxAdminDBMigrationV8();
			case 8:
				return createMxAdminDBMigrationV9();
			case 9:
				return createMxAdminDBMigrationV10();
			default:
				throw new IllegalStateException("No migration for version " + version);
		}
	}
	
	protected SQLiteMigration createMxAdminDBMigrationV1() {
		return new DefaultMxAdminDBMigrationV1();
	}
	protected SQLiteMigration createMxAdminDBMigrationV2() {
		return new DefaultMxAdminDBMigrationV2();
	}
	protected SQLiteMigration createMxAdminDBMigrationV3() {
		return new DefaultMxAdminDBMigrationV3();
	}
	protected SQLiteMigration createMxAdminDBMigrationV4() {
		return new DefaultMxAdminDBMigrationV4();
	}
	protected SQLiteMigration createMxAdminDBMigrationV5() {
		return new DefaultMxAdminDBMigrationV5();
	}
	protected SQLiteMigration createMxAdminDBMigrationV6() {
		return new DefaultMxAdminDBMigrationV6();
	}
	protected SQLiteMigration createMxAdminDBMigrationV7() {
		return new DefaultMxAdminDBMigrationV7();
	}
	protected SQLiteMigration createMxAdminDBMigrationV8() {
		return new DefaultMxAdminDBMigrationV8();
	}
	protected SQLiteMigration createMxAdminDBMigrationV9() {
		return new DefaultMxAdminDBMigrationV9();
	}
	protected SQLiteMigration createMxAdminDBMigrationV10() {
		return new DefaultMxAdminDBMigrationV10();
	}
}
