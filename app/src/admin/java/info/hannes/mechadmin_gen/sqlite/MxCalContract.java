/*
 * Generated by Robotoworks Mechanoid
 */
package info.hannes.mechadmin_gen.sqlite;

import android.net.Uri;
import android.provider.BaseColumns;

import com.robotoworks.mechanoid.Mechanoid;
import com.robotoworks.mechanoid.db.AbstractValuesBuilder;

import java.lang.reflect.Field;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

public class MxCalContract  {
    public static final String CONTENT_AUTHORITY = initAuthority();

	private static String initAuthority() {
		String authority = "info.hannes.mechadmin.sqlite.mxcal";

		try {
    		
    		ClassLoader loader = MxCalContract.class.getClassLoader();
    		
			Class<?> clz = loader.loadClass("info.hannes.mechadmin.sqlite.MxCalContentProviderAuthority");
			Field declaredField = clz.getDeclaredField("CONTENT_AUTHORITY");
			
			authority = declaredField.get(null).toString();
		} catch (ClassNotFoundException e) {} 
    	catch (NoSuchFieldException e) {} 
    	catch (IllegalArgumentException e) {
		} catch (IllegalAccessException e) {
		}
		
		return authority;
	}
	
    private static final Uri BASE_CONTENT_URI = Uri.parse("content://" + CONTENT_AUTHORITY);

	interface DownLoadSiteColumns {
		String REST_ID = "restId";
		String DISPLAY = "display";
		String URL = "url";
		String CREATEDATE = "createdate";
		String QUELLFILE_ID = "quellfile_id";
	}
	
	interface MXSerieColumns {
		String REST_ID = "restId";
		String WEB_ID = "webId";
		String CREATED_AT = "created_at";
		String UPDATED_AT = "updated_at";
		String NAME = "name";
		String SERIES_URL = "series_url";
		String YEAR = "year";
		String QUELLFILE_ID = "quellfile_id";
	}
	
	interface MxSeriesTrackColumns {
		String REST_ID = "restId";
		String WEB_ID = "webId";
		String WEB_SERIES_ID = "web_series_id";
		String WEB_TRACK_ID = "web_track_id";
		String CREATED_AT = "created_at";
		String UPDATED_AT = "updated_at";
		String EVENT_DATE = "event_date";
		String NOTES = "notes";
		String QUELLFILE_ID = "quellfile_id";
	}
	
	interface MxTrackColumns {
		String REST_ID = "restId";
		String WEB_ID = "webId";
		String CREATED_AT = "created_at";
		String UPDATED_AT = "updated_at";
		String ADDRESS = "address";
		String CITY = "city";
		String EMAIL = "email";
		String NAME = "name";
		String PHONE = "phone";
		String STATE_CODE = "state_code";
		String WEBSITE = "website";
		String ZIP = "zip";
		String QUELLFILE_ID = "quellfile_id";
		String LAT = "lat";
		String LNG = "lng";
	}
	
	interface QuellFileColumns {
		String REST_ID = "restId";
		String DOWNLOAD_SITE_ID = "downloadSite_id";
		String CREATEDATE = "createdate";
		String UPDATED_COUNT = "updatedCount";
		String CONTENT = "content";
		String LOG = "log";
		String URL = "url";
	}
	
	interface ImportstatusCalColumns {
		String MSG = "msg";
		String CREATED = "created";
	}
	
	interface QuellFileSmallColumns {
		String REST_ID = "restId";
		String URL = "url";
		String CREATEDATE = "createdate";
		String UPDATED_COUNT = "updatedCount";
		String CONTENT = "content";
	}
			
	/**
	 * <p>Column definitions and helper methods to work with the DownLoadSite.</p>
	 */
	public static class DownLoadSite implements DownLoadSiteColumns, BaseColumns {
	    public static final Uri CONTENT_URI = 
				BASE_CONTENT_URI.buildUpon().appendPath("DownLoadSite").build();
	
		/**
		 * <p>The content type for a cursor that contains many DownLoadSite rows.</p>
		 */
	    public static final String CONTENT_TYPE =
	            "vnd.android.cursor.dir/vnd.mxcal.DownLoadSite";
	
		/**
		 * <p>The content type for a cursor that contains a single DownLoadSite row.</p>
		 */
		public static final String ITEM_CONTENT_TYPE =
			"vnd.android.cursor.item/vnd.mxcal.DownLoadSite";
	
		/**
		 * <p>Builds a Uri with appended id for a row in DownLoadSite, 
		 * eg:- content://info.hannes.mechadmin.sqlite.mxcal/downloadsite/123.</p>
		 */
	    public static Uri buildUriWithId(long id) {
	        return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
	    }
		public static int delete() {
			return Mechanoid.getContentResolver().delete(DownLoadSite.CONTENT_URI, null, null);
		}
		
		public static int delete(String where, String[] selectionArgs) {
			return Mechanoid.getContentResolver().delete(DownLoadSite.CONTENT_URI, where, selectionArgs);
		}
		
		/**
		 * <p>Create a new Builder for DownLoadSite</p>
		 */
		public static Builder newBuilder() {
			return new Builder();
		}
		
		/**
		 * <p>Build and execute insert or update statements for DownLoadSite.</p>
		 *
		 * <p>Use {@link DownLoadSite#newBuilder()} to create new builder</p>
		 */
		public static class Builder extends AbstractValuesBuilder {
			private Builder() {
				super(Mechanoid.getApplicationContext(), DownLoadSite.CONTENT_URI);
			}
			
			public Builder setRestId(long value) {
				mValues.put(DownLoadSite.REST_ID, value);
				return this;
			}
			public Builder setDisplay(String value) {
				mValues.put(DownLoadSite.DISPLAY, value);
				return this;
			}
			public Builder setUrl(String value) {
				mValues.put(DownLoadSite.URL, value);
				return this;
			}
			public Builder setCreatedate(long value) {
				mValues.put(DownLoadSite.CREATEDATE, value);
				return this;
			}
			public Builder setQuellfileId(long value) {
				mValues.put(DownLoadSite.QUELLFILE_ID, value);
				return this;
			}
		}
		
		static final Set<Uri> VIEW_URIS;
		
		static {
			HashSet<Uri> viewUris =  new HashSet<Uri>();
	
			
			VIEW_URIS = Collections.unmodifiableSet(viewUris);
		}
	}
	/**
	 * <p>Column definitions and helper methods to work with the MXSerie.</p>
	 */
	public static class MXSerie implements MXSerieColumns, BaseColumns {
	    public static final Uri CONTENT_URI = 
				BASE_CONTENT_URI.buildUpon().appendPath("MXSerie").build();
	
		/**
		 * <p>The content type for a cursor that contains many MXSerie rows.</p>
		 */
	    public static final String CONTENT_TYPE =
	            "vnd.android.cursor.dir/vnd.mxcal.MXSerie";
	
		/**
		 * <p>The content type for a cursor that contains a single MXSerie row.</p>
		 */
		public static final String ITEM_CONTENT_TYPE =
			"vnd.android.cursor.item/vnd.mxcal.MXSerie";
	
		/**
		 * <p>Builds a Uri with appended id for a row in MXSerie, 
		 * eg:- content://info.hannes.mechadmin.sqlite.mxcal/mxserie/123.</p>
		 */
	    public static Uri buildUriWithId(long id) {
	        return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
	    }
		public static int delete() {
			return Mechanoid.getContentResolver().delete(MXSerie.CONTENT_URI, null, null);
		}
		
		public static int delete(String where, String[] selectionArgs) {
			return Mechanoid.getContentResolver().delete(MXSerie.CONTENT_URI, where, selectionArgs);
		}
		
		/**
		 * <p>Create a new Builder for MXSerie</p>
		 */
		public static Builder newBuilder() {
			return new Builder();
		}
		
		/**
		 * <p>Build and execute insert or update statements for MXSerie.</p>
		 *
		 * <p>Use {@link MXSerie#newBuilder()} to create new builder</p>
		 */
		public static class Builder extends AbstractValuesBuilder {
			private Builder() {
				super(Mechanoid.getApplicationContext(), MXSerie.CONTENT_URI);
			}
			
			public Builder setRestId(long value) {
				mValues.put(MXSerie.REST_ID, value);
				return this;
			}
			public Builder setWebId(long value) {
				mValues.put(MXSerie.WEB_ID, value);
				return this;
			}
			public Builder setCreatedAt(long value) {
				mValues.put(MXSerie.CREATED_AT, value);
				return this;
			}
			public Builder setUpdatedAt(long value) {
				mValues.put(MXSerie.UPDATED_AT, value);
				return this;
			}
			public Builder setName(String value) {
				mValues.put(MXSerie.NAME, value);
				return this;
			}
			public Builder setSeriesUrl(String value) {
				mValues.put(MXSerie.SERIES_URL, value);
				return this;
			}
			public Builder setYear(long value) {
				mValues.put(MXSerie.YEAR, value);
				return this;
			}
			public Builder setQuellfileId(long value) {
				mValues.put(MXSerie.QUELLFILE_ID, value);
				return this;
			}
		}
		
		static final Set<Uri> VIEW_URIS;
		
		static {
			HashSet<Uri> viewUris =  new HashSet<Uri>();
	
			
			VIEW_URIS = Collections.unmodifiableSet(viewUris);
		}
	}
	/**
	 * <p>Column definitions and helper methods to work with the MxSeriesTrack.</p>
	 */
	public static class MxSeriesTrack implements MxSeriesTrackColumns, BaseColumns {
	    public static final Uri CONTENT_URI = 
				BASE_CONTENT_URI.buildUpon().appendPath("MxSeriesTrack").build();
	
		/**
		 * <p>The content type for a cursor that contains many MxSeriesTrack rows.</p>
		 */
	    public static final String CONTENT_TYPE =
	            "vnd.android.cursor.dir/vnd.mxcal.MxSeriesTrack";
	
		/**
		 * <p>The content type for a cursor that contains a single MxSeriesTrack row.</p>
		 */
		public static final String ITEM_CONTENT_TYPE =
			"vnd.android.cursor.item/vnd.mxcal.MxSeriesTrack";
	
		/**
		 * <p>Builds a Uri with appended id for a row in MxSeriesTrack, 
		 * eg:- content://info.hannes.mechadmin.sqlite.mxcal/mxseriestrack/123.</p>
		 */
	    public static Uri buildUriWithId(long id) {
	        return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
	    }
		public static int delete() {
			return Mechanoid.getContentResolver().delete(MxSeriesTrack.CONTENT_URI, null, null);
		}
		
		public static int delete(String where, String[] selectionArgs) {
			return Mechanoid.getContentResolver().delete(MxSeriesTrack.CONTENT_URI, where, selectionArgs);
		}
		
		/**
		 * <p>Create a new Builder for MxSeriesTrack</p>
		 */
		public static Builder newBuilder() {
			return new Builder();
		}
		
		/**
		 * <p>Build and execute insert or update statements for MxSeriesTrack.</p>
		 *
		 * <p>Use {@link MxSeriesTrack#newBuilder()} to create new builder</p>
		 */
		public static class Builder extends AbstractValuesBuilder {
			private Builder() {
				super(Mechanoid.getApplicationContext(), MxSeriesTrack.CONTENT_URI);
			}
			
			public Builder setRestId(long value) {
				mValues.put(MxSeriesTrack.REST_ID, value);
				return this;
			}
			public Builder setWebId(long value) {
				mValues.put(MxSeriesTrack.WEB_ID, value);
				return this;
			}
			public Builder setWebSeriesId(long value) {
				mValues.put(MxSeriesTrack.WEB_SERIES_ID, value);
				return this;
			}
			public Builder setWebTrackId(long value) {
				mValues.put(MxSeriesTrack.WEB_TRACK_ID, value);
				return this;
			}
			public Builder setCreatedAt(long value) {
				mValues.put(MxSeriesTrack.CREATED_AT, value);
				return this;
			}
			public Builder setUpdatedAt(long value) {
				mValues.put(MxSeriesTrack.UPDATED_AT, value);
				return this;
			}
			public Builder setEventDate(long value) {
				mValues.put(MxSeriesTrack.EVENT_DATE, value);
				return this;
			}
			public Builder setNotes(String value) {
				mValues.put(MxSeriesTrack.NOTES, value);
				return this;
			}
			public Builder setQuellfileId(long value) {
				mValues.put(MxSeriesTrack.QUELLFILE_ID, value);
				return this;
			}
		}
		
		static final Set<Uri> VIEW_URIS;
		
		static {
			HashSet<Uri> viewUris =  new HashSet<Uri>();
	
			
			VIEW_URIS = Collections.unmodifiableSet(viewUris);
		}
	}
	/**
	 * <p>Column definitions and helper methods to work with the MxTrack.</p>
	 */
	public static class MxTrack implements MxTrackColumns, BaseColumns {
	    public static final Uri CONTENT_URI = 
				BASE_CONTENT_URI.buildUpon().appendPath("MxTrack").build();
	
		/**
		 * <p>The content type for a cursor that contains many MxTrack rows.</p>
		 */
	    public static final String CONTENT_TYPE =
	            "vnd.android.cursor.dir/vnd.mxcal.MxTrack";
	
		/**
		 * <p>The content type for a cursor that contains a single MxTrack row.</p>
		 */
		public static final String ITEM_CONTENT_TYPE =
			"vnd.android.cursor.item/vnd.mxcal.MxTrack";
	
		/**
		 * <p>Builds a Uri with appended id for a row in MxTrack, 
		 * eg:- content://info.hannes.mechadmin.sqlite.mxcal/mxtrack/123.</p>
		 */
	    public static Uri buildUriWithId(long id) {
	        return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
	    }
		public static int delete() {
			return Mechanoid.getContentResolver().delete(MxTrack.CONTENT_URI, null, null);
		}
		
		public static int delete(String where, String[] selectionArgs) {
			return Mechanoid.getContentResolver().delete(MxTrack.CONTENT_URI, where, selectionArgs);
		}
		
		/**
		 * <p>Create a new Builder for MxTrack</p>
		 */
		public static Builder newBuilder() {
			return new Builder();
		}
		
		/**
		 * <p>Build and execute insert or update statements for MxTrack.</p>
		 *
		 * <p>Use {@link MxTrack#newBuilder()} to create new builder</p>
		 */
		public static class Builder extends AbstractValuesBuilder {
			private Builder() {
				super(Mechanoid.getApplicationContext(), MxTrack.CONTENT_URI);
			}
			
			public Builder setRestId(long value) {
				mValues.put(MxTrack.REST_ID, value);
				return this;
			}
			public Builder setWebId(long value) {
				mValues.put(MxTrack.WEB_ID, value);
				return this;
			}
			public Builder setCreatedAt(long value) {
				mValues.put(MxTrack.CREATED_AT, value);
				return this;
			}
			public Builder setUpdatedAt(long value) {
				mValues.put(MxTrack.UPDATED_AT, value);
				return this;
			}
			public Builder setAddress(String value) {
				mValues.put(MxTrack.ADDRESS, value);
				return this;
			}
			public Builder setCity(String value) {
				mValues.put(MxTrack.CITY, value);
				return this;
			}
			public Builder setEmail(String value) {
				mValues.put(MxTrack.EMAIL, value);
				return this;
			}
			public Builder setName(String value) {
				mValues.put(MxTrack.NAME, value);
				return this;
			}
			public Builder setPhone(String value) {
				mValues.put(MxTrack.PHONE, value);
				return this;
			}
			public Builder setStateCode(String value) {
				mValues.put(MxTrack.STATE_CODE, value);
				return this;
			}
			public Builder setWebsite(String value) {
				mValues.put(MxTrack.WEBSITE, value);
				return this;
			}
			public Builder setZip(long value) {
				mValues.put(MxTrack.ZIP, value);
				return this;
			}
			public Builder setQuellfileId(long value) {
				mValues.put(MxTrack.QUELLFILE_ID, value);
				return this;
			}
			public Builder setLat(double value) {
				mValues.put(MxTrack.LAT, value);
				return this;
			}
			public Builder setLng(double value) {
				mValues.put(MxTrack.LNG, value);
				return this;
			}
		}
		
		static final Set<Uri> VIEW_URIS;
		
		static {
			HashSet<Uri> viewUris =  new HashSet<Uri>();
	
			
			VIEW_URIS = Collections.unmodifiableSet(viewUris);
		}
	}
	/**
	 * <p>Column definitions and helper methods to work with the QuellFile.</p>
	 */
	public static class QuellFile implements QuellFileColumns, BaseColumns {
	    public static final Uri CONTENT_URI = 
				BASE_CONTENT_URI.buildUpon().appendPath("QuellFile").build();
	
		/**
		 * <p>The content type for a cursor that contains many QuellFile rows.</p>
		 */
	    public static final String CONTENT_TYPE =
	            "vnd.android.cursor.dir/vnd.mxcal.QuellFile";
	
		/**
		 * <p>The content type for a cursor that contains a single QuellFile row.</p>
		 */
		public static final String ITEM_CONTENT_TYPE =
			"vnd.android.cursor.item/vnd.mxcal.QuellFile";
	
		/**
		 * <p>Builds a Uri with appended id for a row in QuellFile, 
		 * eg:- content://info.hannes.mechadmin.sqlite.mxcal/quellfile/123.</p>
		 */
	    public static Uri buildUriWithId(long id) {
	        return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
	    }
		public static int delete() {
			return Mechanoid.getContentResolver().delete(QuellFile.CONTENT_URI, null, null);
		}
		
		public static int delete(String where, String[] selectionArgs) {
			return Mechanoid.getContentResolver().delete(QuellFile.CONTENT_URI, where, selectionArgs);
		}
		
		/**
		 * <p>Create a new Builder for QuellFile</p>
		 */
		public static Builder newBuilder() {
			return new Builder();
		}
		
		/**
		 * <p>Build and execute insert or update statements for QuellFile.</p>
		 *
		 * <p>Use {@link QuellFile#newBuilder()} to create new builder</p>
		 */
		public static class Builder extends AbstractValuesBuilder {
			private Builder() {
				super(Mechanoid.getApplicationContext(), QuellFile.CONTENT_URI);
			}
			
			public Builder setRestId(long value) {
				mValues.put(QuellFile.REST_ID, value);
				return this;
			}
			public Builder setDownloadSiteId(long value) {
				mValues.put(QuellFile.DOWNLOAD_SITE_ID, value);
				return this;
			}
			public Builder setCreatedate(long value) {
				mValues.put(QuellFile.CREATEDATE, value);
				return this;
			}
			public Builder setUpdatedCount(long value) {
				mValues.put(QuellFile.UPDATED_COUNT, value);
				return this;
			}
			public Builder setContent(String value) {
				mValues.put(QuellFile.CONTENT, value);
				return this;
			}
			public Builder setLog(String value) {
				mValues.put(QuellFile.LOG, value);
				return this;
			}
			public Builder setUrl(String value) {
				mValues.put(QuellFile.URL, value);
				return this;
			}
		}
		
		static final Set<Uri> VIEW_URIS;
		
		static {
			HashSet<Uri> viewUris =  new HashSet<Uri>();
	
			viewUris.add(QuellFileSmall.CONTENT_URI);
			
			VIEW_URIS = Collections.unmodifiableSet(viewUris);
		}
	}
	/**
	 * <p>Column definitions and helper methods to work with the ImportstatusCal.</p>
	 */
	public static class ImportstatusCal implements ImportstatusCalColumns, BaseColumns {
	    public static final Uri CONTENT_URI = 
				BASE_CONTENT_URI.buildUpon().appendPath("importstatusCal").build();
	
		/**
		 * <p>The content type for a cursor that contains many ImportstatusCal rows.</p>
		 */
	    public static final String CONTENT_TYPE =
	            "vnd.android.cursor.dir/vnd.mxcal.importstatusCal";
	
		/**
		 * <p>The content type for a cursor that contains a single ImportstatusCal row.</p>
		 */
		public static final String ITEM_CONTENT_TYPE =
			"vnd.android.cursor.item/vnd.mxcal.importstatusCal";
	
		/**
		 * <p>Builds a Uri with appended id for a row in ImportstatusCal, 
		 * eg:- content://info.hannes.mechadmin.sqlite.mxcal/importstatuscal/123.</p>
		 */
	    public static Uri buildUriWithId(long id) {
	        return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
	    }
		public static int delete() {
			return Mechanoid.getContentResolver().delete(ImportstatusCal.CONTENT_URI, null, null);
		}
		
		public static int delete(String where, String[] selectionArgs) {
			return Mechanoid.getContentResolver().delete(ImportstatusCal.CONTENT_URI, where, selectionArgs);
		}
		
		/**
		 * <p>Create a new Builder for ImportstatusCal</p>
		 */
		public static Builder newBuilder() {
			return new Builder();
		}
		
		/**
		 * <p>Build and execute insert or update statements for ImportstatusCal.</p>
		 *
		 * <p>Use {@link ImportstatusCal#newBuilder()} to create new builder</p>
		 */
		public static class Builder extends AbstractValuesBuilder {
			private Builder() {
				super(Mechanoid.getApplicationContext(), ImportstatusCal.CONTENT_URI);
			}
			
			public Builder setMsg(String value) {
				mValues.put(ImportstatusCal.MSG, value);
				return this;
			}
			public Builder setCreated(long value) {
				mValues.put(ImportstatusCal.CREATED, value);
				return this;
			}
		}
		
		static final Set<Uri> VIEW_URIS;
		
		static {
			HashSet<Uri> viewUris =  new HashSet<Uri>();
	
			
			VIEW_URIS = Collections.unmodifiableSet(viewUris);
		}
	}

	/**
	 * <p>Column definitions and helper methods to work with the QuellFileSmall.</p>
	 */
	public static class QuellFileSmall implements QuellFileSmallColumns, BaseColumns {
	    public static final Uri CONTENT_URI = 
				BASE_CONTENT_URI.buildUpon().appendPath("QuellFileSmall").build();
	
		/**
		 * <p>The content type for a cursor that contains many QuellFileSmall rows.</p>
		 */
	    public static final String CONTENT_TYPE =
	            "vnd.android.cursor.dir/vnd.mxcal.QuellFileSmall";
	
		/**
		 * <p>The content type for a cursor that contains a single QuellFileSmall row.</p>
		 */
		public static final String ITEM_CONTENT_TYPE =
			"vnd.android.cursor.item/vnd.mxcal.QuellFileSmall";
	
		/**
		 * <p>Builds a Uri with appended id for a row in QuellFileSmall, 
		 * eg:- content://info.hannes.mechadmin.sqlite.mxcal/quellfilesmall/123.</p>
		 */
	    public static Uri buildUriWithId(long id) {
	        return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
	    }
		public static int delete() {
			return Mechanoid.getContentResolver().delete(QuellFileSmall.CONTENT_URI, null, null);
		}
		
		public static int delete(String where, String[] selectionArgs) {
			return Mechanoid.getContentResolver().delete(QuellFileSmall.CONTENT_URI, where, selectionArgs);
		}
		
		/**
		 * <p>Create a new Builder for QuellFileSmall</p>
		 */
		public static Builder newBuilder() {
			return new Builder();
		}
		
		/**
		 * <p>Build and execute insert or update statements for QuellFileSmall.</p>
		 *
		 * <p>Use {@link QuellFileSmall#newBuilder()} to create new builder</p>
		 */
		public static class Builder extends AbstractValuesBuilder {
			private Builder() {
				super(Mechanoid.getApplicationContext(), QuellFileSmall.CONTENT_URI);
			}
			
			public Builder setRestId(long value) {
				mValues.put(QuellFileSmall.REST_ID, value);
				return this;
			}
			public Builder setUrl(String value) {
				mValues.put(QuellFileSmall.URL, value);
				return this;
			}
			public Builder setCreatedate(long value) {
				mValues.put(QuellFileSmall.CREATEDATE, value);
				return this;
			}
			public Builder setUpdatedCount(long value) {
				mValues.put(QuellFileSmall.UPDATED_COUNT, value);
				return this;
			}
			public Builder setContent(String value) {
				mValues.put(QuellFileSmall.CONTENT, value);
				return this;
			}
		}
		
		static final Set<Uri> VIEW_URIS;
		
		static {
			HashSet<Uri> viewUris =  new HashSet<Uri>();
	
			
			VIEW_URIS = Collections.unmodifiableSet(viewUris);
		}
	}
	

	
	static Map<Uri, Set<Uri>> REFERENCING_VIEWS;
	
	static {
		Map<Uri, Set<Uri>> map = new HashMap<Uri, Set<Uri>>();
		
		map.put(DownLoadSite.CONTENT_URI, DownLoadSite.VIEW_URIS);
		map.put(MXSerie.CONTENT_URI, MXSerie.VIEW_URIS);
		map.put(MxSeriesTrack.CONTENT_URI, MxSeriesTrack.VIEW_URIS);
		map.put(MxTrack.CONTENT_URI, MxTrack.VIEW_URIS);
		map.put(QuellFile.CONTENT_URI, QuellFile.VIEW_URIS);
		map.put(ImportstatusCal.CONTENT_URI, ImportstatusCal.VIEW_URIS);
		map.put(QuellFileSmall.CONTENT_URI, QuellFileSmall.VIEW_URIS);
		
		REFERENCING_VIEWS = Collections.unmodifiableMap(map);
		
	}
	
	private MxCalContract(){}
	
	/**
	 * <p>Delete all rows from all tables</p>
	 */						
	public static void deleteAll() {
		DownLoadSite.delete();
		MXSerie.delete();
		MxSeriesTrack.delete();
		MxTrack.delete();
		QuellFile.delete();
		ImportstatusCal.delete();
	}
}
