/*
 * Generated by Robotoworks Mechanoid
 */
package info.hannes.mechadmin_gen.sqlite;

import android.content.ContentResolver;
import android.database.Cursor;
import android.net.Uri;
import android.os.Bundle;
import android.os.Parcel;
import android.os.Parcelable;

import com.robotoworks.mechanoid.Mechanoid;
import com.robotoworks.mechanoid.db.AbstractValuesBuilder;
import com.robotoworks.mechanoid.db.ActiveRecord;
import com.robotoworks.mechanoid.db.ActiveRecordFactory;
import com.robotoworks.mechanoid.util.Closeables;

import info.hannes.mechadmin_gen.sqlite.MxAdminDBContract.TrackssmallRid;
import info.hannes.mechadmin_gen.sqlite.MxAdminDBContract.TrackssmallRid.Builder;

public class TrackssmallRidRecord extends ActiveRecord implements Parcelable {

	private static ActiveRecordFactory<TrackssmallRidRecord> sFactory = new ActiveRecordFactory<TrackssmallRidRecord>() {
		@Override
		public TrackssmallRidRecord create(Cursor c) {
			return fromCursor(c);
		}

		@Override
		public Uri getContentUri() {
			return TrackssmallRid.CONTENT_URI;
		}
		
		@Override
		public String[] getProjection() {
			return PROJECTION;
		}
	};
	
	public static ActiveRecordFactory<TrackssmallRidRecord> getFactory() {
		return sFactory;
	}

    public static final Creator<TrackssmallRidRecord> CREATOR
    	= new Creator<TrackssmallRidRecord>() {
        public TrackssmallRidRecord createFromParcel(Parcel in) {
            return new TrackssmallRidRecord(in);
        }

        public TrackssmallRidRecord[] newArray(int size) {
            return new TrackssmallRidRecord[size];
        }
    };
    
    public static String[] PROJECTION = {
    	TrackssmallRid._ID,
    	TrackssmallRid.REST_ID,
    	TrackssmallRid.LEN_J_S_O_N,
    	TrackssmallRid.LEN_X_M_L
    };
    
    public interface Indices {
    	int _ID = 0;
    	int REST_ID = 1;
    	int LEN_J_S_O_N = 2;
    	int LEN_X_M_L = 3;
    }
    
    private long mRestId;
    private boolean mRestIdDirty;
    private long mLenJSON;
    private boolean mLenJSONDirty;
    private long mLenXML;
    private boolean mLenXMLDirty;
    
    @Override
    protected String[] _getProjection() {
    	return PROJECTION;
    }
    
    public void setRestId(long restId) {
    	mRestId = restId;
    	mRestIdDirty = true;
    }
    
    public long getRestId() {
    	return mRestId;
    }
    public void setLenJSON(long lenJSON) {
    	mLenJSON = lenJSON;
    	mLenJSONDirty = true;
    }
    
    public long getLenJSON() {
    	return mLenJSON;
    }
    public void setLenXML(long lenXML) {
    	mLenXML = lenXML;
    	mLenXMLDirty = true;
    }
    
    public long getLenXML() {
    	return mLenXML;
    }
    
    public TrackssmallRidRecord() {
    	super(TrackssmallRid.CONTENT_URI);
	}
	
	private TrackssmallRidRecord(Parcel in) {
    	super(TrackssmallRid.CONTENT_URI);
    	
		setId(in.readLong());
		
		mRestId = in.readLong();
		mLenJSON = in.readLong();
		mLenXML = in.readLong();
		
		boolean[] dirtyFlags = new boolean[3];
		in.readBooleanArray(dirtyFlags);
		mRestIdDirty = dirtyFlags[0];
		mLenJSONDirty = dirtyFlags[1];
		mLenXMLDirty = dirtyFlags[2];
	}
	
	@Override
	public int describeContents() {
	    return 0;
	}
	
	@Override
	public void writeToParcel(Parcel dest, int flags) {
		dest.writeLong(getId());
		dest.writeLong(mRestId);
		dest.writeLong(mLenJSON);
		dest.writeLong(mLenXML);
		dest.writeBooleanArray(new boolean[] {
			mRestIdDirty,
			mLenJSONDirty,
			mLenXMLDirty
		});
	}
	
	@Override
	protected AbstractValuesBuilder createBuilder() {
		Builder builder = TrackssmallRid.newBuilder();

		if(mRestIdDirty) {
			builder.setRestId(mRestId);
		}
		if(mLenJSONDirty) {
			builder.setLenJSON(mLenJSON);
		}
		if(mLenXMLDirty) {
			builder.setLenXML(mLenXML);
		}
		
		return builder;
	}
	
    @Override
	public void makeDirty(boolean dirty){
		mRestIdDirty = dirty;
		mLenJSONDirty = dirty;
		mLenXMLDirty = dirty;
	}

	@Override
	protected void setPropertiesFromCursor(Cursor c) {
		setId(c.getLong(Indices._ID));
		setRestId(c.getLong(Indices.REST_ID));
		setLenJSON(c.getLong(Indices.LEN_J_S_O_N));
		setLenXML(c.getLong(Indices.LEN_X_M_L));
	}
	
	public static TrackssmallRidRecord fromCursor(Cursor c) {
	    TrackssmallRidRecord item = new TrackssmallRidRecord();
	    
		item.setPropertiesFromCursor(c);
		
		item.makeDirty(false);
		
	    return item;
	}
	
	public static TrackssmallRidRecord fromBundle(Bundle bundle, String key) {
		bundle.setClassLoader(TrackssmallRidRecord.class.getClassLoader());
		return bundle.getParcelable(key);
	}
	
	public static TrackssmallRidRecord get(long id) {
	    Cursor c = null;
	    
	    ContentResolver resolver = Mechanoid.getContentResolver();
	    
	    try {
	        c = resolver.query(TrackssmallRid.CONTENT_URI.buildUpon()
			.appendPath(String.valueOf(id)).build(), PROJECTION, null, null, null);
	        
	        if(!c.moveToFirst()) {
	            return null;
	        }
	        
	        return fromCursor(c);
	    } finally {
	        Closeables.closeSilently(c);
	    }
	}
}
