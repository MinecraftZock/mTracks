/*
 * Generated by Robotoworks Mechanoid
 */
package info.hannes.mechadmin_gen.sqlite;

import android.content.Context;
import android.content.UriMatcher;
import android.net.Uri;

import com.robotoworks.mechanoid.db.ContentProviderActions;
import com.robotoworks.mechanoid.db.DefaultContentProviderActions;
import com.robotoworks.mechanoid.db.MechanoidContentProvider;
import com.robotoworks.mechanoid.db.MechanoidSQLiteOpenHelper;

import java.util.Set;

import info.hannes.mechadmin_gen.sqlite.AbstractMxAdminDBOpenHelper.Sources;

public abstract class AbstractMxAdminDBContentProvider extends MechanoidContentProvider {

	protected static final int TRACKSTAGE_RID = 0;
	protected static final int TRACKSTAGE_RID_ID = 1;
	protected static final int TRACKSTAGE_BROTHER = 2;
	protected static final int TRACKSTAGE_BROTHER_ID = 3;
	protected static final int VIDEOS = 4;
	protected static final int VIDEOS_ID = 5;
	protected static final int PICTURE_STAGE = 6;
	protected static final int PICTURE_STAGE_ID = 7;

	protected static final int TRACKSSMALL_RID = 8;
	protected static final int TRACKSSMALL_RID_ID = 9;
	

	
	public static final int NUM_URI_MATCHERS = 10;

	@Override
    protected UriMatcher createUriMatcher() {
        final UriMatcher matcher = new UriMatcher(UriMatcher.NO_MATCH);
        final String authority = MxAdminDBContract.CONTENT_AUTHORITY;

		matcher.addURI(authority, "trackstageRid", TRACKSTAGE_RID);
		matcher.addURI(authority, "trackstageRid/#", TRACKSTAGE_RID_ID);
		matcher.addURI(authority, "trackstageBrother", TRACKSTAGE_BROTHER);
		matcher.addURI(authority, "trackstageBrother/#", TRACKSTAGE_BROTHER_ID);
		matcher.addURI(authority, "videos", VIDEOS);
		matcher.addURI(authority, "videos/#", VIDEOS_ID);
		matcher.addURI(authority, "PictureStage", PICTURE_STAGE);
		matcher.addURI(authority, "PictureStage/#", PICTURE_STAGE_ID);
		matcher.addURI(authority, "trackssmallRid", TRACKSSMALL_RID);
		matcher.addURI(authority, "trackssmallRid/#", TRACKSSMALL_RID_ID);

		// User Actions
        return matcher;
    }

    @Override
    protected String[] createContentTypes() {
		String[] contentTypes = new String[NUM_URI_MATCHERS];

		contentTypes[TRACKSTAGE_RID] = MxAdminDBContract.TrackstageRid.CONTENT_TYPE;
		contentTypes[TRACKSTAGE_RID_ID] = MxAdminDBContract.TrackstageRid.ITEM_CONTENT_TYPE;
		contentTypes[TRACKSTAGE_BROTHER] = MxAdminDBContract.TrackstageBrother.CONTENT_TYPE;
		contentTypes[TRACKSTAGE_BROTHER_ID] = MxAdminDBContract.TrackstageBrother.ITEM_CONTENT_TYPE;
		contentTypes[VIDEOS] = MxAdminDBContract.Videos.CONTENT_TYPE;
		contentTypes[VIDEOS_ID] = MxAdminDBContract.Videos.ITEM_CONTENT_TYPE;
		contentTypes[PICTURE_STAGE] = MxAdminDBContract.PictureStage.CONTENT_TYPE;
		contentTypes[PICTURE_STAGE_ID] = MxAdminDBContract.PictureStage.ITEM_CONTENT_TYPE;
		contentTypes[TRACKSSMALL_RID] = MxAdminDBContract.TrackssmallRid.CONTENT_TYPE;
		contentTypes[TRACKSSMALL_RID_ID] = MxAdminDBContract.TrackssmallRid.ITEM_CONTENT_TYPE;

		return contentTypes;
    }

	@Override
	protected MechanoidSQLiteOpenHelper createOpenHelper(Context context) {
        return new MxAdminDBOpenHelper(context);
	}

	@Override
	protected Set<Uri> getRelatedUris(Uri uri) {
		return MxAdminDBContract.REFERENCING_VIEWS.get(uri);
	}

    @Override
    protected ContentProviderActions createActions(int id) {
    	switch(id) {
			case TRACKSTAGE_RID:
				return createTrackstageRidActions();
			case TRACKSTAGE_RID_ID:
				return createTrackstageRidByIdActions();
			case TRACKSTAGE_BROTHER:
				return createTrackstageBrotherActions();
			case TRACKSTAGE_BROTHER_ID:
				return createTrackstageBrotherByIdActions();
			case VIDEOS:
				return createVideosActions();
			case VIDEOS_ID:
				return createVideosByIdActions();
			case PICTURE_STAGE:
				return createPictureStageActions();
			case PICTURE_STAGE_ID:
				return createPictureStageByIdActions();
			case TRACKSSMALL_RID:
				return createTrackssmallRidActions();
			case TRACKSSMALL_RID_ID:
				return createTrackssmallRidByIdActions();
			default:
				throw new UnsupportedOperationException("Unknown id: " + id);
    	}
    }

    protected ContentProviderActions createTrackstageRidByIdActions() {
    	return new DefaultContentProviderActions(Sources.TRACKSTAGE_RID, true, TrackstageRidRecord.getFactory());
    }

    protected ContentProviderActions createTrackstageRidActions() {
    	return new DefaultContentProviderActions(Sources.TRACKSTAGE_RID, false, TrackstageRidRecord.getFactory());
    }

    protected ContentProviderActions createTrackstageBrotherByIdActions() {
    	return new DefaultContentProviderActions(Sources.TRACKSTAGE_BROTHER, true, TrackstageBrotherRecord.getFactory());
    }

    protected ContentProviderActions createTrackstageBrotherActions() {
    	return new DefaultContentProviderActions(Sources.TRACKSTAGE_BROTHER, false, TrackstageBrotherRecord.getFactory());
    }

    protected ContentProviderActions createVideosByIdActions() {
    	return new DefaultContentProviderActions(Sources.VIDEOS, true, VideosRecord.getFactory());
    }

    protected ContentProviderActions createVideosActions() {
    	return new DefaultContentProviderActions(Sources.VIDEOS, false, VideosRecord.getFactory());
    }

    protected ContentProviderActions createPictureStageByIdActions() {
    	return new DefaultContentProviderActions(Sources.PICTURE_STAGE, true, PictureStageRecord.getFactory());
    }

    protected ContentProviderActions createPictureStageActions() {
    	return new DefaultContentProviderActions(Sources.PICTURE_STAGE, false, PictureStageRecord.getFactory());
    }

    protected ContentProviderActions createTrackssmallRidByIdActions() {
    	return new DefaultContentProviderActions(Sources.TRACKSSMALL_RID, true, TrackssmallRidRecord.getFactory());
    }
    
    protected ContentProviderActions createTrackssmallRidActions() {
    	return new DefaultContentProviderActions(Sources.TRACKSSMALL_RID, false, TrackssmallRidRecord.getFactory());
    }
    
}
